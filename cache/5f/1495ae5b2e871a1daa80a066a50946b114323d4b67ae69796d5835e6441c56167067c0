{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":158,"column":0,"index":4528}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":158,"column":0,"index":4528}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./BlobManager","data":{"asyncType":null,"locs":[{"start":{"line":61,"column":24,"index":1686},"end":{"line":61,"column":48,"index":1710}},{"start":{"line":85,"column":24,"index":2365},"end":{"line":85,"column":48,"index":2389}},{"start":{"line":134,"column":24,"index":4003},"end":{"line":134,"column":48,"index":4027}}],"key":"gSjSnvxPMAlq4OnrEQF+EjqTVsQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  /**\n   * Opaque JS representation of some binary data in native.\n   *\n   * The API is modeled after the W3C Blob API, with one caveat\n   * regarding explicit deallocation. Refer to the `close()`\n   * method for further details.\n   *\n   * Example usage in a React component:\n   *\n   *   class WebSocketImage extends React.Component {\n   *      state = {blob: null};\n   *      componentDidMount() {\n   *        let ws = this.ws = new WebSocket(...);\n   *        ws.binaryType = 'blob';\n   *        ws.onmessage = (event) => {\n   *          if (this.state.blob) {\n   *            this.state.blob.close();\n   *          }\n   *          this.setState({blob: event.data});\n   *        };\n   *      }\n   *      componentUnmount() {\n   *        if (this.state.blob) {\n   *          this.state.blob.close();\n   *        }\n   *        this.ws.close();\n   *      }\n   *      render() {\n   *        if (!this.state.blob) {\n   *          return <View />;\n   *        }\n   *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n   *      }\n   *   }\n   *\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n   */\n  var Blob = /*#__PURE__*/function () {\n    /**\n     * Constructor for JS consumers.\n     * Currently we only support creating Blobs from other Blobs.\n     * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n     */\n    function Blob() {\n      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      _classCallCheck(this, Blob);\n      var BlobManager = _$$_REQUIRE(_dependencyMap[2], \"./BlobManager\");\n      this.data = BlobManager.createFromParts(parts, options).data;\n    }\n\n    /*\n     * This method is used to create a new Blob object containing\n     * the data in the specified range of bytes of the source Blob.\n     * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n     */\n    // $FlowFixMe[unsafe-getters-setters]\n    _createClass(Blob, [{\n      key: \"data\",\n      get:\n      // $FlowFixMe[unsafe-getters-setters]\n      function get() {\n        if (!this._data) {\n          throw new Error('Blob has been closed and is no longer available');\n        }\n        return this._data;\n      },\n      set: function set(data) {\n        this._data = data;\n      }\n    }, {\n      key: \"slice\",\n      value: function slice(start, end) {\n        var BlobManager = _$$_REQUIRE(_dependencyMap[2], \"./BlobManager\");\n        var _this$data = this.data,\n          offset = _this$data.offset,\n          size = _this$data.size;\n        if (typeof start === 'number') {\n          if (start > size) {\n            // $FlowFixMe[reassign-const]\n            start = size;\n          }\n          offset += start;\n          size -= start;\n          if (typeof end === 'number') {\n            if (end < 0) {\n              // $FlowFixMe[reassign-const]\n              end = this.size + end;\n            }\n            if (end > this.size) {\n              // $FlowFixMe[reassign-const]\n              end = this.size;\n            }\n            size = end - start;\n          }\n        }\n        return BlobManager.createFromOptions({\n          blobId: this.data.blobId,\n          offset: offset,\n          size: size,\n          /* Since `blob.slice()` creates a new view onto the same binary\n           * data as the original blob, we should re-use the same collector\n           * object so that the underlying resource gets deallocated when\n           * the last view into the data is released, not the first.\n           */\n          __collector: this.data.__collector\n        });\n      }\n\n      /**\n       * This method is in the standard, but not actually implemented by\n       * any browsers at this point. It's important for how Blobs work in\n       * React Native, however, since we cannot de-allocate resources automatically,\n       * so consumers need to explicitly de-allocate them.\n       *\n       * Note that the semantics around Blobs created via `blob.slice()`\n       * and `new Blob([blob])` are different. `blob.slice()` creates a\n       * new *view* onto the same binary data, so calling `close()` on any\n       * of those views is enough to deallocate the data, whereas\n       * `new Blob([blob, ...])` actually copies the data in memory.\n       */\n    }, {\n      key: \"close\",\n      value: function close() {\n        var BlobManager = _$$_REQUIRE(_dependencyMap[2], \"./BlobManager\");\n        BlobManager.release(this.data.blobId);\n        this.data = null;\n      }\n\n      /**\n       * Size of the data contained in the Blob object, in bytes.\n       */\n      // $FlowFixMe[unsafe-getters-setters]\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this.data.size;\n      }\n\n      /*\n       * String indicating the MIME type of the data contained in the Blob.\n       * If the type is unknown, this string is empty.\n       */\n      // $FlowFixMe[unsafe-getters-setters]\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this.data.type || '';\n      }\n    }]);\n    return Blob;\n  }();\n  module.exports = Blob;\n});","lineCount":169,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_classCallCheck"],[14,21,11,13],[14,24,11,13,"_$$_REQUIRE"],[14,35,11,13],[14,36,11,13,"_dependencyMap"],[14,50,11,13],[15,2,11,13],[15,6,11,13,"_createClass"],[15,18,11,13],[15,21,11,13,"_$$_REQUIRE"],[15,32,11,13],[15,33,11,13,"_dependencyMap"],[15,47,11,13],[16,2,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,2,15,0],[53,6,52,6,"Blob"],[53,10,52,10],[54,4,55,2],[55,0,56,0],[56,0,57,0],[57,0,58,0],[58,0,59,0],[59,4,60,2],[59,13,60,2,"Blob"],[59,18,60,2],[59,20,60,71],[60,6,60,71],[60,10,60,14,"parts"],[60,15,60,41],[60,18,60,41,"arguments"],[60,27,60,41],[60,28,60,41,"length"],[60,34,60,41],[60,42,60,41,"arguments"],[60,51,60,41],[60,59,60,41,"undefined"],[60,68,60,41],[60,71,60,41,"arguments"],[60,80,60,41],[60,86,60,44],[60,88,60,46],[61,6,60,46],[61,10,60,48,"options"],[61,17,60,69],[61,20,60,69,"arguments"],[61,29,60,69],[61,30,60,69,"length"],[61,36,60,69],[61,43,60,69,"arguments"],[61,52,60,69],[61,58,60,69,"undefined"],[61,67,60,69],[62,6,60,69,"_classCallCheck"],[62,21,60,69],[62,28,60,69,"Blob"],[62,32,60,69],[63,6,61,4],[63,10,61,10,"BlobManager"],[63,21,61,21],[63,24,61,24,"require"],[63,35,61,31],[63,36,61,31,"_dependencyMap"],[63,50,61,31],[63,70,61,47],[63,71,61,48],[64,6,62,4],[64,10,62,8],[64,11,62,9,"data"],[64,15,62,13],[64,18,62,16,"BlobManager"],[64,29,62,27],[64,30,62,28,"createFromParts"],[64,45,62,43],[64,46,62,44,"parts"],[64,51,62,49],[64,53,62,51,"options"],[64,60,62,58],[64,61,62,59],[64,62,62,60,"data"],[64,66,62,64],[65,4,63,2],[67,4,65,2],[68,0,66,0],[69,0,67,0],[70,0,68,0],[71,0,69,0],[72,4,70,2],[73,4,70,2,"_createClass"],[73,16,70,2],[73,17,70,2,"Blob"],[73,21,70,2],[74,6,70,2,"key"],[74,9,70,2],[75,6,70,2,"get"],[75,9,70,2],[76,6,75,2],[77,6,76,2],[77,15,76,2,"get"],[77,19,76,2],[77,21,76,23],[78,8,77,4],[78,12,77,8],[78,13,77,9],[78,17,77,13],[78,18,77,14,"_data"],[78,23,77,19],[78,25,77,21],[79,10,78,6],[79,16,78,12],[79,20,78,16,"Error"],[79,25,78,21],[79,26,78,22],[79,75,78,71],[79,76,78,72],[80,8,79,4],[81,8,81,4],[81,15,81,11],[81,19,81,15],[81,20,81,16,"_data"],[81,25,81,21],[82,6,82,2],[82,7,82,3],[83,6,82,3,"set"],[83,9,82,3],[83,11,71,2],[83,20,71,2,"set"],[83,24,71,11,"data"],[83,28,71,26],[83,30,71,28],[84,8,72,4],[84,12,72,8],[84,13,72,9,"_data"],[84,18,72,14],[84,21,72,17,"data"],[84,25,72,21],[85,6,73,2],[86,4,73,3],[87,6,73,3,"key"],[87,9,73,3],[88,6,73,3,"value"],[88,11,73,3],[88,13,84,2],[88,22,84,2,"slice"],[88,28,84,8,"start"],[88,33,84,22],[88,35,84,24,"end"],[88,38,84,36],[88,40,84,44],[89,8,85,4],[89,12,85,10,"BlobManager"],[89,23,85,21],[89,26,85,24,"require"],[89,37,85,31],[89,38,85,31,"_dependencyMap"],[89,52,85,31],[89,72,85,47],[89,73,85,48],[90,8,86,4],[90,12,86,4,"_this$data"],[90,22,86,4],[90,25,86,25],[90,29,86,29],[90,30,86,30,"data"],[90,34,86,34],[91,10,86,9,"offset"],[91,16,86,15],[91,19,86,15,"_this$data"],[91,29,86,15],[91,30,86,9,"offset"],[91,36,86,15],[92,10,86,17,"size"],[92,14,86,21],[92,17,86,21,"_this$data"],[92,27,86,21],[92,28,86,17,"size"],[92,32,86,21],[93,8,88,4],[93,12,88,8],[93,19,88,15,"start"],[93,24,88,20],[93,29,88,25],[93,37,88,33],[93,39,88,35],[94,10,89,6],[94,14,89,10,"start"],[94,19,89,15],[94,22,89,18,"size"],[94,26,89,22],[94,28,89,24],[95,12,90,8],[96,12,91,8,"start"],[96,17,91,13],[96,20,91,16,"size"],[96,24,91,20],[97,10,92,6],[98,10,93,6,"offset"],[98,16,93,12],[98,20,93,16,"start"],[98,25,93,21],[99,10,94,6,"size"],[99,14,94,10],[99,18,94,14,"start"],[99,23,94,19],[100,10,96,6],[100,14,96,10],[100,21,96,17,"end"],[100,24,96,20],[100,29,96,25],[100,37,96,33],[100,39,96,35],[101,12,97,8],[101,16,97,12,"end"],[101,19,97,15],[101,22,97,18],[101,23,97,19],[101,25,97,21],[102,14,98,10],[103,14,99,10,"end"],[103,17,99,13],[103,20,99,16],[103,24,99,20],[103,25,99,21,"size"],[103,29,99,25],[103,32,99,28,"end"],[103,35,99,31],[104,12,100,8],[105,12,101,8],[105,16,101,12,"end"],[105,19,101,15],[105,22,101,18],[105,26,101,22],[105,27,101,23,"size"],[105,31,101,27],[105,33,101,29],[106,14,102,10],[107,14,103,10,"end"],[107,17,103,13],[107,20,103,16],[107,24,103,20],[107,25,103,21,"size"],[107,29,103,25],[108,12,104,8],[109,12,105,8,"size"],[109,16,105,12],[109,19,105,15,"end"],[109,22,105,18],[109,25,105,21,"start"],[109,30,105,26],[110,10,106,6],[111,8,107,4],[112,8,108,4],[112,15,108,11,"BlobManager"],[112,26,108,22],[112,27,108,23,"createFromOptions"],[112,44,108,40],[112,45,108,41],[113,10,109,6,"blobId"],[113,16,109,12],[113,18,109,14],[113,22,109,18],[113,23,109,19,"data"],[113,27,109,23],[113,28,109,24,"blobId"],[113,34,109,30],[114,10,110,6,"offset"],[114,16,110,12],[114,18,110,6,"offset"],[114,24,110,12],[115,10,111,6,"size"],[115,14,111,10],[115,16,111,6,"size"],[115,20,111,10],[116,10,112,6],[117,0,113,0],[118,0,114,0],[119,0,115,0],[120,0,116,0],[121,10,117,6,"__collector"],[121,21,117,17],[121,23,117,19],[121,27,117,23],[121,28,117,24,"data"],[121,32,117,28],[121,33,117,29,"__collector"],[122,8,118,4],[122,9,118,5],[122,10,118,6],[123,6,119,2],[125,6,121,2],[126,0,122,0],[127,0,123,0],[128,0,124,0],[129,0,125,0],[130,0,126,0],[131,0,127,0],[132,0,128,0],[133,0,129,0],[134,0,130,0],[135,0,131,0],[136,0,132,0],[137,4,121,2],[138,6,121,2,"key"],[138,9,121,2],[139,6,121,2,"value"],[139,11,121,2],[139,13,133,2],[139,22,133,2,"close"],[139,28,133,2],[139,30,133,10],[140,8,134,4],[140,12,134,10,"BlobManager"],[140,23,134,21],[140,26,134,24,"require"],[140,37,134,31],[140,38,134,31,"_dependencyMap"],[140,52,134,31],[140,72,134,47],[140,73,134,48],[141,8,135,4,"BlobManager"],[141,19,135,15],[141,20,135,16,"release"],[141,27,135,23],[141,28,135,24],[141,32,135,28],[141,33,135,29,"data"],[141,37,135,33],[141,38,135,34,"blobId"],[141,44,135,40],[141,45,135,41],[142,8,136,4],[142,12,136,8],[142,13,136,9,"data"],[142,17,136,13],[142,20,136,16],[142,24,136,20],[143,6,137,2],[145,6,139,2],[146,0,140,0],[147,0,141,0],[148,6,142,2],[149,4,142,2],[150,6,142,2,"key"],[150,9,142,2],[151,6,142,2,"get"],[151,9,142,2],[151,11,143,2],[151,20,143,2,"get"],[151,24,143,2],[151,26,143,21],[152,8,144,4],[152,15,144,11],[152,19,144,15],[152,20,144,16,"data"],[152,24,144,20],[152,25,144,21,"size"],[152,29,144,25],[153,6,145,2],[155,6,147,2],[156,0,148,0],[157,0,149,0],[158,0,150,0],[159,6,151,2],[160,4,151,2],[161,6,151,2,"key"],[161,9,151,2],[162,6,151,2,"get"],[162,9,151,2],[162,11,152,2],[162,20,152,2,"get"],[162,24,152,2],[162,26,152,21],[163,8,153,4],[163,15,153,11],[163,19,153,15],[163,20,153,16,"data"],[163,24,153,20],[163,25,153,21,"type"],[163,29,153,25],[163,33,153,29],[163,35,153,31],[164,6,154,2],[165,4,154,3],[166,4,154,3],[166,11,154,3,"Blob"],[166,15,154,3],[167,2,154,3],[168,2,157,0,"module"],[168,8,157,6],[168,9,157,7,"exports"],[168,16,157,14],[168,19,157,17,"Blob"],[168,23,157,21],[169,0,157,22]],"functionMap":{"names":["<global>","Blob","constructor","set__data","get__data","slice","close","get__size","get__type"],"mappings":"AAA;ACmD;ECQ;GDG;EEQ;GFE;EGG;GHM;EIE;GJmC;EKc;GLI;EMM;GNE;EOO;GPE;CDC"}},"type":"js/module"}]}