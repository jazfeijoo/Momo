{"dependencies":[{"name":"../definition-syntax/parse","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":49,"index":49}}],"key":"rm7nczOeEQkh2CE5oZ78mVMFK6s="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var parse = _$$_REQUIRE(_dependencyMap[0], \"../definition-syntax/parse\");\n  var MATCH = {\n    type: 'Match'\n  };\n  var MISMATCH = {\n    type: 'Mismatch'\n  };\n  var DISALLOW_EMPTY = {\n    type: 'DisallowEmpty'\n  };\n  var LEFTPARENTHESIS = 40; // (\n  var RIGHTPARENTHESIS = 41; // )\n\n  function createCondition(match, thenBranch, elseBranch) {\n    // reduce node count\n    if (thenBranch === MATCH && elseBranch === MISMATCH) {\n      return match;\n    }\n    if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {\n      return match;\n    }\n    if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {\n      thenBranch = match.then;\n      match = match.match;\n    }\n    return {\n      type: 'If',\n      match: match,\n      then: thenBranch,\n      else: elseBranch\n    };\n  }\n  function isFunctionType(name) {\n    return name.length > 2 && name.charCodeAt(name.length - 2) === LEFTPARENTHESIS && name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS;\n  }\n  function isEnumCapatible(term) {\n    return term.type === 'Keyword' || term.type === 'AtKeyword' || term.type === 'Function' || term.type === 'Type' && isFunctionType(term.name);\n  }\n  function buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {\n    switch (combinator) {\n      case ' ':\n        // Juxtaposing components means that all of them must occur, in the given order.\n        //\n        // a b c\n        // =\n        // match a\n        //   then match b\n        //     then match c\n        //       then MATCH\n        //       else MISMATCH\n        //     else MISMATCH\n        //   else MISMATCH\n        var result = MATCH;\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          result = createCondition(term, result, MISMATCH);\n        }\n        ;\n        return result;\n      case '|':\n        // A bar (|) separates two or more alternatives: exactly one of them must occur.\n        //\n        // a | b | c\n        // =\n        // match a\n        //   then MATCH\n        //   else match b\n        //     then MATCH\n        //     else match c\n        //       then MATCH\n        //       else MISMATCH\n\n        var result = MISMATCH;\n        var map = null;\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n\n          // reduce sequence of keywords into a Enum\n          if (isEnumCapatible(term)) {\n            if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {\n              map = Object.create(null);\n              result = createCondition({\n                type: 'Enum',\n                map: map\n              }, MATCH, result);\n            }\n            if (map !== null) {\n              var key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();\n              if (key in map === false) {\n                map[key] = term;\n                continue;\n              }\n            }\n          }\n          map = null;\n\n          // create a new conditonal node\n          result = createCondition(term, MATCH, result);\n        }\n        ;\n        return result;\n      case '&&':\n        // A double ampersand (&&) separates two or more components,\n        // all of which must occur, in any order.\n\n        // Use MatchOnce for groups with a large number of terms,\n        // since &&-groups produces at least N!-node trees\n        if (terms.length > 5) {\n          return {\n            type: 'MatchOnce',\n            terms: terms,\n            all: true\n          };\n        }\n\n        // Use a combination tree for groups with small number of terms\n        //\n        // a && b && c\n        // =\n        // match a\n        //   then [b && c]\n        //   else match b\n        //     then [a && c]\n        //     else match c\n        //       then [a && b]\n        //       else MISMATCH\n        //\n        // a && b\n        // =\n        // match a\n        //   then match b\n        //     then MATCH\n        //     else MISMATCH\n        //   else match b\n        //     then match a\n        //       then MATCH\n        //       else MISMATCH\n        //     else MISMATCH\n        var result = MISMATCH;\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          var thenClause;\n          if (terms.length > 1) {\n            thenClause = buildGroupMatchGraph(combinator, terms.filter(function (newGroupTerm) {\n              return newGroupTerm !== term;\n            }), false);\n          } else {\n            thenClause = MATCH;\n          }\n          result = createCondition(term, thenClause, result);\n        }\n        ;\n        return result;\n      case '||':\n        // A double bar (||) separates two or more options:\n        // one or more of them must occur, in any order.\n\n        // Use MatchOnce for groups with a large number of terms,\n        // since ||-groups produces at least N!-node trees\n        if (terms.length > 5) {\n          return {\n            type: 'MatchOnce',\n            terms: terms,\n            all: false\n          };\n        }\n\n        // Use a combination tree for groups with small number of terms\n        //\n        // a || b || c\n        // =\n        // match a\n        //   then [b || c]\n        //   else match b\n        //     then [a || c]\n        //     else match c\n        //       then [a || b]\n        //       else MISMATCH\n        //\n        // a || b\n        // =\n        // match a\n        //   then match b\n        //     then MATCH\n        //     else MATCH\n        //   else match b\n        //     then match a\n        //       then MATCH\n        //       else MATCH\n        //     else MISMATCH\n        var result = atLeastOneTermMatched ? MATCH : MISMATCH;\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          var thenClause;\n          if (terms.length > 1) {\n            thenClause = buildGroupMatchGraph(combinator, terms.filter(function (newGroupTerm) {\n              return newGroupTerm !== term;\n            }), true);\n          } else {\n            thenClause = MATCH;\n          }\n          result = createCondition(term, thenClause, result);\n        }\n        ;\n        return result;\n    }\n  }\n  function buildMultiplierMatchGraph(node) {\n    var result = MATCH;\n    var matchTerm = _buildMatchGraph(node.term);\n    if (node.max === 0) {\n      // disable repeating of empty match to prevent infinite loop\n      matchTerm = createCondition(matchTerm, DISALLOW_EMPTY, MISMATCH);\n\n      // an occurrence count is not limited, make a cycle;\n      // to collect more terms on each following matching mismatch\n      result = createCondition(matchTerm, null,\n      // will be a loop\n      MISMATCH);\n      result.then = createCondition(MATCH, MATCH, result // make a loop\n      );\n\n      if (node.comma) {\n        result.then.else = createCondition({\n          type: 'Comma',\n          syntax: node\n        }, result, MISMATCH);\n      }\n    } else {\n      // create a match node chain for [min .. max] interval with optional matches\n      for (var i = node.min || 1; i <= node.max; i++) {\n        if (node.comma && result !== MATCH) {\n          result = createCondition({\n            type: 'Comma',\n            syntax: node\n          }, result, MISMATCH);\n        }\n        result = createCondition(matchTerm, createCondition(MATCH, MATCH, result), MISMATCH);\n      }\n    }\n    if (node.min === 0) {\n      // allow zero match\n      result = createCondition(MATCH, MATCH, result);\n    } else {\n      // create a match node chain to collect [0 ... min - 1] required matches\n      for (var i = 0; i < node.min - 1; i++) {\n        if (node.comma && result !== MATCH) {\n          result = createCondition({\n            type: 'Comma',\n            syntax: node\n          }, result, MISMATCH);\n        }\n        result = createCondition(matchTerm, result, MISMATCH);\n      }\n    }\n    return result;\n  }\n  function _buildMatchGraph(node) {\n    if (typeof node === 'function') {\n      return {\n        type: 'Generic',\n        fn: node\n      };\n    }\n    switch (node.type) {\n      case 'Group':\n        var result = buildGroupMatchGraph(node.combinator, node.terms.map(_buildMatchGraph), false);\n        if (node.disallowEmpty) {\n          result = createCondition(result, DISALLOW_EMPTY, MISMATCH);\n        }\n        return result;\n      case 'Multiplier':\n        return buildMultiplierMatchGraph(node);\n      case 'Type':\n      case 'Property':\n        return {\n          type: node.type,\n          name: node.name,\n          syntax: node\n        };\n      case 'Keyword':\n        return {\n          type: node.type,\n          name: node.name.toLowerCase(),\n          syntax: node\n        };\n      case 'AtKeyword':\n        return {\n          type: node.type,\n          name: '@' + node.name.toLowerCase(),\n          syntax: node\n        };\n      case 'Function':\n        return {\n          type: node.type,\n          name: node.name.toLowerCase() + '(',\n          syntax: node\n        };\n      case 'String':\n        // convert a one char length String to a Token\n        if (node.value.length === 3) {\n          return {\n            type: 'Token',\n            value: node.value.charAt(1),\n            syntax: node\n          };\n        }\n\n        // otherwise use it as is\n        return {\n          type: node.type,\n          value: node.value.substr(1, node.value.length - 2).replace(/\\\\'/g, '\\''),\n          syntax: node\n        };\n      case 'Token':\n        return {\n          type: node.type,\n          value: node.value,\n          syntax: node\n        };\n      case 'Comma':\n        return {\n          type: node.type,\n          syntax: node\n        };\n      default:\n        throw new Error('Unknown node type:', node.type);\n    }\n  }\n  module.exports = {\n    MATCH: MATCH,\n    MISMATCH: MISMATCH,\n    DISALLOW_EMPTY: DISALLOW_EMPTY,\n    buildMatchGraph: function buildMatchGraph(syntaxTree, ref) {\n      if (typeof syntaxTree === 'string') {\n        syntaxTree = parse(syntaxTree);\n      }\n      return {\n        type: 'MatchGraph',\n        match: _buildMatchGraph(syntaxTree),\n        syntax: ref || null,\n        source: syntaxTree\n      };\n    }\n  };\n});","lineCount":347,"map":[[2,2,1,0],[2,6,1,4,"parse"],[2,11,1,9],[2,14,1,12,"require"],[2,25,1,19],[2,26,1,19,"_dependencyMap"],[2,40,1,19],[2,73,1,48],[2,74,1,49],[3,2,3,0],[3,6,3,4,"MATCH"],[3,11,3,9],[3,14,3,12],[4,4,3,14,"type"],[4,8,3,18],[4,10,3,20],[5,2,3,28],[5,3,3,29],[6,2,4,0],[6,6,4,4,"MISMATCH"],[6,14,4,12],[6,17,4,15],[7,4,4,17,"type"],[7,8,4,21],[7,10,4,23],[8,2,4,34],[8,3,4,35],[9,2,5,0],[9,6,5,4,"DISALLOW_EMPTY"],[9,20,5,18],[9,23,5,21],[10,4,5,23,"type"],[10,8,5,27],[10,10,5,29],[11,2,5,45],[11,3,5,46],[12,2,6,0],[12,6,6,4,"LEFTPARENTHESIS"],[12,21,6,19],[12,24,6,22],[12,26,6,24],[12,27,6,25],[12,28,6,27],[13,2,7,0],[13,6,7,4,"RIGHTPARENTHESIS"],[13,22,7,20],[13,25,7,23],[13,27,7,25],[13,28,7,26],[13,29,7,27],[15,2,9,0],[15,11,9,9,"createCondition"],[15,26,9,24,"createCondition"],[15,27,9,25,"match"],[15,32,9,30],[15,34,9,32,"thenBranch"],[15,44,9,42],[15,46,9,44,"elseBranch"],[15,56,9,54],[15,58,9,56],[16,4,10,4],[17,4,11,4],[17,8,11,8,"thenBranch"],[17,18,11,18],[17,23,11,23,"MATCH"],[17,28,11,28],[17,32,11,32,"elseBranch"],[17,42,11,42],[17,47,11,47,"MISMATCH"],[17,55,11,55],[17,57,11,57],[18,6,12,8],[18,13,12,15,"match"],[18,18,12,20],[19,4,13,4],[20,4,15,4],[20,8,15,8,"match"],[20,13,15,13],[20,18,15,18,"MATCH"],[20,23,15,23],[20,27,15,27,"thenBranch"],[20,37,15,37],[20,42,15,42,"MATCH"],[20,47,15,47],[20,51,15,51,"elseBranch"],[20,61,15,61],[20,66,15,66,"MATCH"],[20,71,15,71],[20,73,15,73],[21,6,16,8],[21,13,16,15,"match"],[21,18,16,20],[22,4,17,4],[23,4,19,4],[23,8,19,8,"match"],[23,13,19,13],[23,14,19,14,"type"],[23,18,19,18],[23,23,19,23],[23,27,19,27],[23,31,19,31,"match"],[23,36,19,36],[23,37,19,37,"else"],[23,41,19,41],[23,46,19,46,"MISMATCH"],[23,54,19,54],[23,58,19,58,"thenBranch"],[23,68,19,68],[23,73,19,73,"MATCH"],[23,78,19,78],[23,80,19,80],[24,6,20,8,"thenBranch"],[24,16,20,18],[24,19,20,21,"match"],[24,24,20,26],[24,25,20,27,"then"],[24,29,20,31],[25,6,21,8,"match"],[25,11,21,13],[25,14,21,16,"match"],[25,19,21,21],[25,20,21,22,"match"],[25,25,21,27],[26,4,22,4],[27,4,24,4],[27,11,24,11],[28,6,25,8,"type"],[28,10,25,12],[28,12,25,14],[28,16,25,18],[29,6,26,8,"match"],[29,11,26,13],[29,13,26,15,"match"],[29,18,26,20],[30,6,27,8,"then"],[30,10,27,12],[30,12,27,14,"thenBranch"],[30,22,27,24],[31,6,28,8,"else"],[31,10,28,12],[31,12,28,14,"elseBranch"],[32,4,29,4],[32,5,29,5],[33,2,30,0],[34,2,32,0],[34,11,32,9,"isFunctionType"],[34,25,32,23,"isFunctionType"],[34,26,32,24,"name"],[34,30,32,28],[34,32,32,30],[35,4,33,4],[35,11,34,8,"name"],[35,15,34,12],[35,16,34,13,"length"],[35,22,34,19],[35,25,34,22],[35,26,34,23],[35,30,35,8,"name"],[35,34,35,12],[35,35,35,13,"charCodeAt"],[35,45,35,23],[35,46,35,24,"name"],[35,50,35,28],[35,51,35,29,"length"],[35,57,35,35],[35,60,35,38],[35,61,35,39],[35,62,35,40],[35,67,35,45,"LEFTPARENTHESIS"],[35,82,35,60],[35,86,36,8,"name"],[35,90,36,12],[35,91,36,13,"charCodeAt"],[35,101,36,23],[35,102,36,24,"name"],[35,106,36,28],[35,107,36,29,"length"],[35,113,36,35],[35,116,36,38],[35,117,36,39],[35,118,36,40],[35,123,36,45,"RIGHTPARENTHESIS"],[35,139,36,61],[36,2,38,0],[37,2,40,0],[37,11,40,9,"isEnumCapatible"],[37,26,40,24,"isEnumCapatible"],[37,27,40,25,"term"],[37,31,40,29],[37,33,40,31],[38,4,41,4],[38,11,42,8,"term"],[38,15,42,12],[38,16,42,13,"type"],[38,20,42,17],[38,25,42,22],[38,34,42,31],[38,38,43,8,"term"],[38,42,43,12],[38,43,43,13,"type"],[38,47,43,17],[38,52,43,22],[38,63,43,33],[38,67,44,8,"term"],[38,71,44,12],[38,72,44,13,"type"],[38,76,44,17],[38,81,44,22],[38,91,44,32],[38,95,45,8,"term"],[38,99,45,12],[38,100,45,13,"type"],[38,104,45,17],[38,109,45,22],[38,115,45,28],[38,119,45,32,"isFunctionType"],[38,133,45,46],[38,134,45,47,"term"],[38,138,45,51],[38,139,45,52,"name"],[38,143,45,56],[38,144,45,57],[39,2,47,0],[40,2,49,0],[40,11,49,9,"buildGroupMatchGraph"],[40,31,49,29,"buildGroupMatchGraph"],[40,32,49,30,"combinator"],[40,42,49,40],[40,44,49,42,"terms"],[40,49,49,47],[40,51,49,49,"atLeastOneTermMatched"],[40,72,49,70],[40,74,49,72],[41,4,50,4],[41,12,50,12,"combinator"],[41,22,50,22],[42,6,51,8],[42,11,51,13],[42,14,51,16],[43,8,52,12],[44,8,53,12],[45,8,54,12],[46,8,55,12],[47,8,56,12],[48,8,57,12],[49,8,58,12],[50,8,59,12],[51,8,60,12],[52,8,61,12],[53,8,62,12],[54,8,63,12],[54,12,63,16,"result"],[54,18,63,22],[54,21,63,25,"MATCH"],[54,26,63,30],[55,8,65,12],[55,13,65,17],[55,17,65,21,"i"],[55,18,65,22],[55,21,65,25,"terms"],[55,26,65,30],[55,27,65,31,"length"],[55,33,65,37],[55,36,65,40],[55,37,65,41],[55,39,65,43,"i"],[55,40,65,44],[55,44,65,48],[55,45,65,49],[55,47,65,51,"i"],[55,48,65,52],[55,50,65,54],[55,52,65,56],[56,10,66,16],[56,14,66,20,"term"],[56,18,66,24],[56,21,66,27,"terms"],[56,26,66,32],[56,27,66,33,"i"],[56,28,66,34],[56,29,66,35],[57,10,68,16,"result"],[57,16,68,22],[57,19,68,25,"createCondition"],[57,34,68,40],[57,35,69,20,"term"],[57,39,69,24],[57,41,70,20,"result"],[57,47,70,26],[57,49,71,20,"MISMATCH"],[57,57,72,16],[57,58,72,17],[58,8,73,12],[59,8,73,13],[60,8,75,12],[60,15,75,19,"result"],[60,21,75,25],[61,6,77,8],[61,11,77,13],[61,14,77,16],[62,8,78,12],[63,8,79,12],[64,8,80,12],[65,8,81,12],[66,8,82,12],[67,8,83,12],[68,8,84,12],[69,8,85,12],[70,8,86,12],[71,8,87,12],[72,8,88,12],[74,8,90,12],[74,12,90,16,"result"],[74,18,90,22],[74,21,90,25,"MISMATCH"],[74,29,90,33],[75,8,91,12],[75,12,91,16,"map"],[75,15,91,19],[75,18,91,22],[75,22,91,26],[76,8,93,12],[76,13,93,17],[76,17,93,21,"i"],[76,18,93,22],[76,21,93,25,"terms"],[76,26,93,30],[76,27,93,31,"length"],[76,33,93,37],[76,36,93,40],[76,37,93,41],[76,39,93,43,"i"],[76,40,93,44],[76,44,93,48],[76,45,93,49],[76,47,93,51,"i"],[76,48,93,52],[76,50,93,54],[76,52,93,56],[77,10,94,16],[77,14,94,20,"term"],[77,18,94,24],[77,21,94,27,"terms"],[77,26,94,32],[77,27,94,33,"i"],[77,28,94,34],[77,29,94,35],[79,10,96,16],[80,10,97,16],[80,14,97,20,"isEnumCapatible"],[80,29,97,35],[80,30,97,36,"term"],[80,34,97,40],[80,35,97,41],[80,37,97,43],[81,12,98,20],[81,16,98,24,"map"],[81,19,98,27],[81,24,98,32],[81,28,98,36],[81,32,98,40,"i"],[81,33,98,41],[81,36,98,44],[81,37,98,45],[81,41,98,49,"isEnumCapatible"],[81,56,98,64],[81,57,98,65,"terms"],[81,62,98,70],[81,63,98,71,"i"],[81,64,98,72],[81,67,98,75],[81,68,98,76],[81,69,98,77],[81,70,98,78],[81,72,98,80],[82,14,99,24,"map"],[82,17,99,27],[82,20,99,30,"Object"],[82,26,99,36],[82,27,99,37,"create"],[82,33,99,43],[82,34,99,44],[82,38,99,48],[82,39,99,49],[83,14,100,24,"result"],[83,20,100,30],[83,23,100,33,"createCondition"],[83,38,100,48],[83,39,101,28],[84,16,102,32,"type"],[84,20,102,36],[84,22,102,38],[84,28,102,44],[85,16,103,32,"map"],[85,19,103,35],[85,21,103,37,"map"],[86,14,104,28],[86,15,104,29],[86,17,105,28,"MATCH"],[86,22,105,33],[86,24,106,28,"result"],[86,30,107,24],[86,31,107,25],[87,12,108,20],[88,12,110,20],[88,16,110,24,"map"],[88,19,110,27],[88,24,110,32],[88,28,110,36],[88,30,110,38],[89,14,111,24],[89,18,111,28,"key"],[89,21,111,31],[89,24,111,34],[89,25,111,35,"isFunctionType"],[89,39,111,49],[89,40,111,50,"term"],[89,44,111,54],[89,45,111,55,"name"],[89,49,111,59],[89,50,111,60],[89,53,111,63,"term"],[89,57,111,67],[89,58,111,68,"name"],[89,62,111,72],[89,63,111,73,"slice"],[89,68,111,78],[89,69,111,79],[89,70,111,80],[89,72,111,82],[89,73,111,83],[89,74,111,84],[89,75,111,85],[89,78,111,88,"term"],[89,82,111,92],[89,83,111,93,"name"],[89,87,111,97],[89,89,111,99,"toLowerCase"],[89,100,111,110],[89,101,111,111],[89,102,111,112],[90,14,112,24],[90,18,112,28,"key"],[90,21,112,31],[90,25,112,35,"map"],[90,28,112,38],[90,33,112,43],[90,38,112,48],[90,40,112,50],[91,16,113,28,"map"],[91,19,113,31],[91,20,113,32,"key"],[91,23,113,35],[91,24,113,36],[91,27,113,39,"term"],[91,31,113,43],[92,16,114,28],[93,14,115,24],[94,12,116,20],[95,10,117,16],[96,10,119,16,"map"],[96,13,119,19],[96,16,119,22],[96,20,119,26],[98,10,121,16],[99,10,122,16,"result"],[99,16,122,22],[99,19,122,25,"createCondition"],[99,34,122,40],[99,35,123,20,"term"],[99,39,123,24],[99,41,124,20,"MATCH"],[99,46,124,25],[99,48,125,20,"result"],[99,54,126,16],[99,55,126,17],[100,8,127,12],[101,8,127,13],[102,8,129,12],[102,15,129,19,"result"],[102,21,129,25],[103,6,131,8],[103,11,131,13],[103,15,131,17],[104,8,132,12],[105,8,133,12],[107,8,135,12],[108,8,136,12],[109,8,137,12],[109,12,137,16,"terms"],[109,17,137,21],[109,18,137,22,"length"],[109,24,137,28],[109,27,137,31],[109,28,137,32],[109,30,137,34],[110,10,138,16],[110,17,138,23],[111,12,139,20,"type"],[111,16,139,24],[111,18,139,26],[111,29,139,37],[112,12,140,20,"terms"],[112,17,140,25],[112,19,140,27,"terms"],[112,24,140,32],[113,12,141,20,"all"],[113,15,141,23],[113,17,141,25],[114,10,142,16],[114,11,142,17],[115,8,143,12],[117,8,145,12],[118,8,146,12],[119,8,147,12],[120,8,148,12],[121,8,149,12],[122,8,150,12],[123,8,151,12],[124,8,152,12],[125,8,153,12],[126,8,154,12],[127,8,155,12],[128,8,156,12],[129,8,157,12],[130,8,158,12],[131,8,159,12],[132,8,160,12],[133,8,161,12],[134,8,162,12],[135,8,163,12],[136,8,164,12],[137,8,165,12],[138,8,166,12],[139,8,167,12],[140,8,168,12],[140,12,168,16,"result"],[140,18,168,22],[140,21,168,25,"MISMATCH"],[140,29,168,33],[141,8,170,12],[141,13,170,17],[141,17,170,21,"i"],[141,18,170,22],[141,21,170,25,"terms"],[141,26,170,30],[141,27,170,31,"length"],[141,33,170,37],[141,36,170,40],[141,37,170,41],[141,39,170,43,"i"],[141,40,170,44],[141,44,170,48],[141,45,170,49],[141,47,170,51,"i"],[141,48,170,52],[141,50,170,54],[141,52,170,56],[142,10,171,16],[142,14,171,20,"term"],[142,18,171,24],[142,21,171,27,"terms"],[142,26,171,32],[142,27,171,33,"i"],[142,28,171,34],[142,29,171,35],[143,10,172,16],[143,14,172,20,"thenClause"],[143,24,172,30],[144,10,174,16],[144,14,174,20,"terms"],[144,19,174,25],[144,20,174,26,"length"],[144,26,174,32],[144,29,174,35],[144,30,174,36],[144,32,174,38],[145,12,175,20,"thenClause"],[145,22,175,30],[145,25,175,33,"buildGroupMatchGraph"],[145,45,175,53],[145,46,176,24,"combinator"],[145,56,176,34],[145,58,177,24,"terms"],[145,63,177,29],[145,64,177,30,"filter"],[145,70,177,36],[145,71,177,37],[145,81,177,46,"newGroupTerm"],[145,93,177,58],[145,95,177,60],[146,14,178,28],[146,21,178,35,"newGroupTerm"],[146,33,178,47],[146,38,178,52,"term"],[146,42,178,56],[147,12,179,24],[147,13,179,25],[147,14,179,26],[147,16,180,24],[147,21,181,20],[147,22,181,21],[148,10,182,16],[148,11,182,17],[148,17,182,23],[149,12,183,20,"thenClause"],[149,22,183,30],[149,25,183,33,"MATCH"],[149,30,183,38],[150,10,184,16],[151,10,186,16,"result"],[151,16,186,22],[151,19,186,25,"createCondition"],[151,34,186,40],[151,35,187,20,"term"],[151,39,187,24],[151,41,188,20,"thenClause"],[151,51,188,30],[151,53,189,20,"result"],[151,59,190,16],[151,60,190,17],[152,8,191,12],[153,8,191,13],[154,8,193,12],[154,15,193,19,"result"],[154,21,193,25],[155,6,195,8],[155,11,195,13],[155,15,195,17],[156,8,196,12],[157,8,197,12],[159,8,199,12],[160,8,200,12],[161,8,201,12],[161,12,201,16,"terms"],[161,17,201,21],[161,18,201,22,"length"],[161,24,201,28],[161,27,201,31],[161,28,201,32],[161,30,201,34],[162,10,202,16],[162,17,202,23],[163,12,203,20,"type"],[163,16,203,24],[163,18,203,26],[163,29,203,37],[164,12,204,20,"terms"],[164,17,204,25],[164,19,204,27,"terms"],[164,24,204,32],[165,12,205,20,"all"],[165,15,205,23],[165,17,205,25],[166,10,206,16],[166,11,206,17],[167,8,207,12],[169,8,209,12],[170,8,210,12],[171,8,211,12],[172,8,212,12],[173,8,213,12],[174,8,214,12],[175,8,215,12],[176,8,216,12],[177,8,217,12],[178,8,218,12],[179,8,219,12],[180,8,220,12],[181,8,221,12],[182,8,222,12],[183,8,223,12],[184,8,224,12],[185,8,225,12],[186,8,226,12],[187,8,227,12],[188,8,228,12],[189,8,229,12],[190,8,230,12],[191,8,231,12],[192,8,232,12],[192,12,232,16,"result"],[192,18,232,22],[192,21,232,25,"atLeastOneTermMatched"],[192,42,232,46],[192,45,232,49,"MATCH"],[192,50,232,54],[192,53,232,57,"MISMATCH"],[192,61,232,65],[193,8,234,12],[193,13,234,17],[193,17,234,21,"i"],[193,18,234,22],[193,21,234,25,"terms"],[193,26,234,30],[193,27,234,31,"length"],[193,33,234,37],[193,36,234,40],[193,37,234,41],[193,39,234,43,"i"],[193,40,234,44],[193,44,234,48],[193,45,234,49],[193,47,234,51,"i"],[193,48,234,52],[193,50,234,54],[193,52,234,56],[194,10,235,16],[194,14,235,20,"term"],[194,18,235,24],[194,21,235,27,"terms"],[194,26,235,32],[194,27,235,33,"i"],[194,28,235,34],[194,29,235,35],[195,10,236,16],[195,14,236,20,"thenClause"],[195,24,236,30],[196,10,238,16],[196,14,238,20,"terms"],[196,19,238,25],[196,20,238,26,"length"],[196,26,238,32],[196,29,238,35],[196,30,238,36],[196,32,238,38],[197,12,239,20,"thenClause"],[197,22,239,30],[197,25,239,33,"buildGroupMatchGraph"],[197,45,239,53],[197,46,240,24,"combinator"],[197,56,240,34],[197,58,241,24,"terms"],[197,63,241,29],[197,64,241,30,"filter"],[197,70,241,36],[197,71,241,37],[197,81,241,46,"newGroupTerm"],[197,93,241,58],[197,95,241,60],[198,14,242,28],[198,21,242,35,"newGroupTerm"],[198,33,242,47],[198,38,242,52,"term"],[198,42,242,56],[199,12,243,24],[199,13,243,25],[199,14,243,26],[199,16,244,24],[199,20,245,20],[199,21,245,21],[200,10,246,16],[200,11,246,17],[200,17,246,23],[201,12,247,20,"thenClause"],[201,22,247,30],[201,25,247,33,"MATCH"],[201,30,247,38],[202,10,248,16],[203,10,250,16,"result"],[203,16,250,22],[203,19,250,25,"createCondition"],[203,34,250,40],[203,35,251,20,"term"],[203,39,251,24],[203,41,252,20,"thenClause"],[203,51,252,30],[203,53,253,20,"result"],[203,59,254,16],[203,60,254,17],[204,8,255,12],[205,8,255,13],[206,8,257,12],[206,15,257,19,"result"],[206,21,257,25],[207,4,258,4],[208,2,259,0],[209,2,261,0],[209,11,261,9,"buildMultiplierMatchGraph"],[209,36,261,34,"buildMultiplierMatchGraph"],[209,37,261,35,"node"],[209,41,261,39],[209,43,261,41],[210,4,262,4],[210,8,262,8,"result"],[210,14,262,14],[210,17,262,17,"MATCH"],[210,22,262,22],[211,4,263,4],[211,8,263,8,"matchTerm"],[211,17,263,17],[211,20,263,20,"buildMatchGraph"],[211,36,263,35],[211,37,263,36,"node"],[211,41,263,40],[211,42,263,41,"term"],[211,46,263,45],[211,47,263,46],[212,4,265,4],[212,8,265,8,"node"],[212,12,265,12],[212,13,265,13,"max"],[212,16,265,16],[212,21,265,21],[212,22,265,22],[212,24,265,24],[213,6,266,8],[214,6,267,8,"matchTerm"],[214,15,267,17],[214,18,267,20,"createCondition"],[214,33,267,35],[214,34,268,12,"matchTerm"],[214,43,268,21],[214,45,269,12,"DISALLOW_EMPTY"],[214,59,269,26],[214,61,270,12,"MISMATCH"],[214,69,271,8],[214,70,271,9],[216,6,273,8],[217,6,274,8],[218,6,275,8,"result"],[218,12,275,14],[218,15,275,17,"createCondition"],[218,30,275,32],[218,31,276,12,"matchTerm"],[218,40,276,21],[218,42,277,12],[218,46,277,16],[219,6,277,18],[220,6,278,12,"MISMATCH"],[220,14,279,8],[220,15,279,9],[221,6,281,8,"result"],[221,12,281,14],[221,13,281,15,"then"],[221,17,281,19],[221,20,281,22,"createCondition"],[221,35,281,37],[221,36,282,12,"MATCH"],[221,41,282,17],[221,43,283,12,"MATCH"],[221,48,283,17],[221,50,284,12,"result"],[221,56,284,18],[221,57,284,19],[222,6,285,8],[222,7,285,9],[224,6,287,8],[224,10,287,12,"node"],[224,14,287,16],[224,15,287,17,"comma"],[224,20,287,22],[224,22,287,24],[225,8,288,12,"result"],[225,14,288,18],[225,15,288,19,"then"],[225,19,288,23],[225,20,288,24,"else"],[225,24,288,28],[225,27,288,31,"createCondition"],[225,42,288,46],[225,43,289,16],[226,10,289,18,"type"],[226,14,289,22],[226,16,289,24],[226,23,289,31],[227,10,289,33,"syntax"],[227,16,289,39],[227,18,289,41,"node"],[228,8,289,46],[228,9,289,47],[228,11,290,16,"result"],[228,17,290,22],[228,19,291,16,"MISMATCH"],[228,27,292,12],[228,28,292,13],[229,6,293,8],[230,4,294,4],[230,5,294,5],[230,11,294,11],[231,6,295,8],[232,6,296,8],[232,11,296,13],[232,15,296,17,"i"],[232,16,296,18],[232,19,296,21,"node"],[232,23,296,25],[232,24,296,26,"min"],[232,27,296,29],[232,31,296,33],[232,32,296,34],[232,34,296,36,"i"],[232,35,296,37],[232,39,296,41,"node"],[232,43,296,45],[232,44,296,46,"max"],[232,47,296,49],[232,49,296,51,"i"],[232,50,296,52],[232,52,296,54],[232,54,296,56],[233,8,297,12],[233,12,297,16,"node"],[233,16,297,20],[233,17,297,21,"comma"],[233,22,297,26],[233,26,297,30,"result"],[233,32,297,36],[233,37,297,41,"MATCH"],[233,42,297,46],[233,44,297,48],[234,10,298,16,"result"],[234,16,298,22],[234,19,298,25,"createCondition"],[234,34,298,40],[234,35,299,20],[235,12,299,22,"type"],[235,16,299,26],[235,18,299,28],[235,25,299,35],[236,12,299,37,"syntax"],[236,18,299,43],[236,20,299,45,"node"],[237,10,299,50],[237,11,299,51],[237,13,300,20,"result"],[237,19,300,26],[237,21,301,20,"MISMATCH"],[237,29,302,16],[237,30,302,17],[238,8,303,12],[239,8,305,12,"result"],[239,14,305,18],[239,17,305,21,"createCondition"],[239,32,305,36],[239,33,306,16,"matchTerm"],[239,42,306,25],[239,44,307,16,"createCondition"],[239,59,307,31],[239,60,308,20,"MATCH"],[239,65,308,25],[239,67,309,20,"MATCH"],[239,72,309,25],[239,74,310,20,"result"],[239,80,311,16],[239,81,311,17],[239,83,312,16,"MISMATCH"],[239,91,313,12],[239,92,313,13],[240,6,314,8],[241,4,315,4],[242,4,317,4],[242,8,317,8,"node"],[242,12,317,12],[242,13,317,13,"min"],[242,16,317,16],[242,21,317,21],[242,22,317,22],[242,24,317,24],[243,6,318,8],[244,6,319,8,"result"],[244,12,319,14],[244,15,319,17,"createCondition"],[244,30,319,32],[244,31,320,12,"MATCH"],[244,36,320,17],[244,38,321,12,"MATCH"],[244,43,321,17],[244,45,322,12,"result"],[244,51,323,8],[244,52,323,9],[245,4,324,4],[245,5,324,5],[245,11,324,11],[246,6,325,8],[247,6,326,8],[247,11,326,13],[247,15,326,17,"i"],[247,16,326,18],[247,19,326,21],[247,20,326,22],[247,22,326,24,"i"],[247,23,326,25],[247,26,326,28,"node"],[247,30,326,32],[247,31,326,33,"min"],[247,34,326,36],[247,37,326,39],[247,38,326,40],[247,40,326,42,"i"],[247,41,326,43],[247,43,326,45],[247,45,326,47],[248,8,327,12],[248,12,327,16,"node"],[248,16,327,20],[248,17,327,21,"comma"],[248,22,327,26],[248,26,327,30,"result"],[248,32,327,36],[248,37,327,41,"MATCH"],[248,42,327,46],[248,44,327,48],[249,10,328,16,"result"],[249,16,328,22],[249,19,328,25,"createCondition"],[249,34,328,40],[249,35,329,20],[250,12,329,22,"type"],[250,16,329,26],[250,18,329,28],[250,25,329,35],[251,12,329,37,"syntax"],[251,18,329,43],[251,20,329,45,"node"],[252,10,329,50],[252,11,329,51],[252,13,330,20,"result"],[252,19,330,26],[252,21,331,20,"MISMATCH"],[252,29,332,16],[252,30,332,17],[253,8,333,12],[254,8,335,12,"result"],[254,14,335,18],[254,17,335,21,"createCondition"],[254,32,335,36],[254,33,336,16,"matchTerm"],[254,42,336,25],[254,44,337,16,"result"],[254,50,337,22],[254,52,338,16,"MISMATCH"],[254,60,339,12],[254,61,339,13],[255,6,340,8],[256,4,341,4],[257,4,343,4],[257,11,343,11,"result"],[257,17,343,17],[258,2,344,0],[259,2,346,0],[259,11,346,9,"buildMatchGraph"],[259,27,346,24,"buildMatchGraph"],[259,28,346,25,"node"],[259,32,346,29],[259,34,346,31],[260,4,347,4],[260,8,347,8],[260,15,347,15,"node"],[260,19,347,19],[260,24,347,24],[260,34,347,34],[260,36,347,36],[261,6,348,8],[261,13,348,15],[262,8,349,12,"type"],[262,12,349,16],[262,14,349,18],[262,23,349,27],[263,8,350,12,"fn"],[263,10,350,14],[263,12,350,16,"node"],[264,6,351,8],[264,7,351,9],[265,4,352,4],[266,4,354,4],[266,12,354,12,"node"],[266,16,354,16],[266,17,354,17,"type"],[266,21,354,21],[267,6,355,8],[267,11,355,13],[267,18,355,20],[268,8,356,12],[268,12,356,16,"result"],[268,18,356,22],[268,21,356,25,"buildGroupMatchGraph"],[268,41,356,45],[268,42,357,16,"node"],[268,46,357,20],[268,47,357,21,"combinator"],[268,57,357,31],[268,59,358,16,"node"],[268,63,358,20],[268,64,358,21,"terms"],[268,69,358,26],[268,70,358,27,"map"],[268,73,358,30],[268,74,358,31,"buildMatchGraph"],[268,90,358,46],[268,91,358,47],[268,93,359,16],[268,98,360,12],[268,99,360,13],[269,8,362,12],[269,12,362,16,"node"],[269,16,362,20],[269,17,362,21,"disallowEmpty"],[269,30,362,34],[269,32,362,36],[270,10,363,16,"result"],[270,16,363,22],[270,19,363,25,"createCondition"],[270,34,363,40],[270,35,364,20,"result"],[270,41,364,26],[270,43,365,20,"DISALLOW_EMPTY"],[270,57,365,34],[270,59,366,20,"MISMATCH"],[270,67,367,16],[270,68,367,17],[271,8,368,12],[272,8,370,12],[272,15,370,19,"result"],[272,21,370,25],[273,6,372,8],[273,11,372,13],[273,23,372,25],[274,8,373,12],[274,15,373,19,"buildMultiplierMatchGraph"],[274,40,373,44],[274,41,373,45,"node"],[274,45,373,49],[274,46,373,50],[275,6,375,8],[275,11,375,13],[275,17,375,19],[276,6,376,8],[276,11,376,13],[276,21,376,23],[277,8,377,12],[277,15,377,19],[278,10,378,16,"type"],[278,14,378,20],[278,16,378,22,"node"],[278,20,378,26],[278,21,378,27,"type"],[278,25,378,31],[279,10,379,16,"name"],[279,14,379,20],[279,16,379,22,"node"],[279,20,379,26],[279,21,379,27,"name"],[279,25,379,31],[280,10,380,16,"syntax"],[280,16,380,22],[280,18,380,24,"node"],[281,8,381,12],[281,9,381,13],[282,6,383,8],[282,11,383,13],[282,20,383,22],[283,8,384,12],[283,15,384,19],[284,10,385,16,"type"],[284,14,385,20],[284,16,385,22,"node"],[284,20,385,26],[284,21,385,27,"type"],[284,25,385,31],[285,10,386,16,"name"],[285,14,386,20],[285,16,386,22,"node"],[285,20,386,26],[285,21,386,27,"name"],[285,25,386,31],[285,26,386,32,"toLowerCase"],[285,37,386,43],[285,38,386,44],[285,39,386,45],[286,10,387,16,"syntax"],[286,16,387,22],[286,18,387,24,"node"],[287,8,388,12],[287,9,388,13],[288,6,390,8],[288,11,390,13],[288,22,390,24],[289,8,391,12],[289,15,391,19],[290,10,392,16,"type"],[290,14,392,20],[290,16,392,22,"node"],[290,20,392,26],[290,21,392,27,"type"],[290,25,392,31],[291,10,393,16,"name"],[291,14,393,20],[291,16,393,22],[291,19,393,25],[291,22,393,28,"node"],[291,26,393,32],[291,27,393,33,"name"],[291,31,393,37],[291,32,393,38,"toLowerCase"],[291,43,393,49],[291,44,393,50],[291,45,393,51],[292,10,394,16,"syntax"],[292,16,394,22],[292,18,394,24,"node"],[293,8,395,12],[293,9,395,13],[294,6,397,8],[294,11,397,13],[294,21,397,23],[295,8,398,12],[295,15,398,19],[296,10,399,16,"type"],[296,14,399,20],[296,16,399,22,"node"],[296,20,399,26],[296,21,399,27,"type"],[296,25,399,31],[297,10,400,16,"name"],[297,14,400,20],[297,16,400,22,"node"],[297,20,400,26],[297,21,400,27,"name"],[297,25,400,31],[297,26,400,32,"toLowerCase"],[297,37,400,43],[297,38,400,44],[297,39,400,45],[297,42,400,48],[297,45,400,51],[298,10,401,16,"syntax"],[298,16,401,22],[298,18,401,24,"node"],[299,8,402,12],[299,9,402,13],[300,6,404,8],[300,11,404,13],[300,19,404,21],[301,8,405,12],[302,8,406,12],[302,12,406,16,"node"],[302,16,406,20],[302,17,406,21,"value"],[302,22,406,26],[302,23,406,27,"length"],[302,29,406,33],[302,34,406,38],[302,35,406,39],[302,37,406,41],[303,10,407,16],[303,17,407,23],[304,12,408,20,"type"],[304,16,408,24],[304,18,408,26],[304,25,408,33],[305,12,409,20,"value"],[305,17,409,25],[305,19,409,27,"node"],[305,23,409,31],[305,24,409,32,"value"],[305,29,409,37],[305,30,409,38,"charAt"],[305,36,409,44],[305,37,409,45],[305,38,409,46],[305,39,409,47],[306,12,410,20,"syntax"],[306,18,410,26],[306,20,410,28,"node"],[307,10,411,16],[307,11,411,17],[308,8,412,12],[310,8,414,12],[311,8,415,12],[311,15,415,19],[312,10,416,16,"type"],[312,14,416,20],[312,16,416,22,"node"],[312,20,416,26],[312,21,416,27,"type"],[312,25,416,31],[313,10,417,16,"value"],[313,15,417,21],[313,17,417,23,"node"],[313,21,417,27],[313,22,417,28,"value"],[313,27,417,33],[313,28,417,34,"substr"],[313,34,417,40],[313,35,417,41],[313,36,417,42],[313,38,417,44,"node"],[313,42,417,48],[313,43,417,49,"value"],[313,48,417,54],[313,49,417,55,"length"],[313,55,417,61],[313,58,417,64],[313,59,417,65],[313,60,417,66],[313,61,417,67,"replace"],[313,68,417,74],[313,69,417,75],[313,75,417,81],[313,77,417,83],[313,81,417,87],[313,82,417,88],[314,10,418,16,"syntax"],[314,16,418,22],[314,18,418,24,"node"],[315,8,419,12],[315,9,419,13],[316,6,421,8],[316,11,421,13],[316,18,421,20],[317,8,422,12],[317,15,422,19],[318,10,423,16,"type"],[318,14,423,20],[318,16,423,22,"node"],[318,20,423,26],[318,21,423,27,"type"],[318,25,423,31],[319,10,424,16,"value"],[319,15,424,21],[319,17,424,23,"node"],[319,21,424,27],[319,22,424,28,"value"],[319,27,424,33],[320,10,425,16,"syntax"],[320,16,425,22],[320,18,425,24,"node"],[321,8,426,12],[321,9,426,13],[322,6,428,8],[322,11,428,13],[322,18,428,20],[323,8,429,12],[323,15,429,19],[324,10,430,16,"type"],[324,14,430,20],[324,16,430,22,"node"],[324,20,430,26],[324,21,430,27,"type"],[324,25,430,31],[325,10,431,16,"syntax"],[325,16,431,22],[325,18,431,24,"node"],[326,8,432,12],[326,9,432,13],[327,6,434,8],[328,8,435,12],[328,14,435,18],[328,18,435,22,"Error"],[328,23,435,27],[328,24,435,28],[328,44,435,48],[328,46,435,50,"node"],[328,50,435,54],[328,51,435,55,"type"],[328,55,435,59],[328,56,435,60],[329,4,436,4],[330,2,437,0],[331,2,439,0,"module"],[331,8,439,6],[331,9,439,7,"exports"],[331,16,439,14],[331,19,439,17],[332,4,440,4,"MATCH"],[332,9,440,9],[332,11,440,11,"MATCH"],[332,16,440,16],[333,4,441,4,"MISMATCH"],[333,12,441,12],[333,14,441,14,"MISMATCH"],[333,22,441,22],[334,4,442,4,"DISALLOW_EMPTY"],[334,18,442,18],[334,20,442,20,"DISALLOW_EMPTY"],[334,34,442,34],[335,4,443,4,"buildMatchGraph"],[335,19,443,19],[335,21,443,21],[335,30,443,21,"buildMatchGraph"],[335,46,443,30,"syntaxTree"],[335,56,443,40],[335,58,443,42,"ref"],[335,61,443,45],[335,63,443,47],[336,6,444,8],[336,10,444,12],[336,17,444,19,"syntaxTree"],[336,27,444,29],[336,32,444,34],[336,40,444,42],[336,42,444,44],[337,8,445,12,"syntaxTree"],[337,18,445,22],[337,21,445,25,"parse"],[337,26,445,30],[337,27,445,31,"syntaxTree"],[337,37,445,41],[337,38,445,42],[338,6,446,8],[339,6,448,8],[339,13,448,15],[340,8,449,12,"type"],[340,12,449,16],[340,14,449,18],[340,26,449,30],[341,8,450,12,"match"],[341,13,450,17],[341,15,450,19,"buildMatchGraph"],[341,31,450,34],[341,32,450,35,"syntaxTree"],[341,42,450,45],[341,43,450,46],[342,8,451,12,"syntax"],[342,14,451,18],[342,16,451,20,"ref"],[342,19,451,23],[342,23,451,27],[342,27,451,31],[343,8,452,12,"source"],[343,14,452,18],[343,16,452,20,"syntaxTree"],[344,6,453,8],[344,7,453,9],[345,4,454,4],[346,2,455,0],[346,3,455,1],[347,0,455,2]],"functionMap":{"names":["<global>","createCondition","isFunctionType","isEnumCapatible","buildGroupMatchGraph","terms.filter$argument_0","buildMultiplierMatchGraph","buildMatchGraph","module.exports.buildMatchGraph"],"mappings":"AAA;ACQ;CDqB;AEE;CFM;AGE;CHO;AIE;qCCgI;yBDE;qCC8D;yBDE;CJgB;AME;CNmF;AOE;CP2F;qBQM;KRW"}},"type":"js/module"}]}