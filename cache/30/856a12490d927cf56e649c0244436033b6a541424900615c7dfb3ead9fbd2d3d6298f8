{"dependencies":[{"name":"react","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":34,"index":256}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = useMergeRefs;\n  var _react = _$$_REQUIRE(_dependencyMap[0], \"react\");\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  /**\n   * Constructs a new ref that forwards new values to each of the given refs. The\n   * given refs will always be invoked in the order that they are supplied.\n   *\n   * WARNING: A known problem of merging refs using this approach is that if any\n   * of the given refs change, the returned callback ref will also be changed. If\n   * the returned callback ref is supplied as a `ref` to a React element, this may\n   * lead to problems with the given refs being invoked more times than desired.\n   */\n  function useMergeRefs() {\n    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n      refs[_key] = arguments[_key];\n    }\n    return (0, _react.useCallback)(function (current) {\n      for (var ref of refs) {\n        if (ref != null) {\n          if (typeof ref === 'function') {\n            ref(current);\n          } else {\n            ref.current = current;\n          }\n        }\n      }\n    }, [].concat(refs) // eslint-disable-line react-hooks/exhaustive-deps\n    );\n  }\n});","lineCount":43,"map":[[6,2,11,0],[6,6,11,0,"_react"],[6,12,11,0],[6,15,11,0,"_$$_REQUIRE"],[6,26,11,0],[6,27,11,0,"_dependencyMap"],[6,41,11,0],[7,2,1,0],[8,0,2,0],[9,0,3,0],[10,0,4,0],[11,0,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[17,2,18,0],[18,0,19,0],[19,0,20,0],[20,0,21,0],[21,0,22,0],[22,0,23,0],[23,0,24,0],[24,0,25,0],[25,0,26,0],[26,2,27,15],[26,11,27,24,"useMergeRefs"],[26,23,27,36,"useMergeRefs"],[26,24,27,36],[26,26,29,18],[27,4,29,18],[27,13,29,18,"_len"],[27,17,29,18],[27,20,29,18,"arguments"],[27,29,29,18],[27,30,29,18,"length"],[27,36,29,18],[27,38,28,5,"refs"],[27,42,28,9],[27,49,28,9,"Array"],[27,54,28,9],[27,55,28,9,"_len"],[27,59,28,9],[27,62,28,9,"_key"],[27,66,28,9],[27,72,28,9,"_key"],[27,76,28,9],[27,79,28,9,"_len"],[27,83,28,9],[27,85,28,9,"_key"],[27,89,28,9],[28,6,28,5,"refs"],[28,10,28,9],[28,11,28,9,"_key"],[28,15,28,9],[28,19,28,9,"arguments"],[28,28,28,9],[28,29,28,9,"_key"],[28,33,28,9],[29,4,28,9],[30,4,30,2],[30,11,30,9],[30,15,30,9,"useCallback"],[30,33,30,20],[30,35,31,4],[30,45,31,5,"current"],[30,52,31,15],[30,54,31,20],[31,6,32,6],[31,11,32,11],[31,15,32,17,"ref"],[31,18,32,20],[31,22,32,24,"refs"],[31,26,32,28],[31,28,32,30],[32,8,33,8],[32,12,33,12,"ref"],[32,15,33,15],[32,19,33,19],[32,23,33,23],[32,25,33,25],[33,10,34,10],[33,14,34,14],[33,21,34,21,"ref"],[33,24,34,24],[33,29,34,29],[33,39,34,39],[33,41,34,41],[34,12,35,12,"ref"],[34,15,35,15],[34,16,35,16,"current"],[34,23,35,23],[34,24,35,24],[35,10,36,10],[35,11,36,11],[35,17,36,17],[36,12,37,12,"ref"],[36,15,37,15],[36,16,37,16,"current"],[36,23,37,23],[36,26,37,26,"current"],[36,33,37,33],[37,10,38,10],[38,8,39,8],[39,6,40,6],[40,4,41,4],[40,5,41,5],[40,10,41,5,"concat"],[40,16,41,5],[40,17,42,8,"refs"],[40,21,42,12],[40,23,42,15],[41,4,43,2],[41,5,43,3],[42,2,44,0],[43,0,44,1]],"functionMap":{"names":["<global>","useMergeRefs","<anonymous>"],"mappings":"AAA;eC0B;ICI;KDU;CDG"}},"type":"js/module"}]}