{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":39,"column":37,"index":1630}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"url-parse","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":28,"index":28}}],"key":"ivBBHWq/ZlEx+Quzumu2JQ4a9a8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getFileExtension = getFileExtension;\n  exports.getFilename = getFilename;\n  exports.getManifestBaseUrl = getManifestBaseUrl;\n  var _urlParse = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"url-parse\"));\n  function getFilename(url) {\n    var _URL = new _urlParse.default(url, {}),\n      pathname = _URL.pathname;\n    return pathname.substring(pathname.lastIndexOf('/') + 1);\n  }\n  function getFileExtension(url) {\n    var filename = getFilename(url);\n    var dotIndex = filename.lastIndexOf('.');\n    // Ignore leading dots for hidden files\n    return dotIndex > 0 ? filename.substring(dotIndex) : '';\n  }\n  /**\n   * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n   * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n   * parameters and fragments also are removed.\n   *\n   * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the\n   * base URL would be https://exp.host/@user/project.\n   *\n   * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n   * to tell the OS to open the URLs in the the Expo client.\n   */\n  function getManifestBaseUrl(manifestUrl) {\n    var urlObject = new _urlParse.default(manifestUrl, {});\n    // Change the scheme to http(s) if it is exp(s)\n    if (urlObject.protocol === 'exp:') {\n      urlObject.set('protocol', 'http:');\n    } else if (urlObject.protocol === 'exps:') {\n      urlObject.set('protocol', 'https:');\n    }\n    // Trim filename, query parameters, and fragment, if any\n    var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n    urlObject.set('pathname', directory);\n    urlObject.set('query', '');\n    urlObject.set('hash', '');\n    return urlObject.href;\n  }\n});","lineCount":47,"map":[[9,2,1,0],[9,6,1,0,"_urlParse"],[9,15,1,0],[9,18,1,0,"_interopRequireDefault"],[9,40,1,0],[9,41,1,0,"_$$_REQUIRE"],[9,52,1,0],[9,53,1,0,"_dependencyMap"],[9,67,1,0],[10,2,2,7],[10,11,2,16,"getFilename"],[10,22,2,27,"getFilename"],[10,23,2,28,"url"],[10,26,2,31],[10,28,2,33],[11,4,3,4],[11,8,3,4,"_URL"],[11,12,3,4],[11,15,3,25],[11,19,3,29,"URL"],[11,36,3,32],[11,37,3,33,"url"],[11,40,3,36],[11,42,3,38],[11,43,3,39],[11,44,3,40],[11,45,3,41],[12,6,3,12,"pathname"],[12,14,3,20],[12,17,3,20,"_URL"],[12,21,3,20],[12,22,3,12,"pathname"],[12,30,3,20],[13,4,4,4],[13,11,4,11,"pathname"],[13,19,4,19],[13,20,4,20,"substring"],[13,29,4,29],[13,30,4,30,"pathname"],[13,38,4,38],[13,39,4,39,"lastIndexOf"],[13,50,4,50],[13,51,4,51],[13,54,4,54],[13,55,4,55],[13,58,4,58],[13,59,4,59],[13,60,4,60],[14,2,5,0],[15,2,6,7],[15,11,6,16,"getFileExtension"],[15,27,6,32,"getFileExtension"],[15,28,6,33,"url"],[15,31,6,36],[15,33,6,38],[16,4,7,4],[16,8,7,10,"filename"],[16,16,7,18],[16,19,7,21,"getFilename"],[16,30,7,32],[16,31,7,33,"url"],[16,34,7,36],[16,35,7,37],[17,4,8,4],[17,8,8,10,"dotIndex"],[17,16,8,18],[17,19,8,21,"filename"],[17,27,8,29],[17,28,8,30,"lastIndexOf"],[17,39,8,41],[17,40,8,42],[17,43,8,45],[17,44,8,46],[18,4,9,4],[19,4,10,4],[19,11,10,11,"dotIndex"],[19,19,10,19],[19,22,10,22],[19,23,10,23],[19,26,10,26,"filename"],[19,34,10,34],[19,35,10,35,"substring"],[19,44,10,44],[19,45,10,45,"dotIndex"],[19,53,10,53],[19,54,10,54],[19,57,10,57],[19,59,10,59],[20,2,11,0],[21,2,12,0],[22,0,13,0],[23,0,14,0],[24,0,15,0],[25,0,16,0],[26,0,17,0],[27,0,18,0],[28,0,19,0],[29,0,20,0],[30,0,21,0],[31,0,22,0],[32,2,23,7],[32,11,23,16,"getManifestBaseUrl"],[32,29,23,34,"getManifestBaseUrl"],[32,30,23,35,"manifestUrl"],[32,41,23,46],[32,43,23,48],[33,4,24,4],[33,8,24,10,"urlObject"],[33,17,24,19],[33,20,24,22],[33,24,24,26,"URL"],[33,41,24,29],[33,42,24,30,"manifestUrl"],[33,53,24,41],[33,55,24,43],[33,56,24,44],[33,57,24,45],[33,58,24,46],[34,4,25,4],[35,4,26,4],[35,8,26,8,"urlObject"],[35,17,26,17],[35,18,26,18,"protocol"],[35,26,26,26],[35,31,26,31],[35,37,26,37],[35,39,26,39],[36,6,27,8,"urlObject"],[36,15,27,17],[36,16,27,18,"set"],[36,19,27,21],[36,20,27,22],[36,30,27,32],[36,32,27,34],[36,39,27,41],[36,40,27,42],[37,4,28,4],[37,5,28,5],[37,11,29,9],[37,15,29,13,"urlObject"],[37,24,29,22],[37,25,29,23,"protocol"],[37,33,29,31],[37,38,29,36],[37,45,29,43],[37,47,29,45],[38,6,30,8,"urlObject"],[38,15,30,17],[38,16,30,18,"set"],[38,19,30,21],[38,20,30,22],[38,30,30,32],[38,32,30,34],[38,40,30,42],[38,41,30,43],[39,4,31,4],[40,4,32,4],[41,4,33,4],[41,8,33,10,"directory"],[41,17,33,19],[41,20,33,22,"urlObject"],[41,29,33,31],[41,30,33,32,"pathname"],[41,38,33,40],[41,39,33,41,"substring"],[41,48,33,50],[41,49,33,51],[41,50,33,52],[41,52,33,54,"urlObject"],[41,61,33,63],[41,62,33,64,"pathname"],[41,70,33,72],[41,71,33,73,"lastIndexOf"],[41,82,33,84],[41,83,33,85],[41,86,33,88],[41,87,33,89],[41,90,33,92],[41,91,33,93],[41,92,33,94],[42,4,34,4,"urlObject"],[42,13,34,13],[42,14,34,14,"set"],[42,17,34,17],[42,18,34,18],[42,28,34,28],[42,30,34,30,"directory"],[42,39,34,39],[42,40,34,40],[43,4,35,4,"urlObject"],[43,13,35,13],[43,14,35,14,"set"],[43,17,35,17],[43,18,35,18],[43,25,35,25],[43,27,35,27],[43,29,35,29],[43,30,35,30],[44,4,36,4,"urlObject"],[44,13,36,13],[44,14,36,14,"set"],[44,17,36,17],[44,18,36,18],[44,24,36,24],[44,26,36,26],[44,28,36,28],[44,29,36,29],[45,4,37,4],[45,11,37,11,"urlObject"],[45,20,37,20],[45,21,37,21,"href"],[45,25,37,25],[46,2,38,0],[47,0,38,1]],"functionMap":{"names":["<global>","getFilename","getFileExtension","getManifestBaseUrl"],"mappings":"AAA;OCC;CDG;OEC;CFK;OGY;CHe"}},"type":"js/module"}]}