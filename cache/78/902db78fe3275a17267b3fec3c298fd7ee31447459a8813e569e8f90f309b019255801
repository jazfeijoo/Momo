{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":396,"column":37,"index":18161}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":396,"column":37,"index":18161}}],"key":"RY2z4+Bdq4bpTD/1b+1jGPWZdgA="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":396,"column":37,"index":18161}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":396,"column":37,"index":18161}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":396,"column":37,"index":18161}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"expo-modules-core","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":100,"index":100}}],"key":"ka0FS6s7ZmvhJq+hEjGkLLrGpyo="}},{"name":"../AV","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":101},"end":{"line":2,"column":66,"index":167}}],"key":"1obaeXlJkCd2wj+qRk/gLZOX4tA="}},{"name":"../ExponentAV","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":168},"end":{"line":3,"column":39,"index":207}}],"key":"bjhnPCaCu+/PHtEOfB4ziLYfNAU="}},{"name":"./AudioAvailability","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":208},"end":{"line":4,"column":77,"index":285}}],"key":"dNkfNK4/37WkQlbfNezaR6K5qqc="}},{"name":"./RecordingConstants","data":{"asyncType":null,"locs":[{"start":{"line":5,"column":0,"index":286},"end":{"line":5,"column":63,"index":349}}],"key":"bbkW74dCel/ZnafQMyxU56qLVTM="}},{"name":"./Sound","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":0,"index":350},"end":{"line":6,"column":32,"index":382}}],"key":"tIkj5K8UoU4muZVakM3K9pgb4EY="}},{"name":"./Recording.types","data":{"asyncType":null,"locs":[{"start":{"line":395,"column":0,"index":18089},"end":{"line":395,"column":34,"index":18123}}],"key":"kpM2ZoA/ej9jAP2J6f0oV7qAvhQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    getPermissionsAsync: true,\n    requestPermissionsAsync: true,\n    usePermissions: true,\n    Recording: true,\n    PermissionStatus: true\n  };\n  Object.defineProperty(exports, \"PermissionStatus\", {\n    enumerable: true,\n    get: function get() {\n      return _expoModulesCore.PermissionStatus;\n    }\n  });\n  exports.Recording = void 0;\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  exports.usePermissions = void 0;\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = _$$_REQUIRE(_dependencyMap[5], \"expo-modules-core\");\n  var _AV = _$$_REQUIRE(_dependencyMap[6], \"../AV\");\n  var _ExponentAV = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"../ExponentAV\"));\n  var _AudioAvailability = _$$_REQUIRE(_dependencyMap[8], \"./AudioAvailability\");\n  var _RecordingConstants = _$$_REQUIRE(_dependencyMap[9], \"./RecordingConstants\");\n  Object.keys(_RecordingConstants).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _RecordingConstants[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function get() {\n        return _RecordingConstants[key];\n      }\n    });\n  });\n  var _Sound = _$$_REQUIRE(_dependencyMap[10], \"./Sound\");\n  var _Recording = _$$_REQUIRE(_dependencyMap[11], \"./Recording.types\");\n  Object.keys(_Recording).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _Recording[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function get() {\n        return _Recording[key];\n      }\n    });\n  });\n  var _class;\n  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n  var _recorderExists = false;\n  var eventEmitter = _expoModulesCore.Platform.OS === 'android' ? new _expoModulesCore.EventEmitter(_ExponentAV.default) : null;\n  /**\n   * Checks user's permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   */\n  function getPermissionsAsync() {\n    return _getPermissionsAsync.apply(this, arguments);\n  }\n  /**\n   * Asks the user to grant permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   */\n  function _getPermissionsAsync() {\n    _getPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n      return _ExponentAV.default.getPermissionsAsync();\n    });\n    return _getPermissionsAsync.apply(this, arguments);\n  }\n  function requestPermissionsAsync() {\n    return _requestPermissionsAsync.apply(this, arguments);\n  }\n  /**\n   * Check or request permissions to record audio.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = Audio.usePermissions();\n   * ```\n   */\n  function _requestPermissionsAsync() {\n    _requestPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n      return _ExponentAV.default.requestPermissionsAsync();\n    });\n    return _requestPermissionsAsync.apply(this, arguments);\n  }\n  var usePermissions = exports.usePermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getPermissionsAsync,\n    requestMethod: requestPermissionsAsync\n  });\n  // @needsAudit\n  /**\n   * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n   * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n   * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n   * at any given time.\n   *\n   * Note that your experience must request audio recording permissions in order for recording to function.\n   * See the [`Permissions` module](/guides/permissions) for more details.\n   *\n   * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n   *\n   * @example\n   * ```ts\n   * const recording = new Audio.Recording();\n   * try {\n   *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n   *   await recording.startAsync();\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A newly constructed instance of `Audio.Recording`.\n   */\n  var Recording = exports.Recording = /*#__PURE__*/function () {\n    function Recording() {\n      var _this = this;\n      (0, _classCallCheck2.default)(this, Recording);\n      this._subscription = null;\n      this._canRecord = false;\n      this._isDoneRecording = false;\n      this._finalDurationMillis = 0;\n      this._uri = null;\n      this._onRecordingStatusUpdate = null;\n      this._progressUpdateTimeoutVariable = null;\n      this._progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n      this._options = null;\n      // Internal methods\n      this._cleanupForUnloadedRecorder = /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)(function* (finalStatus) {\n          var _finalStatus$duration;\n          _this._canRecord = false;\n          _this._isDoneRecording = true;\n          _this._finalDurationMillis = (_finalStatus$duration = finalStatus == null ? void 0 : finalStatus.durationMillis) != null ? _finalStatus$duration : 0;\n          _recorderExists = false;\n          if (_this._subscription) {\n            _this._subscription.remove();\n            _this._subscription = null;\n          }\n          _this._disablePolling();\n          return yield _this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      this._pollingLoop = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        if ((0, _AudioAvailability.isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null) {\n          _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n          try {\n            yield _this.getStatusAsync();\n          } catch (_unused) {\n            _this._disablePolling();\n          }\n        }\n      });\n      // Get status API\n      /**\n       * Gets the `status` of the `Recording`.\n       * @return A `Promise` that is resolved with the `RecordingStatus` object.\n       */\n      this.getStatusAsync = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        // Automatically calls onRecordingStatusUpdate.\n        if (_this._canRecord) {\n          return _this._performOperationAndHandleStatusAsync(function () {\n            return _ExponentAV.default.getAudioRecordingStatus();\n          });\n        }\n        var status = {\n          canRecord: false,\n          isRecording: false,\n          isDoneRecording: _this._isDoneRecording,\n          durationMillis: _this._finalDurationMillis\n        };\n        _this._callOnRecordingStatusUpdateForNewStatus(status);\n        return status;\n      });\n    }\n    (0, _createClass2.default)(Recording, [{\n      key: \"_disablePolling\",\n      value: function _disablePolling() {\n        if (this._progressUpdateTimeoutVariable != null) {\n          clearTimeout(this._progressUpdateTimeoutVariable);\n          this._progressUpdateTimeoutVariable = null;\n        }\n      }\n    }, {\n      key: \"_enablePollingIfNecessaryAndPossible\",\n      value: function _enablePollingIfNecessaryAndPossible() {\n        if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {\n          this._disablePolling();\n          this._pollingLoop();\n        }\n      }\n    }, {\n      key: \"_callOnRecordingStatusUpdateForNewStatus\",\n      value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n        if (this._onRecordingStatusUpdate != null) {\n          this._onRecordingStatusUpdate(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function () {\n        var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator2.default)(function* (operation) {\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._canRecord) {\n            var status = yield operation();\n            this._callOnRecordingStatusUpdateForNewStatus(status);\n            return status;\n          } else {\n            throw new Error('Cannot complete operation because this recorder is not ready to record.');\n          }\n        });\n        function _performOperationAndHandleStatusAsync(_x2) {\n          return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n        }\n        return _performOperationAndHandleStatusAsync;\n      }()\n      /**\n       * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n       *\n       * ```ts\n       * const { recording, status } = await Audio.Recording.createAsync(\n       *   options,\n       *   onRecordingStatusUpdate,\n       *   progressUpdateIntervalMillis\n       * );\n       *\n       * // Which is equivalent to the following:\n       * const recording = new Audio.Recording();\n       * await recording.prepareToRecordAsync(options);\n       * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n       * await recording.startAsync();\n       * ```\n       *\n       * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n       * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n       * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n       * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n       *\n       * @example\n       * ```ts\n       * try {\n       *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n       *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n       *   );\n       *   // You are now recording!\n       * } catch (error) {\n       *   // An error occurred!\n       * }\n       * ```\n       *\n       * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n       */\n    }, {\n      key: \"setOnRecordingStatusUpdate\",\n      value:\n      /**\n       * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n       *\n       * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n       * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n       * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n       *\n       * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n       */\n      function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n        this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n        if (onRecordingStatusUpdate == null) {\n          this._disablePolling();\n        } else {\n          this._enablePollingIfNecessaryAndPossible();\n        }\n        this.getStatusAsync();\n      }\n      /**\n       * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n       * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n       * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n       */\n    }, {\n      key: \"setProgressUpdateInterval\",\n      value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n        this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n        this.getStatusAsync();\n      }\n      // Record API\n      /**\n       * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n       * This method can only be called if the `Recording` instance has never yet been prepared.\n       *\n       * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n       * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n       *\n       * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n       * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n       * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n       */\n    }, {\n      key: \"prepareToRecordAsync\",\n      value: function () {\n        var _prepareToRecordAsync = (0, _asyncToGenerator2.default)(function* () {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (_recorderExists) {\n            throw new Error('Only one Recording object can be prepared at a given time.');\n          }\n          if (this._isDoneRecording) {\n            throw new Error('This Recording object is done recording; you must make a new one.');\n          }\n          if (!options || !options.android || !options.ios) {\n            throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n          }\n          var extensionRegex = /^\\.\\w+$/;\n          if (!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension)) {\n            throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n          }\n          if (!this._canRecord) {\n            if (eventEmitter) {\n              this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n            }\n            var _yield$ExponentAV$pre = yield _ExponentAV.default.prepareAudioRecorder(options),\n              uri = _yield$ExponentAV$pre.uri,\n              status = _yield$ExponentAV$pre.status;\n            _recorderExists = true;\n            this._uri = uri;\n            this._options = options;\n            this._canRecord = true;\n            var currentStatus = _objectSpread(_objectSpread({}, status), {}, {\n              canRecord: true\n            });\n            this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n            this._enablePollingIfNecessaryAndPossible();\n            return currentStatus;\n          } else {\n            throw new Error('This Recording object is already prepared to record.');\n          }\n        });\n        function prepareToRecordAsync() {\n          return _prepareToRecordAsync.apply(this, arguments);\n        }\n        return prepareToRecordAsync;\n      }()\n      /**\n       * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n       */\n    }, {\n      key: \"getAvailableInputs\",\n      value: function () {\n        var _getAvailableInputs = (0, _asyncToGenerator2.default)(function* () {\n          return _ExponentAV.default.getAvailableInputs();\n        });\n        function getAvailableInputs() {\n          return _getAvailableInputs.apply(this, arguments);\n        }\n        return getAvailableInputs;\n      }()\n      /**\n       * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n       */\n    }, {\n      key: \"getCurrentInput\",\n      value: function () {\n        var _getCurrentInput = (0, _asyncToGenerator2.default)(function* () {\n          return _ExponentAV.default.getCurrentInput();\n        });\n        function getCurrentInput() {\n          return _getCurrentInput.apply(this, arguments);\n        }\n        return getCurrentInput;\n      }()\n      /**\n       * Sets the current recording input.\n       * @param inputUid The uid of a `RecordingInput`.\n       * @return A `Promise` that is resolved if successful or rejected if not.\n       */\n    }, {\n      key: \"setInput\",\n      value: function () {\n        var _setInput = (0, _asyncToGenerator2.default)(function* (inputUid) {\n          return _ExponentAV.default.setInput(inputUid);\n        });\n        function setInput(_x3) {\n          return _setInput.apply(this, arguments);\n        }\n        return setInput;\n      }()\n      /**\n       * Begins recording. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n       * The promise is resolved with the `RecordingStatus` of the recording.\n       */\n    }, {\n      key: \"startAsync\",\n      value: function () {\n        var _startAsync = (0, _asyncToGenerator2.default)(function* () {\n          return this._performOperationAndHandleStatusAsync(function () {\n            return _ExponentAV.default.startAudioRecording();\n          });\n        });\n        function startAsync() {\n          return _startAsync.apply(this, arguments);\n        }\n        return startAsync;\n      }()\n      /**\n       * Pauses recording. This method can only be called if the `Recording` has been prepared.\n       *\n       * > This is only available on Android API version 24 and later.\n       *\n       * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n       * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n       * `RecordingStatus` of the recording.\n       */\n    }, {\n      key: \"pauseAsync\",\n      value: function () {\n        var _pauseAsync = (0, _asyncToGenerator2.default)(function* () {\n          return this._performOperationAndHandleStatusAsync(function () {\n            return _ExponentAV.default.pauseAudioRecording();\n          });\n        });\n        function pauseAsync() {\n          return _pauseAsync.apply(this, arguments);\n        }\n        return pauseAsync;\n      }()\n      /**\n       * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n       * to an unprepared state, and another `Recording` instance must be created in order to record again.\n       * This method can only be called if the `Recording` has been prepared.\n       *\n       * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n       * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n       *\n       * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n       * The promise is resolved with the `RecordingStatus` of the recording.\n       */\n    }, {\n      key: \"stopAndUnloadAsync\",\n      value: function () {\n        var _stopAndUnloadAsync = (0, _asyncToGenerator2.default)(function* () {\n          var _stopResult;\n          if (!this._canRecord) {\n            if (this._isDoneRecording) {\n              throw new Error('Cannot unload a Recording that has already been unloaded.');\n            } else {\n              throw new Error('Cannot unload a Recording that has not been prepared.');\n            }\n          }\n          // We perform a separate native API call so that the state of the Recording can be updated with\n          // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n          var stopResult;\n          var stopError;\n          try {\n            stopResult = yield _ExponentAV.default.stopAudioRecording();\n          } catch (err) {\n            stopError = err;\n          }\n          // Web has to return the URI at the end of recording, so needs a little destructuring\n          if (_expoModulesCore.Platform.OS === 'web' && ((_stopResult = stopResult) == null ? void 0 : _stopResult.uri) !== undefined) {\n            this._uri = stopResult.uri;\n          }\n          // Clean-up and return status\n          yield _ExponentAV.default.unloadAudioRecorder();\n          var status = yield this._cleanupForUnloadedRecorder(stopResult);\n          return stopError ? Promise.reject(stopError) : status;\n        });\n        function stopAndUnloadAsync() {\n          return _stopAndUnloadAsync.apply(this, arguments);\n        }\n        return stopAndUnloadAsync;\n      }() // Read API\n      /**\n       * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n       * to record. On web, this will not return the URI until the recording is finished.\n       * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n       * to record (or, on Web, if the recording has not finished).\n       */\n    }, {\n      key: \"getURI\",\n      value: function getURI() {\n        return this._uri;\n      }\n      /**\n       * @deprecated Use `createNewLoadedSoundAsync()` instead.\n       */\n    }, {\n      key: \"createNewLoadedSound\",\n      value: function () {\n        var _createNewLoadedSound = (0, _asyncToGenerator2.default)(function* () {\n          var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          console.warn(`createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`);\n          return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n        });\n        function createNewLoadedSound() {\n          return _createNewLoadedSound.apply(this, arguments);\n        }\n        return createNewLoadedSound;\n      }()\n      /**\n       * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n       * is done recording and `stopAndUnloadAsync()` has been called.\n       *\n       * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n       * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n       * and the default initial playback status.\n       * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n       * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n       *\n       * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n       */\n    }, {\n      key: \"createNewLoadedSoundAsync\",\n      value: function () {\n        var _createNewLoadedSoundAsync = (0, _asyncToGenerator2.default)(function* () {\n          var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          if (this._uri == null || !this._isDoneRecording) {\n            throw new Error('Cannot create sound when the Recording has not finished!');\n          }\n          return _Sound.Sound.createAsync(\n          // $FlowFixMe: Flow can't distinguish between this literal and Asset\n          {\n            uri: this._uri\n          }, initialStatus, onPlaybackStatusUpdate, false);\n        });\n        function createNewLoadedSoundAsync() {\n          return _createNewLoadedSoundAsync.apply(this, arguments);\n        }\n        return createNewLoadedSoundAsync;\n      }()\n    }]);\n    return Recording;\n  }();\n  _class = Recording;\n  Recording.createAsync = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;\n    var onRecordingStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var progressUpdateIntervalMillis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var recording = new _class();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    yield recording.prepareToRecordAsync(_objectSpread(_objectSpread({}, options), {}, {\n      keepAudioActiveHint: true\n    }));\n    try {\n      var status = yield recording.startAsync();\n      return {\n        recording: recording,\n        status: status\n      };\n    } catch (err) {\n      recording.stopAndUnloadAsync();\n      throw err;\n    }\n  });\n});","lineCount":575,"map":[[27,2,1,0],[27,6,1,0,"_expoModulesCore"],[27,22,1,0],[27,25,1,0,"_$$_REQUIRE"],[27,36,1,0],[27,37,1,0,"_dependencyMap"],[27,51,1,0],[28,2,2,0],[28,6,2,0,"_AV"],[28,9,2,0],[28,12,2,0,"_$$_REQUIRE"],[28,23,2,0],[28,24,2,0,"_dependencyMap"],[28,38,2,0],[29,2,3,0],[29,6,3,0,"_ExponentAV"],[29,17,3,0],[29,20,3,0,"_interopRequireDefault"],[29,42,3,0],[29,43,3,0,"_$$_REQUIRE"],[29,54,3,0],[29,55,3,0,"_dependencyMap"],[29,69,3,0],[30,2,4,0],[30,6,4,0,"_AudioAvailability"],[30,24,4,0],[30,27,4,0,"_$$_REQUIRE"],[30,38,4,0],[30,39,4,0,"_dependencyMap"],[30,53,4,0],[31,2,5,0],[31,6,5,0,"_RecordingConstants"],[31,25,5,0],[31,28,5,0,"_$$_REQUIRE"],[31,39,5,0],[31,40,5,0,"_dependencyMap"],[31,54,5,0],[32,2,394,0,"Object"],[32,8,394,0],[32,9,394,0,"keys"],[32,13,394,0],[32,14,394,0,"_RecordingConstants"],[32,33,394,0],[32,35,394,0,"forEach"],[32,42,394,0],[32,53,394,0,"key"],[32,56,394,0],[33,4,394,0],[33,8,394,0,"key"],[33,11,394,0],[33,29,394,0,"key"],[33,32,394,0],[34,4,394,0],[34,8,394,0,"Object"],[34,14,394,0],[34,15,394,0,"prototype"],[34,24,394,0],[34,25,394,0,"hasOwnProperty"],[34,39,394,0],[34,40,394,0,"call"],[34,44,394,0],[34,45,394,0,"_exportNames"],[34,57,394,0],[34,59,394,0,"key"],[34,62,394,0],[35,4,394,0],[35,8,394,0,"key"],[35,11,394,0],[35,15,394,0,"exports"],[35,22,394,0],[35,26,394,0,"exports"],[35,33,394,0],[35,34,394,0,"key"],[35,37,394,0],[35,43,394,0,"_RecordingConstants"],[35,62,394,0],[35,63,394,0,"key"],[35,66,394,0],[36,4,394,0,"Object"],[36,10,394,0],[36,11,394,0,"defineProperty"],[36,25,394,0],[36,26,394,0,"exports"],[36,33,394,0],[36,35,394,0,"key"],[36,38,394,0],[37,6,394,0,"enumerable"],[37,16,394,0],[38,6,394,0,"get"],[38,9,394,0],[38,20,394,0,"get"],[38,24,394,0],[39,8,394,0],[39,15,394,0,"_RecordingConstants"],[39,34,394,0],[39,35,394,0,"key"],[39,38,394,0],[40,6,394,0],[41,4,394,0],[42,2,394,0],[43,2,6,0],[43,6,6,0,"_Sound"],[43,12,6,0],[43,15,6,0,"_$$_REQUIRE"],[43,26,6,0],[43,27,6,0,"_dependencyMap"],[43,41,6,0],[44,2,395,0],[44,6,395,0,"_Recording"],[44,16,395,0],[44,19,395,0,"_$$_REQUIRE"],[44,30,395,0],[44,31,395,0,"_dependencyMap"],[44,45,395,0],[45,2,395,0,"Object"],[45,8,395,0],[45,9,395,0,"keys"],[45,13,395,0],[45,14,395,0,"_Recording"],[45,24,395,0],[45,26,395,0,"forEach"],[45,33,395,0],[45,44,395,0,"key"],[45,47,395,0],[46,4,395,0],[46,8,395,0,"key"],[46,11,395,0],[46,29,395,0,"key"],[46,32,395,0],[47,4,395,0],[47,8,395,0,"Object"],[47,14,395,0],[47,15,395,0,"prototype"],[47,24,395,0],[47,25,395,0,"hasOwnProperty"],[47,39,395,0],[47,40,395,0,"call"],[47,44,395,0],[47,45,395,0,"_exportNames"],[47,57,395,0],[47,59,395,0,"key"],[47,62,395,0],[48,4,395,0],[48,8,395,0,"key"],[48,11,395,0],[48,15,395,0,"exports"],[48,22,395,0],[48,26,395,0,"exports"],[48,33,395,0],[48,34,395,0,"key"],[48,37,395,0],[48,43,395,0,"_Recording"],[48,53,395,0],[48,54,395,0,"key"],[48,57,395,0],[49,4,395,0,"Object"],[49,10,395,0],[49,11,395,0,"defineProperty"],[49,25,395,0],[49,26,395,0,"exports"],[49,33,395,0],[49,35,395,0,"key"],[49,38,395,0],[50,6,395,0,"enumerable"],[50,16,395,0],[51,6,395,0,"get"],[51,9,395,0],[51,20,395,0,"get"],[51,24,395,0],[52,8,395,0],[52,15,395,0,"_Recording"],[52,25,395,0],[52,26,395,0,"key"],[52,29,395,0],[53,6,395,0],[54,4,395,0],[55,2,395,0],[56,2,395,34],[56,6,395,34,"_class"],[56,12,395,34],[57,2,395,34],[57,11,395,34,"ownKeys"],[57,19,395,34,"e"],[57,20,395,34],[57,22,395,34,"r"],[57,23,395,34],[57,31,395,34,"t"],[57,32,395,34],[57,35,395,34,"Object"],[57,41,395,34],[57,42,395,34,"keys"],[57,46,395,34],[57,47,395,34,"e"],[57,48,395,34],[57,55,395,34,"Object"],[57,61,395,34],[57,62,395,34,"getOwnPropertySymbols"],[57,83,395,34],[57,91,395,34,"o"],[57,92,395,34],[57,95,395,34,"Object"],[57,101,395,34],[57,102,395,34,"getOwnPropertySymbols"],[57,123,395,34],[57,124,395,34,"e"],[57,125,395,34],[57,128,395,34,"r"],[57,129,395,34],[57,134,395,34,"o"],[57,135,395,34],[57,138,395,34,"o"],[57,139,395,34],[57,140,395,34,"filter"],[57,146,395,34],[57,157,395,34,"r"],[57,158,395,34],[57,169,395,34,"Object"],[57,175,395,34],[57,176,395,34,"getOwnPropertyDescriptor"],[57,200,395,34],[57,201,395,34,"e"],[57,202,395,34],[57,204,395,34,"r"],[57,205,395,34],[57,207,395,34,"enumerable"],[57,217,395,34],[57,224,395,34,"t"],[57,225,395,34],[57,226,395,34,"push"],[57,230,395,34],[57,231,395,34,"apply"],[57,236,395,34],[57,237,395,34,"t"],[57,238,395,34],[57,240,395,34,"o"],[57,241,395,34],[57,253,395,34,"t"],[57,254,395,34],[58,2,395,34],[58,11,395,34,"_objectSpread"],[58,25,395,34,"e"],[58,26,395,34],[58,39,395,34,"r"],[58,40,395,34],[58,46,395,34,"r"],[58,47,395,34],[58,50,395,34,"arguments"],[58,59,395,34],[58,60,395,34,"length"],[58,66,395,34],[58,68,395,34,"r"],[58,69,395,34],[58,79,395,34,"t"],[58,80,395,34],[58,91,395,34,"arguments"],[58,100,395,34],[58,101,395,34,"r"],[58,102,395,34],[58,106,395,34,"arguments"],[58,115,395,34],[58,116,395,34,"r"],[58,117,395,34],[58,125,395,34,"r"],[58,126,395,34],[58,133,395,34,"ownKeys"],[58,140,395,34],[58,141,395,34,"Object"],[58,147,395,34],[58,148,395,34,"t"],[58,149,395,34],[58,156,395,34,"forEach"],[58,163,395,34],[58,174,395,34,"r"],[58,175,395,34],[58,183,395,34,"_defineProperty2"],[58,199,395,34],[58,200,395,34,"default"],[58,207,395,34],[58,209,395,34,"e"],[58,210,395,34],[58,212,395,34,"r"],[58,213,395,34],[58,215,395,34,"t"],[58,216,395,34],[58,217,395,34,"r"],[58,218,395,34],[58,227,395,34,"Object"],[58,233,395,34],[58,234,395,34,"getOwnPropertyDescriptors"],[58,259,395,34],[58,262,395,34,"Object"],[58,268,395,34],[58,269,395,34,"defineProperties"],[58,285,395,34],[58,286,395,34,"e"],[58,287,395,34],[58,289,395,34,"Object"],[58,295,395,34],[58,296,395,34,"getOwnPropertyDescriptors"],[58,321,395,34],[58,322,395,34,"t"],[58,323,395,34],[58,328,395,34,"ownKeys"],[58,335,395,34],[58,336,395,34,"Object"],[58,342,395,34],[58,343,395,34,"t"],[58,344,395,34],[58,347,395,34,"forEach"],[58,354,395,34],[58,365,395,34,"r"],[58,366,395,34],[58,370,395,34,"Object"],[58,376,395,34],[58,377,395,34,"defineProperty"],[58,391,395,34],[58,392,395,34,"e"],[58,393,395,34],[58,395,395,34,"r"],[58,396,395,34],[58,398,395,34,"Object"],[58,404,395,34],[58,405,395,34,"getOwnPropertyDescriptor"],[58,429,395,34],[58,430,395,34,"t"],[58,431,395,34],[58,433,395,34,"r"],[58,434,395,34],[58,451,395,34,"e"],[58,452,395,34],[59,2,7,0],[59,6,7,4,"_recorderExists"],[59,21,7,19],[59,24,7,22],[59,29,7,27],[60,2,8,0],[60,6,8,6,"eventEmitter"],[60,18,8,18],[60,21,8,21,"Platform"],[60,46,8,29],[60,47,8,30,"OS"],[60,49,8,32],[60,54,8,37],[60,63,8,46],[60,66,8,49],[60,70,8,53,"EventEmitter"],[60,99,8,65],[60,100,8,66,"ExponentAV"],[60,119,8,76],[60,120,8,77],[60,123,8,80],[60,127,8,84],[61,2,9,0],[62,0,10,0],[63,0,11,0],[64,0,12,0],[65,2,9,0],[65,11,13,22,"getPermissionsAsync"],[65,30,13,41,"getPermissionsAsync"],[65,31,13,41],[66,4,13,41],[66,11,13,41,"_getPermissionsAsync"],[66,31,13,41],[66,32,13,41,"apply"],[66,37,13,41],[66,44,13,41,"arguments"],[66,53,13,41],[67,2,13,41],[68,2,16,0],[69,0,17,0],[70,0,18,0],[71,0,19,0],[72,2,16,0],[72,11,16,0,"_getPermissionsAsync"],[72,32,16,0],[73,4,16,0,"_getPermissionsAsync"],[73,24,16,0],[73,31,16,0,"_asyncToGenerator2"],[73,49,16,0],[73,50,16,0,"default"],[73,57,16,0],[73,59,13,7],[73,72,13,44],[74,6,14,4],[74,13,14,11,"ExponentAV"],[74,32,14,21],[74,33,14,22,"getPermissionsAsync"],[74,52,14,41],[74,53,14,42],[74,54,14,43],[75,4,15,0],[75,5,15,1],[76,4,15,1],[76,11,15,1,"_getPermissionsAsync"],[76,31,15,1],[76,32,15,1,"apply"],[76,37,15,1],[76,44,15,1,"arguments"],[76,53,15,1],[77,2,15,1],[78,2,15,1],[78,11,20,22,"requestPermissionsAsync"],[78,34,20,45,"requestPermissionsAsync"],[78,35,20,45],[79,4,20,45],[79,11,20,45,"_requestPermissionsAsync"],[79,35,20,45],[79,36,20,45,"apply"],[79,41,20,45],[79,48,20,45,"arguments"],[79,57,20,45],[80,2,20,45],[81,2,23,0],[82,0,24,0],[83,0,25,0],[84,0,26,0],[85,0,27,0],[86,0,28,0],[87,0,29,0],[88,0,30,0],[89,0,31,0],[90,2,23,0],[90,11,23,0,"_requestPermissionsAsync"],[90,36,23,0],[91,4,23,0,"_requestPermissionsAsync"],[91,28,23,0],[91,35,23,0,"_asyncToGenerator2"],[91,53,23,0],[91,54,23,0,"default"],[91,61,23,0],[91,63,20,7],[91,76,20,48],[92,6,21,4],[92,13,21,11,"ExponentAV"],[92,32,21,21],[92,33,21,22,"requestPermissionsAsync"],[92,56,21,45],[92,57,21,46],[92,58,21,47],[93,4,22,0],[93,5,22,1],[94,4,22,1],[94,11,22,1,"_requestPermissionsAsync"],[94,35,22,1],[94,36,22,1,"apply"],[94,41,22,1],[94,48,22,1,"arguments"],[94,57,22,1],[95,2,22,1],[96,2,32,7],[96,6,32,13,"usePermissions"],[96,20,32,27],[96,23,32,27,"exports"],[96,30,32,27],[96,31,32,27,"usePermissions"],[96,45,32,27],[96,48,32,30],[96,52,32,30,"createPermissionHook"],[96,89,32,50],[96,91,32,51],[97,4,33,4,"getMethod"],[97,13,33,13],[97,15,33,15,"getPermissionsAsync"],[97,34,33,34],[98,4,34,4,"requestMethod"],[98,17,34,17],[98,19,34,19,"requestPermissionsAsync"],[99,2,35,0],[99,3,35,1],[99,4,35,2],[100,2,36,0],[101,2,37,0],[102,0,38,0],[103,0,39,0],[104,0,40,0],[105,0,41,0],[106,0,42,0],[107,0,43,0],[108,0,44,0],[109,0,45,0],[110,0,46,0],[111,0,47,0],[112,0,48,0],[113,0,49,0],[114,0,50,0],[115,0,51,0],[116,0,52,0],[117,0,53,0],[118,0,54,0],[119,0,55,0],[120,0,56,0],[121,0,57,0],[122,0,58,0],[123,0,59,0],[124,0,60,0],[125,0,61,0],[126,2,37,0],[126,6,62,13,"Recording"],[126,15,62,22],[126,18,62,22,"exports"],[126,25,62,22],[126,26,62,22,"Recording"],[126,35,62,22],[127,4,62,22],[127,13,62,22,"Recording"],[127,23,62,22],[128,6,62,22],[128,10,62,22,"_this"],[128,15,62,22],[129,6,62,22],[129,10,62,22,"_classCallCheck2"],[129,26,62,22],[129,27,62,22,"default"],[129,34,62,22],[129,42,62,22,"Recording"],[129,51,62,22],[130,6,62,22],[130,11,63,4,"_subscription"],[130,24,63,17],[130,27,63,20],[130,31,63,24],[131,6,63,24],[131,11,64,4,"_canRecord"],[131,21,64,14],[131,24,64,17],[131,29,64,22],[132,6,64,22],[132,11,65,4,"_isDoneRecording"],[132,27,65,20],[132,30,65,23],[132,35,65,28],[133,6,65,28],[133,11,66,4,"_finalDurationMillis"],[133,31,66,24],[133,34,66,27],[133,35,66,28],[134,6,66,28],[134,11,67,4,"_uri"],[134,15,67,8],[134,18,67,11],[134,22,67,15],[135,6,67,15],[135,11,68,4,"_onRecordingStatusUpdate"],[135,35,68,28],[135,38,68,31],[135,42,68,35],[136,6,68,35],[136,11,69,4,"_progressUpdateTimeoutVariable"],[136,41,69,34],[136,44,69,37],[136,48,69,41],[137,6,69,41],[137,11,70,4,"_progressUpdateIntervalMillis"],[137,40,70,33],[137,43,70,36,"_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS"],[137,87,70,76],[138,6,70,76],[138,11,71,4,"_options"],[138,19,71,12],[138,22,71,15],[138,26,71,19],[139,6,72,4],[140,6,72,4],[140,11,73,4,"_cleanupForUnloadedRecorder"],[140,38,73,31],[141,8,73,31],[141,12,73,31,"_ref"],[141,16,73,31],[141,23,73,31,"_asyncToGenerator2"],[141,41,73,31],[141,42,73,31,"default"],[141,49,73,31],[141,51,73,34],[141,62,73,41,"finalStatus"],[141,73,73,52],[141,75,73,57],[142,10,73,57],[142,14,73,57,"_finalStatus$duration"],[142,35,73,57],[143,10,74,8,"_this"],[143,15,74,12],[143,16,74,13,"_canRecord"],[143,26,74,23],[143,29,74,26],[143,34,74,31],[144,10,75,8,"_this"],[144,15,75,12],[144,16,75,13,"_isDoneRecording"],[144,32,75,29],[144,35,75,32],[144,39,75,36],[145,10,76,8,"_this"],[145,15,76,12],[145,16,76,13,"_finalDurationMillis"],[145,36,76,33],[145,40,76,33,"_finalStatus$duration"],[145,61,76,33],[145,64,76,36,"finalStatus"],[145,75,76,47],[145,95,76,36,"finalStatus"],[145,106,76,47],[145,107,76,49,"durationMillis"],[145,121,76,63],[145,133,76,63,"_finalStatus$duration"],[145,154,76,63],[145,157,76,67],[145,158,76,68],[146,10,77,8,"_recorderExists"],[146,25,77,23],[146,28,77,26],[146,33,77,31],[147,10,78,8],[147,14,78,12,"_this"],[147,19,78,16],[147,20,78,17,"_subscription"],[147,33,78,30],[147,35,78,32],[148,12,79,12,"_this"],[148,17,79,16],[148,18,79,17,"_subscription"],[148,31,79,30],[148,32,79,31,"remove"],[148,38,79,37],[148,39,79,38],[148,40,79,39],[149,12,80,12,"_this"],[149,17,80,16],[149,18,80,17,"_subscription"],[149,31,80,30],[149,34,80,33],[149,38,80,37],[150,10,81,8],[151,10,82,8,"_this"],[151,15,82,12],[151,16,82,13,"_disablePolling"],[151,31,82,28],[151,32,82,29],[151,33,82,30],[152,10,83,8],[152,23,83,21,"_this"],[152,28,83,25],[152,29,83,26,"getStatusAsync"],[152,43,83,40],[152,44,83,41],[152,45,83,42],[152,46,83,43],[152,47,83,44],[153,8,84,4],[153,9,84,5],[154,8,84,5],[154,25,84,5,"_x"],[154,27,84,5],[155,10,84,5],[155,17,84,5,"_ref"],[155,21,84,5],[155,22,84,5,"apply"],[155,27,84,5],[155,34,84,5,"arguments"],[155,43,84,5],[156,8,84,5],[157,6,84,5],[158,6,84,5],[158,11,85,4,"_pollingLoop"],[158,23,85,16],[158,43,85,16,"_asyncToGenerator2"],[158,61,85,16],[158,62,85,16,"default"],[158,69,85,16],[158,71,85,19],[158,84,85,31],[159,8,86,8],[159,12,86,12],[159,16,86,12,"isAudioEnabled"],[159,49,86,26],[159,51,86,27],[159,52,86,28],[159,56,86,32,"_this"],[159,61,86,36],[159,62,86,37,"_canRecord"],[159,72,86,47],[159,76,86,51,"_this"],[159,81,86,55],[159,82,86,56,"_onRecordingStatusUpdate"],[159,106,86,80],[159,110,86,84],[159,114,86,88],[159,116,86,90],[160,10,87,12,"_this"],[160,15,87,16],[160,16,87,17,"_progressUpdateTimeoutVariable"],[160,46,87,47],[160,49,87,50,"setTimeout"],[160,59,87,60],[160,60,87,61,"_this"],[160,65,87,65],[160,66,87,66,"_pollingLoop"],[160,78,87,78],[160,80,87,80,"_this"],[160,85,87,84],[160,86,87,85,"_progressUpdateIntervalMillis"],[160,115,87,114],[160,116,87,115],[161,10,88,12],[161,14,88,16],[162,12,89,16],[162,18,89,22,"_this"],[162,23,89,26],[162,24,89,27,"getStatusAsync"],[162,38,89,41],[162,39,89,42],[162,40,89,43],[163,10,90,12],[163,11,90,13],[163,12,91,12],[163,19,91,12,"_unused"],[163,26,91,12],[163,28,91,18],[164,12,92,16,"_this"],[164,17,92,20],[164,18,92,21,"_disablePolling"],[164,33,92,36],[164,34,92,37],[164,35,92,38],[165,10,93,12],[166,8,94,8],[167,6,95,4],[167,7,95,5],[168,6,179,4],[169,6,180,4],[170,0,181,0],[171,0,182,0],[172,0,183,0],[173,6,180,4],[173,11,184,4,"getStatusAsync"],[173,25,184,18],[173,45,184,18,"_asyncToGenerator2"],[173,63,184,18],[173,64,184,18,"default"],[173,71,184,18],[173,73,184,21],[173,86,184,33],[174,8,185,8],[175,8,186,8],[175,12,186,12,"_this"],[175,17,186,16],[175,18,186,17,"_canRecord"],[175,28,186,27],[175,30,186,29],[176,10,187,12],[176,17,187,19,"_this"],[176,22,187,23],[176,23,187,24,"_performOperationAndHandleStatusAsync"],[176,60,187,61],[176,61,187,62],[177,12,187,62],[177,19,187,68,"ExponentAV"],[177,38,187,78],[177,39,187,79,"getAudioRecordingStatus"],[177,62,187,102],[177,63,187,103],[177,64,187,104],[178,10,187,104],[178,12,187,105],[179,8,188,8],[180,8,189,8],[180,12,189,14,"status"],[180,18,189,20],[180,21,189,23],[181,10,190,12,"canRecord"],[181,19,190,21],[181,21,190,23],[181,26,190,28],[182,10,191,12,"isRecording"],[182,21,191,23],[182,23,191,25],[182,28,191,30],[183,10,192,12,"isDoneRecording"],[183,25,192,27],[183,27,192,29,"_this"],[183,32,192,33],[183,33,192,34,"_isDoneRecording"],[183,49,192,50],[184,10,193,12,"durationMillis"],[184,24,193,26],[184,26,193,28,"_this"],[184,31,193,32],[184,32,193,33,"_finalDurationMillis"],[185,8,194,8],[185,9,194,9],[186,8,195,8,"_this"],[186,13,195,12],[186,14,195,13,"_callOnRecordingStatusUpdateForNewStatus"],[186,54,195,53],[186,55,195,54,"status"],[186,61,195,60],[186,62,195,61],[187,8,196,8],[187,15,196,15,"status"],[187,21,196,21],[188,6,197,4],[188,7,197,5],[189,4,197,5],[190,4,197,5],[190,8,197,5,"_createClass2"],[190,21,197,5],[190,22,197,5,"default"],[190,29,197,5],[190,31,197,5,"Recording"],[190,40,197,5],[191,6,197,5,"key"],[191,9,197,5],[192,6,197,5,"value"],[192,11,197,5],[192,13,96,4],[192,22,96,4,"_disablePolling"],[192,38,96,4],[192,40,96,22],[193,8,97,8],[193,12,97,12],[193,16,97,16],[193,17,97,17,"_progressUpdateTimeoutVariable"],[193,47,97,47],[193,51,97,51],[193,55,97,55],[193,57,97,57],[194,10,98,12,"clearTimeout"],[194,22,98,24],[194,23,98,25],[194,27,98,29],[194,28,98,30,"_progressUpdateTimeoutVariable"],[194,58,98,60],[194,59,98,61],[195,10,99,12],[195,14,99,16],[195,15,99,17,"_progressUpdateTimeoutVariable"],[195,45,99,47],[195,48,99,50],[195,52,99,54],[196,8,100,8],[197,6,101,4],[198,4,101,5],[199,6,101,5,"key"],[199,9,101,5],[200,6,101,5,"value"],[200,11,101,5],[200,13,102,4],[200,22,102,4,"_enablePollingIfNecessaryAndPossible"],[200,59,102,4],[200,61,102,43],[201,8,103,8],[201,12,103,12],[201,16,103,12,"isAudioEnabled"],[201,49,103,26],[201,51,103,27],[201,52,103,28],[201,56,103,32],[201,60,103,36],[201,61,103,37,"_canRecord"],[201,71,103,47],[201,75,103,51],[201,79,103,55],[201,80,103,56,"_onRecordingStatusUpdate"],[201,104,103,80],[201,108,103,84],[201,112,103,88],[201,114,103,90],[202,10,104,12],[202,14,104,16],[202,15,104,17,"_disablePolling"],[202,30,104,32],[202,31,104,33],[202,32,104,34],[203,10,105,12],[203,14,105,16],[203,15,105,17,"_pollingLoop"],[203,27,105,29],[203,28,105,30],[203,29,105,31],[204,8,106,8],[205,6,107,4],[206,4,107,5],[207,6,107,5,"key"],[207,9,107,5],[208,6,107,5,"value"],[208,11,107,5],[208,13,108,4],[208,22,108,4,"_callOnRecordingStatusUpdateForNewStatus"],[208,63,108,45,"status"],[208,69,108,51],[208,71,108,53],[209,8,109,8],[209,12,109,12],[209,16,109,16],[209,17,109,17,"_onRecordingStatusUpdate"],[209,41,109,41],[209,45,109,45],[209,49,109,49],[209,51,109,51],[210,10,110,12],[210,14,110,16],[210,15,110,17,"_onRecordingStatusUpdate"],[210,39,110,41],[210,40,110,42,"status"],[210,46,110,48],[210,47,110,49],[211,8,111,8],[212,6,112,4],[213,4,112,5],[214,6,112,5,"key"],[214,9,112,5],[215,6,112,5,"value"],[215,11,112,5],[216,8,112,5],[216,12,112,5,"_performOperationAndHandleStatusAsync2"],[216,50,112,5],[216,57,112,5,"_asyncToGenerator2"],[216,75,112,5],[216,76,112,5,"default"],[216,83,112,5],[216,85,113,4],[216,96,113,48,"operation"],[216,105,113,57],[216,107,113,59],[217,10,114,8],[217,14,114,8,"throwIfAudioIsDisabled"],[217,55,114,30],[217,57,114,31],[217,58,114,32],[218,10,115,8],[218,14,115,12],[218,18,115,16],[218,19,115,17,"_canRecord"],[218,29,115,27],[218,31,115,29],[219,12,116,12],[219,16,116,18,"status"],[219,22,116,24],[219,31,116,33,"operation"],[219,40,116,42],[219,41,116,43],[219,42,116,44],[220,12,117,12],[220,16,117,16],[220,17,117,17,"_callOnRecordingStatusUpdateForNewStatus"],[220,57,117,57],[220,58,117,58,"status"],[220,64,117,64],[220,65,117,65],[221,12,118,12],[221,19,118,19,"status"],[221,25,118,25],[222,10,119,8],[222,11,119,9],[222,17,120,13],[223,12,121,12],[223,18,121,18],[223,22,121,22,"Error"],[223,27,121,27],[223,28,121,28],[223,101,121,101],[223,102,121,102],[224,10,122,8],[225,8,123,4],[225,9,123,5],[226,8,123,5],[226,17,123,5,"_performOperationAndHandleStatusAsync"],[226,55,123,5,"_x2"],[226,58,123,5],[227,10,123,5],[227,17,123,5,"_performOperationAndHandleStatusAsync2"],[227,55,123,5],[227,56,123,5,"apply"],[227,61,123,5],[227,68,123,5,"arguments"],[227,77,123,5],[228,8,123,5],[229,8,123,5],[229,15,123,5,"_performOperationAndHandleStatusAsync"],[229,52,123,5],[230,6,123,5],[231,6,124,4],[232,0,125,0],[233,0,126,0],[234,0,127,0],[235,0,128,0],[236,0,129,0],[237,0,130,0],[238,0,131,0],[239,0,132,0],[240,0,133,0],[241,0,134,0],[242,0,135,0],[243,0,136,0],[244,0,137,0],[245,0,138,0],[246,0,139,0],[247,0,140,0],[248,0,141,0],[249,0,142,0],[250,0,143,0],[251,0,144,0],[252,0,145,0],[253,0,146,0],[254,0,147,0],[255,0,148,0],[256,0,149,0],[257,0,150,0],[258,0,151,0],[259,0,152,0],[260,0,153,0],[261,0,154,0],[262,0,155,0],[263,0,156,0],[264,0,157,0],[265,0,158,0],[266,0,159,0],[267,4,124,4],[268,6,124,4,"key"],[268,9,124,4],[269,6,124,4,"value"],[269,11,124,4],[270,6,198,4],[271,0,199,0],[272,0,200,0],[273,0,201,0],[274,0,202,0],[275,0,203,0],[276,0,204,0],[277,0,205,0],[278,0,206,0],[279,6,207,4],[279,15,207,4,"setOnRecordingStatusUpdate"],[279,42,207,31,"onRecordingStatusUpdate"],[279,65,207,54],[279,67,207,56],[280,8,208,8],[280,12,208,12],[280,13,208,13,"_onRecordingStatusUpdate"],[280,37,208,37],[280,40,208,40,"onRecordingStatusUpdate"],[280,63,208,63],[281,8,209,8],[281,12,209,12,"onRecordingStatusUpdate"],[281,35,209,35],[281,39,209,39],[281,43,209,43],[281,45,209,45],[282,10,210,12],[282,14,210,16],[282,15,210,17,"_disablePolling"],[282,30,210,32],[282,31,210,33],[282,32,210,34],[283,8,211,8],[283,9,211,9],[283,15,212,13],[284,10,213,12],[284,14,213,16],[284,15,213,17,"_enablePollingIfNecessaryAndPossible"],[284,51,213,53],[284,52,213,54],[284,53,213,55],[285,8,214,8],[286,8,215,8],[286,12,215,12],[286,13,215,13,"getStatusAsync"],[286,27,215,27],[286,28,215,28],[286,29,215,29],[287,6,216,4],[288,6,217,4],[289,0,218,0],[290,0,219,0],[291,0,220,0],[292,0,221,0],[293,4,217,4],[294,6,217,4,"key"],[294,9,217,4],[295,6,217,4,"value"],[295,11,217,4],[295,13,222,4],[295,22,222,4,"setProgressUpdateInterval"],[295,48,222,30,"progressUpdateIntervalMillis"],[295,76,222,58],[295,78,222,60],[296,8,223,8],[296,12,223,12],[296,13,223,13,"_progressUpdateIntervalMillis"],[296,42,223,42],[296,45,223,45,"progressUpdateIntervalMillis"],[296,73,223,73],[297,8,224,8],[297,12,224,12],[297,13,224,13,"getStatusAsync"],[297,27,224,27],[297,28,224,28],[297,29,224,29],[298,6,225,4],[299,6,226,4],[300,6,227,4],[301,0,228,0],[302,0,229,0],[303,0,230,0],[304,0,231,0],[305,0,232,0],[306,0,233,0],[307,0,234,0],[308,0,235,0],[309,0,236,0],[310,0,237,0],[311,4,227,4],[312,6,227,4,"key"],[312,9,227,4],[313,6,227,4,"value"],[313,11,227,4],[314,8,227,4],[314,12,227,4,"_prepareToRecordAsync"],[314,33,227,4],[314,40,227,4,"_asyncToGenerator2"],[314,58,227,4],[314,59,227,4,"default"],[314,66,227,4],[314,68,238,4],[314,81,238,78],[315,10,238,78],[315,14,238,31,"options"],[315,21,238,38],[315,24,238,38,"arguments"],[315,33,238,38],[315,34,238,38,"length"],[315,40,238,38],[315,48,238,38,"arguments"],[315,57,238,38],[315,65,238,38,"undefined"],[315,74,238,38],[315,77,238,38,"arguments"],[315,86,238,38],[315,92,238,41,"RecordingOptionsPresets"],[315,135,238,64],[315,136,238,65,"LOW_QUALITY"],[315,147,238,76],[316,10,239,8],[316,14,239,8,"throwIfAudioIsDisabled"],[316,55,239,30],[316,57,239,31],[316,58,239,32],[317,10,240,8],[317,14,240,12,"_recorderExists"],[317,29,240,27],[317,31,240,29],[318,12,241,12],[318,18,241,18],[318,22,241,22,"Error"],[318,27,241,27],[318,28,241,28],[318,88,241,88],[318,89,241,89],[319,10,242,8],[320,10,243,8],[320,14,243,12],[320,18,243,16],[320,19,243,17,"_isDoneRecording"],[320,35,243,33],[320,37,243,35],[321,12,244,12],[321,18,244,18],[321,22,244,22,"Error"],[321,27,244,27],[321,28,244,28],[321,95,244,95],[321,96,244,96],[322,10,245,8],[323,10,246,8],[323,14,246,12],[323,15,246,13,"options"],[323,22,246,20],[323,26,246,24],[323,27,246,25,"options"],[323,34,246,32],[323,35,246,33,"android"],[323,42,246,40],[323,46,246,44],[323,47,246,45,"options"],[323,54,246,52],[323,55,246,53,"ios"],[323,58,246,56],[323,60,246,58],[324,12,247,12],[324,18,247,18],[324,22,247,22,"Error"],[324,27,247,27],[324,28,247,28],[324,115,247,115],[324,116,247,116],[325,10,248,8],[326,10,249,8],[326,14,249,14,"extensionRegex"],[326,28,249,28],[326,31,249,31],[326,40,249,40],[327,10,250,8],[327,14,250,12],[327,15,250,13,"options"],[327,22,250,20],[327,23,250,21,"android"],[327,30,250,28],[327,31,250,29,"extension"],[327,40,250,38],[327,44,251,12],[327,45,251,13,"options"],[327,52,251,20],[327,53,251,21,"ios"],[327,56,251,24],[327,57,251,25,"extension"],[327,66,251,34],[327,70,252,12],[327,71,252,13,"extensionRegex"],[327,85,252,27],[327,86,252,28,"test"],[327,90,252,32],[327,91,252,33,"options"],[327,98,252,40],[327,99,252,41,"android"],[327,106,252,48],[327,107,252,49,"extension"],[327,116,252,58],[327,117,252,59],[327,121,253,12],[327,122,253,13,"extensionRegex"],[327,136,253,27],[327,137,253,28,"test"],[327,141,253,32],[327,142,253,33,"options"],[327,149,253,40],[327,150,253,41,"ios"],[327,153,253,44],[327,154,253,45,"extension"],[327,163,253,54],[327,164,253,55],[327,166,253,57],[328,12,254,12],[328,18,254,18],[328,22,254,22,"Error"],[328,27,254,27],[328,28,254,29],[328,63,254,63,"extensionRegex"],[328,77,254,77],[328,78,254,78,"toString"],[328,86,254,86],[328,87,254,87],[328,88,254,89],[328,91,254,91],[328,92,254,92],[329,10,255,8],[330,10,256,8],[330,14,256,12],[330,15,256,13],[330,19,256,17],[330,20,256,18,"_canRecord"],[330,30,256,28],[330,32,256,30],[331,12,257,12],[331,16,257,16,"eventEmitter"],[331,28,257,28],[331,30,257,30],[332,14,258,16],[332,18,258,20],[332,19,258,21,"_subscription"],[332,32,258,34],[332,35,258,37,"eventEmitter"],[332,47,258,49],[332,48,258,50,"addListener"],[332,59,258,61],[332,60,258,62],[332,93,258,95],[332,95,258,97],[332,99,258,101],[332,100,258,102,"_cleanupForUnloadedRecorder"],[332,127,258,129],[332,128,258,130],[333,12,259,12],[334,12,260,12],[334,16,260,12,"_yield$ExponentAV$pre"],[334,37,260,12],[334,46,260,43,"ExponentAV"],[334,65,260,53],[334,66,260,54,"prepareAudioRecorder"],[334,86,260,74],[334,87,260,75,"options"],[334,94,260,82],[334,95,260,83],[335,14,260,20,"uri"],[335,17,260,23],[335,20,260,23,"_yield$ExponentAV$pre"],[335,41,260,23],[335,42,260,20,"uri"],[335,45,260,23],[336,14,260,25,"status"],[336,20,260,31],[336,23,260,31,"_yield$ExponentAV$pre"],[336,44,260,31],[336,45,260,25,"status"],[336,51,260,31],[337,12,261,12,"_recorderExists"],[337,27,261,27],[337,30,261,30],[337,34,261,34],[338,12,262,12],[338,16,262,16],[338,17,262,17,"_uri"],[338,21,262,21],[338,24,262,24,"uri"],[338,27,262,27],[339,12,263,12],[339,16,263,16],[339,17,263,17,"_options"],[339,25,263,25],[339,28,263,28,"options"],[339,35,263,35],[340,12,264,12],[340,16,264,16],[340,17,264,17,"_canRecord"],[340,27,264,27],[340,30,264,30],[340,34,264,34],[341,12,265,12],[341,16,265,18,"currentStatus"],[341,29,265,31],[341,32,265,31,"_objectSpread"],[341,45,265,31],[341,46,265,31,"_objectSpread"],[341,59,265,31],[341,64,265,39,"status"],[341,70,265,45],[342,14,265,47,"canRecord"],[342,23,265,56],[342,25,265,58],[343,12,265,62],[343,14,265,64],[344,12,266,12],[344,16,266,16],[344,17,266,17,"_callOnRecordingStatusUpdateForNewStatus"],[344,57,266,57],[344,58,266,58,"currentStatus"],[344,71,266,71],[344,72,266,72],[345,12,267,12],[345,16,267,16],[345,17,267,17,"_enablePollingIfNecessaryAndPossible"],[345,53,267,53],[345,54,267,54],[345,55,267,55],[346,12,268,12],[346,19,268,19,"currentStatus"],[346,32,268,32],[347,10,269,8],[347,11,269,9],[347,17,270,13],[348,12,271,12],[348,18,271,18],[348,22,271,22,"Error"],[348,27,271,27],[348,28,271,28],[348,82,271,82],[348,83,271,83],[349,10,272,8],[350,8,273,4],[350,9,273,5],[351,8,273,5],[351,17,273,5,"prepareToRecordAsync"],[351,38,273,5],[352,10,273,5],[352,17,273,5,"_prepareToRecordAsync"],[352,38,273,5],[352,39,273,5,"apply"],[352,44,273,5],[352,51,273,5,"arguments"],[352,60,273,5],[353,8,273,5],[354,8,273,5],[354,15,273,5,"prepareToRecordAsync"],[354,35,273,5],[355,6,273,5],[356,6,274,4],[357,0,275,0],[358,0,276,0],[359,0,277,0],[360,4,274,4],[361,6,274,4,"key"],[361,9,274,4],[362,6,274,4,"value"],[362,11,274,4],[363,8,274,4],[363,12,274,4,"_getAvailableInputs"],[363,31,274,4],[363,38,274,4,"_asyncToGenerator2"],[363,56,274,4],[363,57,274,4,"default"],[363,64,274,4],[363,66,278,4],[363,79,278,31],[364,10,279,8],[364,17,279,15,"ExponentAV"],[364,36,279,25],[364,37,279,26,"getAvailableInputs"],[364,55,279,44],[364,56,279,45],[364,57,279,46],[365,8,280,4],[365,9,280,5],[366,8,280,5],[366,17,280,5,"getAvailableInputs"],[366,36,280,5],[367,10,280,5],[367,17,280,5,"_getAvailableInputs"],[367,36,280,5],[367,37,280,5,"apply"],[367,42,280,5],[367,49,280,5,"arguments"],[367,58,280,5],[368,8,280,5],[369,8,280,5],[369,15,280,5,"getAvailableInputs"],[369,33,280,5],[370,6,280,5],[371,6,281,4],[372,0,282,0],[373,0,283,0],[374,0,284,0],[375,4,281,4],[376,6,281,4,"key"],[376,9,281,4],[377,6,281,4,"value"],[377,11,281,4],[378,8,281,4],[378,12,281,4,"_getCurrentInput"],[378,28,281,4],[378,35,281,4,"_asyncToGenerator2"],[378,53,281,4],[378,54,281,4,"default"],[378,61,281,4],[378,63,285,4],[378,76,285,28],[379,10,286,8],[379,17,286,15,"ExponentAV"],[379,36,286,25],[379,37,286,26,"getCurrentInput"],[379,52,286,41],[379,53,286,42],[379,54,286,43],[380,8,287,4],[380,9,287,5],[381,8,287,5],[381,17,287,5,"getCurrentInput"],[381,33,287,5],[382,10,287,5],[382,17,287,5,"_getCurrentInput"],[382,33,287,5],[382,34,287,5,"apply"],[382,39,287,5],[382,46,287,5,"arguments"],[382,55,287,5],[383,8,287,5],[384,8,287,5],[384,15,287,5,"getCurrentInput"],[384,30,287,5],[385,6,287,5],[386,6,288,4],[387,0,289,0],[388,0,290,0],[389,0,291,0],[390,0,292,0],[391,4,288,4],[392,6,288,4,"key"],[392,9,288,4],[393,6,288,4,"value"],[393,11,288,4],[394,8,288,4],[394,12,288,4,"_setInput"],[394,21,288,4],[394,28,288,4,"_asyncToGenerator2"],[394,46,288,4],[394,47,288,4,"default"],[394,54,288,4],[394,56,293,4],[394,67,293,19,"inputUid"],[394,75,293,27],[394,77,293,29],[395,10,294,8],[395,17,294,15,"ExponentAV"],[395,36,294,25],[395,37,294,26,"setInput"],[395,45,294,34],[395,46,294,35,"inputUid"],[395,54,294,43],[395,55,294,44],[396,8,295,4],[396,9,295,5],[397,8,295,5],[397,17,295,5,"setInput"],[397,26,295,5,"_x3"],[397,29,295,5],[398,10,295,5],[398,17,295,5,"_setInput"],[398,26,295,5],[398,27,295,5,"apply"],[398,32,295,5],[398,39,295,5,"arguments"],[398,48,295,5],[399,8,295,5],[400,8,295,5],[400,15,295,5,"setInput"],[400,23,295,5],[401,6,295,5],[402,6,296,4],[403,0,297,0],[404,0,298,0],[405,0,299,0],[406,0,300,0],[407,4,296,4],[408,6,296,4,"key"],[408,9,296,4],[409,6,296,4,"value"],[409,11,296,4],[410,8,296,4],[410,12,296,4,"_startAsync"],[410,23,296,4],[410,30,296,4,"_asyncToGenerator2"],[410,48,296,4],[410,49,296,4,"default"],[410,56,296,4],[410,58,301,4],[410,71,301,23],[411,10,302,8],[411,17,302,15],[411,21,302,19],[411,22,302,20,"_performOperationAndHandleStatusAsync"],[411,59,302,57],[411,60,302,58],[412,12,302,58],[412,19,302,64,"ExponentAV"],[412,38,302,74],[412,39,302,75,"startAudioRecording"],[412,58,302,94],[412,59,302,95],[412,60,302,96],[413,10,302,96],[413,12,302,97],[414,8,303,4],[414,9,303,5],[415,8,303,5],[415,17,303,5,"startAsync"],[415,28,303,5],[416,10,303,5],[416,17,303,5,"_startAsync"],[416,28,303,5],[416,29,303,5,"apply"],[416,34,303,5],[416,41,303,5,"arguments"],[416,50,303,5],[417,8,303,5],[418,8,303,5],[418,15,303,5,"startAsync"],[418,25,303,5],[419,6,303,5],[420,6,304,4],[421,0,305,0],[422,0,306,0],[423,0,307,0],[424,0,308,0],[425,0,309,0],[426,0,310,0],[427,0,311,0],[428,0,312,0],[429,4,304,4],[430,6,304,4,"key"],[430,9,304,4],[431,6,304,4,"value"],[431,11,304,4],[432,8,304,4],[432,12,304,4,"_pauseAsync"],[432,23,304,4],[432,30,304,4,"_asyncToGenerator2"],[432,48,304,4],[432,49,304,4,"default"],[432,56,304,4],[432,58,313,4],[432,71,313,23],[433,10,314,8],[433,17,314,15],[433,21,314,19],[433,22,314,20,"_performOperationAndHandleStatusAsync"],[433,59,314,57],[433,60,314,58],[434,12,314,58],[434,19,314,64,"ExponentAV"],[434,38,314,74],[434,39,314,75,"pauseAudioRecording"],[434,58,314,94],[434,59,314,95],[434,60,314,96],[435,10,314,96],[435,12,314,97],[436,8,315,4],[436,9,315,5],[437,8,315,5],[437,17,315,5,"pauseAsync"],[437,28,315,5],[438,10,315,5],[438,17,315,5,"_pauseAsync"],[438,28,315,5],[438,29,315,5,"apply"],[438,34,315,5],[438,41,315,5,"arguments"],[438,50,315,5],[439,8,315,5],[440,8,315,5],[440,15,315,5,"pauseAsync"],[440,25,315,5],[441,6,315,5],[442,6,316,4],[443,0,317,0],[444,0,318,0],[445,0,319,0],[446,0,320,0],[447,0,321,0],[448,0,322,0],[449,0,323,0],[450,0,324,0],[451,0,325,0],[452,0,326,0],[453,4,316,4],[454,6,316,4,"key"],[454,9,316,4],[455,6,316,4,"value"],[455,11,316,4],[456,8,316,4],[456,12,316,4,"_stopAndUnloadAsync"],[456,31,316,4],[456,38,316,4,"_asyncToGenerator2"],[456,56,316,4],[456,57,316,4,"default"],[456,64,316,4],[456,66,327,4],[456,79,327,31],[457,10,327,31],[457,14,327,31,"_stopResult"],[457,25,327,31],[458,10,328,8],[458,14,328,12],[458,15,328,13],[458,19,328,17],[458,20,328,18,"_canRecord"],[458,30,328,28],[458,32,328,30],[459,12,329,12],[459,16,329,16],[459,20,329,20],[459,21,329,21,"_isDoneRecording"],[459,37,329,37],[459,39,329,39],[460,14,330,16],[460,20,330,22],[460,24,330,26,"Error"],[460,29,330,31],[460,30,330,32],[460,89,330,91],[460,90,330,92],[461,12,331,12],[461,13,331,13],[461,19,332,17],[462,14,333,16],[462,20,333,22],[462,24,333,26,"Error"],[462,29,333,31],[462,30,333,32],[462,85,333,87],[462,86,333,88],[463,12,334,12],[464,10,335,8],[465,10,336,8],[466,10,337,8],[467,10,338,8],[467,14,338,12,"stopResult"],[467,24,338,22],[468,10,339,8],[468,14,339,12,"stopError"],[468,23,339,21],[469,10,340,8],[469,14,340,12],[470,12,341,12,"stopResult"],[470,22,341,22],[470,31,341,31,"ExponentAV"],[470,50,341,41],[470,51,341,42,"stopAudioRecording"],[470,69,341,60],[470,70,341,61],[470,71,341,62],[471,10,342,8],[471,11,342,9],[471,12,343,8],[471,19,343,15,"err"],[471,22,343,18],[471,24,343,20],[472,12,344,12,"stopError"],[472,21,344,21],[472,24,344,24,"err"],[472,27,344,27],[473,10,345,8],[474,10,346,8],[475,10,347,8],[475,14,347,12,"Platform"],[475,39,347,20],[475,40,347,21,"OS"],[475,42,347,23],[475,47,347,28],[475,52,347,33],[475,56,347,37],[475,58,347,37,"_stopResult"],[475,69,347,37],[475,72,347,37,"stopResult"],[475,82,347,47],[475,103,347,37,"_stopResult"],[475,114,347,37],[475,115,347,49,"uri"],[475,118,347,52],[475,124,347,57,"undefined"],[475,133,347,66],[475,135,347,68],[476,12,348,12],[476,16,348,16],[476,17,348,17,"_uri"],[476,21,348,21],[476,24,348,24,"stopResult"],[476,34,348,34],[476,35,348,35,"uri"],[476,38,348,38],[477,10,349,8],[478,10,350,8],[479,10,351,8],[479,16,351,14,"ExponentAV"],[479,35,351,24],[479,36,351,25,"unloadAudioRecorder"],[479,55,351,44],[479,56,351,45],[479,57,351,46],[480,10,352,8],[480,14,352,14,"status"],[480,20,352,20],[480,29,352,29],[480,33,352,33],[480,34,352,34,"_cleanupForUnloadedRecorder"],[480,61,352,61],[480,62,352,62,"stopResult"],[480,72,352,72],[480,73,352,73],[481,10,353,8],[481,17,353,15,"stopError"],[481,26,353,24],[481,29,353,27,"Promise"],[481,36,353,34],[481,37,353,35,"reject"],[481,43,353,41],[481,44,353,42,"stopError"],[481,53,353,51],[481,54,353,52],[481,57,353,55,"status"],[481,63,353,61],[482,8,354,4],[482,9,354,5],[483,8,354,5],[483,17,354,5,"stopAndUnloadAsync"],[483,36,354,5],[484,10,354,5],[484,17,354,5,"_stopAndUnloadAsync"],[484,36,354,5],[484,37,354,5,"apply"],[484,42,354,5],[484,49,354,5,"arguments"],[484,58,354,5],[485,8,354,5],[486,8,354,5],[486,15,354,5,"stopAndUnloadAsync"],[486,33,354,5],[487,6,354,5],[487,10,355,4],[488,6,356,4],[489,0,357,0],[490,0,358,0],[491,0,359,0],[492,0,360,0],[493,0,361,0],[494,4,356,4],[495,6,356,4,"key"],[495,9,356,4],[496,6,356,4,"value"],[496,11,356,4],[496,13,362,4],[496,22,362,4,"getURI"],[496,29,362,4],[496,31,362,13],[497,8,363,8],[497,15,363,15],[497,19,363,19],[497,20,363,20,"_uri"],[497,24,363,24],[498,6,364,4],[499,6,365,4],[500,0,366,0],[501,0,367,0],[502,4,365,4],[503,6,365,4,"key"],[503,9,365,4],[504,6,365,4,"value"],[504,11,365,4],[505,8,365,4],[505,12,365,4,"_createNewLoadedSound"],[505,33,365,4],[505,40,365,4,"_asyncToGenerator2"],[505,58,365,4],[505,59,365,4,"default"],[505,66,365,4],[505,68,368,4],[505,81,368,82],[506,10,368,82],[506,14,368,31,"initialStatus"],[506,27,368,44],[506,30,368,44,"arguments"],[506,39,368,44],[506,40,368,44,"length"],[506,46,368,44],[506,54,368,44,"arguments"],[506,63,368,44],[506,71,368,44,"undefined"],[506,80,368,44],[506,83,368,44,"arguments"],[506,92,368,44],[506,98,368,47],[506,99,368,48],[506,100,368,49],[507,10,368,49],[507,14,368,51,"onPlaybackStatusUpdate"],[507,36,368,73],[507,39,368,73,"arguments"],[507,48,368,73],[507,49,368,73,"length"],[507,55,368,73],[507,63,368,73,"arguments"],[507,72,368,73],[507,80,368,73,"undefined"],[507,89,368,73],[507,92,368,73,"arguments"],[507,101,368,73],[507,107,368,76],[507,111,368,80],[508,10,369,8,"console"],[508,17,369,15],[508,18,369,16,"warn"],[508,22,369,20],[508,23,369,22],[508,148,369,146],[508,149,369,147],[509,10,370,8],[509,17,370,15],[509,21,370,19],[509,22,370,20,"createNewLoadedSoundAsync"],[509,47,370,45],[509,48,370,46,"initialStatus"],[509,61,370,59],[509,63,370,61,"onPlaybackStatusUpdate"],[509,85,370,83],[509,86,370,84],[510,8,371,4],[510,9,371,5],[511,8,371,5],[511,17,371,5,"createNewLoadedSound"],[511,38,371,5],[512,10,371,5],[512,17,371,5,"_createNewLoadedSound"],[512,38,371,5],[512,39,371,5,"apply"],[512,44,371,5],[512,51,371,5,"arguments"],[512,60,371,5],[513,8,371,5],[514,8,371,5],[514,15,371,5,"createNewLoadedSound"],[514,35,371,5],[515,6,371,5],[516,6,372,4],[517,0,373,0],[518,0,374,0],[519,0,375,0],[520,0,376,0],[521,0,377,0],[522,0,378,0],[523,0,379,0],[524,0,380,0],[525,0,381,0],[526,0,382,0],[527,0,383,0],[528,4,372,4],[529,6,372,4,"key"],[529,9,372,4],[530,6,372,4,"value"],[530,11,372,4],[531,8,372,4],[531,12,372,4,"_createNewLoadedSoundAsync"],[531,38,372,4],[531,45,372,4,"_asyncToGenerator2"],[531,63,372,4],[531,64,372,4,"default"],[531,71,372,4],[531,73,384,4],[531,86,384,87],[532,10,384,87],[532,14,384,36,"initialStatus"],[532,27,384,49],[532,30,384,49,"arguments"],[532,39,384,49],[532,40,384,49,"length"],[532,46,384,49],[532,54,384,49,"arguments"],[532,63,384,49],[532,71,384,49,"undefined"],[532,80,384,49],[532,83,384,49,"arguments"],[532,92,384,49],[532,98,384,52],[532,99,384,53],[532,100,384,54],[533,10,384,54],[533,14,384,56,"onPlaybackStatusUpdate"],[533,36,384,78],[533,39,384,78,"arguments"],[533,48,384,78],[533,49,384,78,"length"],[533,55,384,78],[533,63,384,78,"arguments"],[533,72,384,78],[533,80,384,78,"undefined"],[533,89,384,78],[533,92,384,78,"arguments"],[533,101,384,78],[533,107,384,81],[533,111,384,85],[534,10,385,8],[534,14,385,12],[534,18,385,16],[534,19,385,17,"_uri"],[534,23,385,21],[534,27,385,25],[534,31,385,29],[534,35,385,33],[534,36,385,34],[534,40,385,38],[534,41,385,39,"_isDoneRecording"],[534,57,385,55],[534,59,385,57],[535,12,386,12],[535,18,386,18],[535,22,386,22,"Error"],[535,27,386,27],[535,28,386,28],[535,86,386,86],[535,87,386,87],[536,10,387,8],[537,10,388,8],[537,17,388,15,"Sound"],[537,29,388,20],[537,30,388,21,"createAsync"],[537,41,388,32],[538,10,389,8],[539,10,390,8],[540,12,390,10,"uri"],[540,15,390,13],[540,17,390,15],[540,21,390,19],[540,22,390,20,"_uri"],[541,10,390,25],[541,11,390,26],[541,13,390,28,"initialStatus"],[541,26,390,41],[541,28,390,43,"onPlaybackStatusUpdate"],[541,50,390,65],[541,52,390,67],[541,57,390,72],[541,58,390,73],[542,8,391,4],[542,9,391,5],[543,8,391,5],[543,17,391,5,"createNewLoadedSoundAsync"],[543,43,391,5],[544,10,391,5],[544,17,391,5,"_createNewLoadedSoundAsync"],[544,43,391,5],[544,44,391,5,"apply"],[544,49,391,5],[544,56,391,5,"arguments"],[544,65,391,5],[545,8,391,5],[546,8,391,5],[546,15,391,5,"createNewLoadedSoundAsync"],[546,40,391,5],[547,6,391,5],[548,4,391,5],[549,4,391,5],[549,11,391,5,"Recording"],[549,20,391,5],[550,2,391,5],[551,2,391,5,"_class"],[551,8,391,5],[551,11,62,13,"Recording"],[551,20,62,22],[552,2,62,13,"Recording"],[552,11,62,22],[552,12,160,11,"createAsync"],[552,23,160,22],[552,43,160,22,"_asyncToGenerator2"],[552,61,160,22],[552,62,160,22,"default"],[552,69,160,22],[552,71,160,25],[552,84,160,151],[553,4,160,151],[553,8,160,32,"options"],[553,15,160,39],[553,18,160,39,"arguments"],[553,27,160,39],[553,28,160,39,"length"],[553,34,160,39],[553,42,160,39,"arguments"],[553,51,160,39],[553,59,160,39,"undefined"],[553,68,160,39],[553,71,160,39,"arguments"],[553,80,160,39],[553,86,160,42,"RecordingOptionsPresets"],[553,129,160,65],[553,130,160,66,"LOW_QUALITY"],[553,141,160,77],[554,4,160,77],[554,8,160,79,"onRecordingStatusUpdate"],[554,31,160,102],[554,34,160,102,"arguments"],[554,43,160,102],[554,44,160,102,"length"],[554,50,160,102],[554,58,160,102,"arguments"],[554,67,160,102],[554,75,160,102,"undefined"],[554,84,160,102],[554,87,160,102,"arguments"],[554,96,160,102],[554,102,160,105],[554,106,160,109],[555,4,160,109],[555,8,160,111,"progressUpdateIntervalMillis"],[555,36,160,139],[555,39,160,139,"arguments"],[555,48,160,139],[555,49,160,139,"length"],[555,55,160,139],[555,63,160,139,"arguments"],[555,72,160,139],[555,80,160,139,"undefined"],[555,89,160,139],[555,92,160,139,"arguments"],[555,101,160,139],[555,107,160,142],[555,111,160,146],[556,4,161,8],[556,8,161,14,"recording"],[556,17,161,23],[556,20,161,26],[556,24,161,30,"Recording"],[556,30,161,39],[556,31,161,40],[556,32,161,41],[557,4,162,8],[557,8,162,12,"progressUpdateIntervalMillis"],[557,36,162,40],[557,38,162,42],[558,6,163,12,"recording"],[558,15,163,21],[558,16,163,22,"_progressUpdateIntervalMillis"],[558,45,163,51],[558,48,163,54,"progressUpdateIntervalMillis"],[558,76,163,82],[559,4,164,8],[560,4,165,8,"recording"],[560,13,165,17],[560,14,165,18,"setOnRecordingStatusUpdate"],[560,40,165,44],[560,41,165,45,"onRecordingStatusUpdate"],[560,64,165,68],[560,65,165,69],[561,4,166,8],[561,10,166,14,"recording"],[561,19,166,23],[561,20,166,24,"prepareToRecordAsync"],[561,40,166,44],[561,41,166,44,"_objectSpread"],[561,54,166,44],[561,55,166,44,"_objectSpread"],[561,68,166,44],[561,73,167,15,"options"],[561,80,167,22],[562,6,168,12,"keepAudioActiveHint"],[562,25,168,31],[562,27,168,33],[563,4,168,37],[563,6,169,9],[563,7,169,10],[564,4,170,8],[564,8,170,12],[565,6,171,12],[565,10,171,18,"status"],[565,16,171,24],[565,25,171,33,"recording"],[565,34,171,42],[565,35,171,43,"startAsync"],[565,45,171,53],[565,46,171,54],[565,47,171,55],[566,6,172,12],[566,13,172,19],[567,8,172,21,"recording"],[567,17,172,30],[567,19,172,21,"recording"],[567,28,172,30],[568,8,172,32,"status"],[568,14,172,38],[568,16,172,32,"status"],[569,6,172,39],[569,7,172,40],[570,4,173,8],[570,5,173,9],[570,6,174,8],[570,13,174,15,"err"],[570,16,174,18],[570,18,174,20],[571,6,175,12,"recording"],[571,15,175,21],[571,16,175,22,"stopAndUnloadAsync"],[571,34,175,40],[571,35,175,41],[571,36,175,42],[572,6,176,12],[572,12,176,18,"err"],[572,15,176,21],[573,4,177,8],[574,2,178,4],[574,3,178,5],[575,0,178,5]],"functionMap":{"names":["<global>","getPermissionsAsync","requestPermissionsAsync","Recording","_cleanupForUnloadedRecorder","_pollingLoop","_disablePolling","_enablePollingIfNecessaryAndPossible","_callOnRecordingStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","createAsync","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnRecordingStatusUpdate","setProgressUpdateInterval","prepareToRecordAsync","getAvailableInputs","getCurrentInput","setInput","startAsync","pauseAsync","stopAndUnloadAsync","getURI","createNewLoadedSound","createNewLoadedSoundAsync"],"mappings":"AAA;OCY;CDE;OEK;CFE;OGwC;kCCW;KDW;mBEC;KFU;IGC;KHK;IIC;KJK;IKC;KLI;IMC;KNU;yBOqC;KPkB;qBQM;8DCG,0CD;KRU;IUU;KVS;IWM;KXG;IYa;KZmC;IaK;KbE;IcK;KdE;IeM;KfE;IgBM;0DPC,sCO;KhBC;IiBU;0DRC,sCQ;KjBC;IkBY;KlB2B;ImBQ;KnBE;IoBI;KpBG;IqBa;KrBO;CHC"}},"type":"js/module"}]}