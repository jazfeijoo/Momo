{"dependencies":[{"name":"../../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":37,"index":37}}],"key":"llq4nuOBKCCL4A7IFpRswh14toM="}},{"name":"../node/Raw","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":14,"index":58},"end":{"line":2,"column":36,"index":80}}],"key":"pwJ/v5NyWKx2qhKMWl/B5f+eavQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var TYPE = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE;\n  var rawMode = _$$_REQUIRE(_dependencyMap[1], \"../node/Raw\").mode;\n  var COMMA = TYPE.Comma;\n  var WHITESPACE = TYPE.WhiteSpace;\n\n  // var( <ident> , <value>? )\n  module.exports = function () {\n    var children = this.createList();\n    this.scanner.skipSC();\n\n    // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\n    children.push(this.Identifier());\n    this.scanner.skipSC();\n    if (this.scanner.tokenType === COMMA) {\n      children.push(this.Operator());\n      var startIndex = this.scanner.tokenIndex;\n      var value = this.parseCustomProperty ? this.Value(null) : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false);\n      if (value.type === 'Value' && value.children.isEmpty()) {\n        for (var offset = startIndex - this.scanner.tokenIndex; offset <= 0; offset++) {\n          if (this.scanner.lookupType(offset) === WHITESPACE) {\n            value.children.appendData({\n              type: 'WhiteSpace',\n              loc: null,\n              value: ' '\n            });\n            break;\n          }\n        }\n      }\n      children.push(value);\n    }\n    return children;\n  };\n});","lineCount":35,"map":[[2,2,1,0],[2,6,1,4,"TYPE"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,25,1,18,"_dependencyMap"],[2,39,1,18],[2,61,1,36],[2,62,1,37],[2,63,1,38,"TYPE"],[2,67,1,42],[3,2,2,0],[3,6,2,4,"rawMode"],[3,13,2,11],[3,16,2,14,"require"],[3,27,2,21],[3,28,2,21,"_dependencyMap"],[3,42,2,21],[3,60,2,35],[3,61,2,36],[3,62,2,37,"mode"],[3,66,2,41],[4,2,4,0],[4,6,4,4,"COMMA"],[4,11,4,9],[4,14,4,12,"TYPE"],[4,18,4,16],[4,19,4,17,"Comma"],[4,24,4,22],[5,2,5,0],[5,6,5,4,"WHITESPACE"],[5,16,5,14],[5,19,5,17,"TYPE"],[5,23,5,21],[5,24,5,22,"WhiteSpace"],[5,34,5,32],[7,2,7,0],[8,2,8,0,"module"],[8,8,8,6],[8,9,8,7,"exports"],[8,16,8,14],[8,19,8,17],[8,31,8,28],[9,4,9,4],[9,8,9,8,"children"],[9,16,9,16],[9,19,9,19],[9,23,9,23],[9,24,9,24,"createList"],[9,34,9,34],[9,35,9,35],[9,36,9,36],[10,4,11,4],[10,8,11,8],[10,9,11,9,"scanner"],[10,16,11,16],[10,17,11,17,"skipSC"],[10,23,11,23],[10,24,11,24],[10,25,11,25],[12,4,13,4],[13,4,14,4,"children"],[13,12,14,12],[13,13,14,13,"push"],[13,17,14,17],[13,18,14,18],[13,22,14,22],[13,23,14,23,"Identifier"],[13,33,14,33],[13,34,14,34],[13,35,14,35],[13,36,14,36],[14,4,16,4],[14,8,16,8],[14,9,16,9,"scanner"],[14,16,16,16],[14,17,16,17,"skipSC"],[14,23,16,23],[14,24,16,24],[14,25,16,25],[15,4,18,4],[15,8,18,8],[15,12,18,12],[15,13,18,13,"scanner"],[15,20,18,20],[15,21,18,21,"tokenType"],[15,30,18,30],[15,35,18,35,"COMMA"],[15,40,18,40],[15,42,18,42],[16,6,19,8,"children"],[16,14,19,16],[16,15,19,17,"push"],[16,19,19,21],[16,20,19,22],[16,24,19,26],[16,25,19,27,"Operator"],[16,33,19,35],[16,34,19,36],[16,35,19,37],[16,36,19,38],[17,6,21,8],[17,10,21,14,"startIndex"],[17,20,21,24],[17,23,21,27],[17,27,21,31],[17,28,21,32,"scanner"],[17,35,21,39],[17,36,21,40,"tokenIndex"],[17,46,21,50],[18,6,22,8],[18,10,22,14,"value"],[18,15,22,19],[18,18,22,22],[18,22,22,26],[18,23,22,27,"parseCustomProperty"],[18,42,22,46],[18,45,23,14],[18,49,23,18],[18,50,23,19,"Value"],[18,55,23,24],[18,56,23,25],[18,60,23,29],[18,61,23,30],[18,64,24,14],[18,68,24,18],[18,69,24,19,"Raw"],[18,72,24,22],[18,73,24,23],[18,77,24,27],[18,78,24,28,"scanner"],[18,85,24,35],[18,86,24,36,"tokenIndex"],[18,96,24,46],[18,98,24,48,"rawMode"],[18,105,24,55],[18,106,24,56,"exclamationMarkOrSemicolon"],[18,132,24,82],[18,134,24,84],[18,139,24,89],[18,140,24,90],[19,6,26,8],[19,10,26,12,"value"],[19,15,26,17],[19,16,26,18,"type"],[19,20,26,22],[19,25,26,27],[19,32,26,34],[19,36,26,38,"value"],[19,41,26,43],[19,42,26,44,"children"],[19,50,26,52],[19,51,26,53,"isEmpty"],[19,58,26,60],[19,59,26,61],[19,60,26,62],[19,62,26,64],[20,8,27,12],[20,13,27,17],[20,17,27,21,"offset"],[20,23,27,27],[20,26,27,30,"startIndex"],[20,36,27,40],[20,39,27,43],[20,43,27,47],[20,44,27,48,"scanner"],[20,51,27,55],[20,52,27,56,"tokenIndex"],[20,62,27,66],[20,64,27,68,"offset"],[20,70,27,74],[20,74,27,78],[20,75,27,79],[20,77,27,81,"offset"],[20,83,27,87],[20,85,27,89],[20,87,27,91],[21,10,28,16],[21,14,28,20],[21,18,28,24],[21,19,28,25,"scanner"],[21,26,28,32],[21,27,28,33,"lookupType"],[21,37,28,43],[21,38,28,44,"offset"],[21,44,28,50],[21,45,28,51],[21,50,28,56,"WHITESPACE"],[21,60,28,66],[21,62,28,68],[22,12,29,20,"value"],[22,17,29,25],[22,18,29,26,"children"],[22,26,29,34],[22,27,29,35,"appendData"],[22,37,29,45],[22,38,29,46],[23,14,30,24,"type"],[23,18,30,28],[23,20,30,30],[23,32,30,42],[24,14,31,24,"loc"],[24,17,31,27],[24,19,31,29],[24,23,31,33],[25,14,32,24,"value"],[25,19,32,29],[25,21,32,31],[26,12,33,20],[26,13,33,21],[26,14,33,22],[27,12,34,20],[28,10,35,16],[29,8,36,12],[30,6,37,8],[31,6,39,8,"children"],[31,14,39,16],[31,15,39,17,"push"],[31,19,39,21],[31,20,39,22,"value"],[31,25,39,27],[31,26,39,28],[32,4,40,4],[33,4,42,4],[33,11,42,11,"children"],[33,19,42,19],[34,2,43,0],[34,3,43,1],[35,0,43,2]],"functionMap":{"names":["<global>","module.exports"],"mappings":"AAA;iBCO;CDmC"}},"type":"js/module"}]}