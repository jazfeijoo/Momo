{"dependencies":[{"name":"base64-js","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":15,"index":252},"end":{"line":13,"column":35,"index":272}}],"key":"WsVgY7Y3wTb44B4uSuqCo4p+2Ho="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var base64 = _$$_REQUIRE(_dependencyMap[0], \"base64-js\");\n  function binaryToBase64(data) {\n    if (data instanceof ArrayBuffer) {\n      // $FlowFixMe[reassign-const]\n      data = new Uint8Array(data);\n    }\n    if (data instanceof Uint8Array) {\n      return base64.fromByteArray(data);\n    }\n    if (!ArrayBuffer.isView(data)) {\n      throw new Error('data must be ArrayBuffer or typed array');\n    }\n    // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`\n    var _ref = data,\n      buffer = _ref.buffer,\n      byteOffset = _ref.byteOffset,\n      byteLength = _ref.byteLength;\n    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));\n  }\n  module.exports = binaryToBase64;\n});","lineCount":34,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,13,0],[14,6,13,6,"base64"],[14,12,13,12],[14,15,13,15,"require"],[14,26,13,22],[14,27,13,22,"_dependencyMap"],[14,41,13,22],[14,57,13,34],[14,58,13,35],[15,2,15,0],[15,11,15,9,"binaryToBase64"],[15,25,15,23,"binaryToBase64"],[15,26,15,24,"data"],[15,30,15,60],[15,32,15,70],[16,4,16,2],[16,8,16,6,"data"],[16,12,16,10],[16,24,16,22,"ArrayBuffer"],[16,35,16,33],[16,37,16,35],[17,6,17,4],[18,6,18,4,"data"],[18,10,18,8],[18,13,18,11],[18,17,18,15,"Uint8Array"],[18,27,18,25],[18,28,18,26,"data"],[18,32,18,30],[18,33,18,31],[19,4,19,2],[20,4,20,2],[20,8,20,6,"data"],[20,12,20,10],[20,24,20,22,"Uint8Array"],[20,34,20,32],[20,36,20,34],[21,6,21,4],[21,13,21,11,"base64"],[21,19,21,17],[21,20,21,18,"fromByteArray"],[21,33,21,31],[21,34,21,32,"data"],[21,38,21,36],[21,39,21,37],[22,4,22,2],[23,4,23,2],[23,8,23,6],[23,9,23,7,"ArrayBuffer"],[23,20,23,18],[23,21,23,19,"isView"],[23,27,23,25],[23,28,23,26,"data"],[23,32,23,30],[23,33,23,31],[23,35,23,33],[24,6,24,4],[24,12,24,10],[24,16,24,14,"Error"],[24,21,24,19],[24,22,24,20],[24,63,24,61],[24,64,24,62],[25,4,25,2],[26,4,26,2],[27,4,27,2],[27,8,27,2,"_ref"],[27,12,27,2],[27,15,27,45,"data"],[27,19,27,49],[28,6,27,9,"buffer"],[28,12,27,15],[28,15,27,15,"_ref"],[28,19,27,15],[28,20,27,9,"buffer"],[28,26,27,15],[29,6,27,17,"byteOffset"],[29,16,27,27],[29,19,27,27,"_ref"],[29,23,27,27],[29,24,27,17,"byteOffset"],[29,34,27,27],[30,6,27,29,"byteLength"],[30,16,27,39],[30,19,27,39,"_ref"],[30,23,27,39],[30,24,27,29,"byteLength"],[30,34,27,39],[31,4,28,2],[31,11,28,9,"base64"],[31,17,28,15],[31,18,28,16,"fromByteArray"],[31,31,28,29],[31,32,28,30],[31,36,28,34,"Uint8Array"],[31,46,28,44],[31,47,28,45,"buffer"],[31,53,28,51],[31,55,28,53,"byteOffset"],[31,65,28,63],[31,67,28,65,"byteLength"],[31,77,28,75],[31,78,28,76],[31,79,28,77],[32,2,29,0],[33,2,31,0,"module"],[33,8,31,6],[33,9,31,7,"exports"],[33,16,31,14],[33,19,31,17,"binaryToBase64"],[33,33,31,31],[34,0,31,32]],"functionMap":{"names":["<global>","binaryToBase64"],"mappings":"AAA;ACc;CDc"}},"type":"js/module"}]}