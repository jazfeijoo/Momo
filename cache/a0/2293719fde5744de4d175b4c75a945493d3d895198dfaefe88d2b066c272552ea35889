{"dependencies":[{"name":"./base64","data":{"asyncType":null,"locs":[{"start":{"line":38,"column":13,"index":1983},"end":{"line":38,"column":32,"index":2002}}],"key":"UwjwiDYQWpoCa6Fe7KdnyC9cJ3w="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* -*- Mode: js; js-indent-level: 2; -*- */\n  /*\n   * Copyright 2011 Mozilla Foundation and contributors\n   * Licensed under the New BSD license. See LICENSE or:\n   * http://opensource.org/licenses/BSD-3-Clause\n   *\n   * Based on the Base 64 VLQ implementation in Closure Compiler:\n   * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n   *\n   * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n   * Redistribution and use in source and binary forms, with or without\n   * modification, are permitted provided that the following conditions are\n   * met:\n   *\n   *  * Redistributions of source code must retain the above copyright\n   *    notice, this list of conditions and the following disclaimer.\n   *  * Redistributions in binary form must reproduce the above\n   *    copyright notice, this list of conditions and the following\n   *    disclaimer in the documentation and/or other materials provided\n   *    with the distribution.\n   *  * Neither the name of Google Inc. nor the names of its\n   *    contributors may be used to endorse or promote products derived\n   *    from this software without specific prior written permission.\n   *\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   */\n\n  var base64 = _$$_REQUIRE(_dependencyMap[0], \"./base64\");\n\n  // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n  // length quantities we use in the source map spec, the first bit is the sign,\n  // the next four bits are the actual value, and the 6th bit is the\n  // continuation bit. The continuation bit tells us whether there are more\n  // digits in this value following this digit.\n  //\n  //   Continuation\n  //   |    Sign\n  //   |    |\n  //   V    V\n  //   101011\n\n  var VLQ_BASE_SHIFT = 5;\n\n  // binary: 100000\n  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n  // binary: 011111\n  var VLQ_BASE_MASK = VLQ_BASE - 1;\n\n  // binary: 100000\n  var VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n  /**\n   * Converts from a two-complement value to a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n   */\n  function toVLQSigned(aValue) {\n    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n  }\n\n  /**\n   * Converts to a two-complement value from a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n   */\n  function fromVLQSigned(aValue) {\n    var isNegative = (aValue & 1) === 1;\n    var shifted = aValue >> 1;\n    return isNegative ? -shifted : shifted;\n  }\n\n  /**\n   * Returns the base 64 VLQ encoded value.\n   */\n  exports.encode = function base64VLQ_encode(aValue) {\n    var encoded = \"\";\n    var digit;\n    var vlq = toVLQSigned(aValue);\n    do {\n      digit = vlq & VLQ_BASE_MASK;\n      vlq >>>= VLQ_BASE_SHIFT;\n      if (vlq > 0) {\n        // There are still more digits in this value, so we must make sure the\n        // continuation bit is marked.\n        digit |= VLQ_CONTINUATION_BIT;\n      }\n      encoded += base64.encode(digit);\n    } while (vlq > 0);\n    return encoded;\n  };\n\n  /**\n   * Decodes the next base 64 VLQ value from the given string and returns the\n   * value and the rest of the string via the out parameter.\n   */\n  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n    var strLen = aStr.length;\n    var result = 0;\n    var shift = 0;\n    var continuation, digit;\n    do {\n      if (aIndex >= strLen) {\n        throw new Error(\"Expected more digits in base 64 VLQ value.\");\n      }\n      digit = base64.decode(aStr.charCodeAt(aIndex++));\n      if (digit === -1) {\n        throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n      }\n      continuation = !!(digit & VLQ_CONTINUATION_BIT);\n      digit &= VLQ_BASE_MASK;\n      result = result + (digit << shift);\n      shift += VLQ_BASE_SHIFT;\n    } while (continuation);\n    aOutParam.value = fromVLQSigned(result);\n    aOutParam.rest = aIndex;\n  };\n});","lineCount":131,"map":[[2,2,1,0],[3,2,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[39,2,38,0],[39,6,38,4,"base64"],[39,12,38,10],[39,15,38,13,"require"],[39,26,38,20],[39,27,38,20,"_dependencyMap"],[39,41,38,20],[39,56,38,31],[39,57,38,32],[41,2,40,0],[42,2,41,0],[43,2,42,0],[44,2,43,0],[45,2,44,0],[46,2,45,0],[47,2,46,0],[48,2,47,0],[49,2,48,0],[50,2,49,0],[51,2,50,0],[53,2,52,0],[53,6,52,4,"VLQ_BASE_SHIFT"],[53,20,52,18],[53,23,52,21],[53,24,52,22],[55,2,54,0],[56,2,55,0],[56,6,55,4,"VLQ_BASE"],[56,14,55,12],[56,17,55,15],[56,18,55,16],[56,22,55,20,"VLQ_BASE_SHIFT"],[56,36,55,34],[58,2,57,0],[59,2,58,0],[59,6,58,4,"VLQ_BASE_MASK"],[59,19,58,17],[59,22,58,20,"VLQ_BASE"],[59,30,58,28],[59,33,58,31],[59,34,58,32],[61,2,60,0],[62,2,61,0],[62,6,61,4,"VLQ_CONTINUATION_BIT"],[62,26,61,24],[62,29,61,27,"VLQ_BASE"],[62,37,61,35],[64,2,63,0],[65,0,64,0],[66,0,65,0],[67,0,66,0],[68,0,67,0],[69,0,68,0],[70,2,69,0],[70,11,69,9,"toVLQSigned"],[70,22,69,20,"toVLQSigned"],[70,23,69,21,"aValue"],[70,29,69,27],[70,31,69,29],[71,4,70,2],[71,11,70,9,"aValue"],[71,17,70,15],[71,20,70,18],[71,21,70,19],[71,24,71,6],[71,25,71,8],[71,26,71,9,"aValue"],[71,32,71,15],[71,36,71,20],[71,37,71,21],[71,41,71,25],[71,42,71,26],[71,45,72,6],[71,46,72,7,"aValue"],[71,52,72,13],[71,56,72,17],[71,57,72,18],[71,61,72,22],[71,62,72,23],[72,2,73,0],[74,2,75,0],[75,0,76,0],[76,0,77,0],[77,0,78,0],[78,0,79,0],[79,0,80,0],[80,2,81,0],[80,11,81,9,"fromVLQSigned"],[80,24,81,22,"fromVLQSigned"],[80,25,81,23,"aValue"],[80,31,81,29],[80,33,81,31],[81,4,82,2],[81,8,82,6,"isNegative"],[81,18,82,16],[81,21,82,19],[81,22,82,20,"aValue"],[81,28,82,26],[81,31,82,29],[81,32,82,30],[81,38,82,36],[81,39,82,37],[82,4,83,2],[82,8,83,6,"shifted"],[82,15,83,13],[82,18,83,16,"aValue"],[82,24,83,22],[82,28,83,26],[82,29,83,27],[83,4,84,2],[83,11,84,9,"isNegative"],[83,21,84,19],[83,24,85,6],[83,25,85,7,"shifted"],[83,32,85,14],[83,35,86,6,"shifted"],[83,42,86,13],[84,2,87,0],[86,2,89,0],[87,0,90,0],[88,0,91,0],[89,2,92,0,"exports"],[89,9,92,7],[89,10,92,8,"encode"],[89,16,92,14],[89,19,92,17],[89,28,92,26,"base64VLQ_encode"],[89,44,92,42,"base64VLQ_encode"],[89,45,92,43,"aValue"],[89,51,92,49],[89,53,92,51],[90,4,93,2],[90,8,93,6,"encoded"],[90,15,93,13],[90,18,93,16],[90,20,93,18],[91,4,94,2],[91,8,94,6,"digit"],[91,13,94,11],[92,4,96,2],[92,8,96,6,"vlq"],[92,11,96,9],[92,14,96,12,"toVLQSigned"],[92,25,96,23],[92,26,96,24,"aValue"],[92,32,96,30],[92,33,96,31],[93,4,98,2],[93,7,98,5],[94,6,99,4,"digit"],[94,11,99,9],[94,14,99,12,"vlq"],[94,17,99,15],[94,20,99,18,"VLQ_BASE_MASK"],[94,33,99,31],[95,6,100,4,"vlq"],[95,9,100,7],[95,15,100,13,"VLQ_BASE_SHIFT"],[95,29,100,27],[96,6,101,4],[96,10,101,8,"vlq"],[96,13,101,11],[96,16,101,14],[96,17,101,15],[96,19,101,17],[97,8,102,6],[98,8,103,6],[99,8,104,6,"digit"],[99,13,104,11],[99,17,104,15,"VLQ_CONTINUATION_BIT"],[99,37,104,35],[100,6,105,4],[101,6,106,4,"encoded"],[101,13,106,11],[101,17,106,15,"base64"],[101,23,106,21],[101,24,106,22,"encode"],[101,30,106,28],[101,31,106,29,"digit"],[101,36,106,34],[101,37,106,35],[102,4,107,2],[102,5,107,3],[102,13,107,11,"vlq"],[102,16,107,14],[102,19,107,17],[102,20,107,18],[103,4,109,2],[103,11,109,9,"encoded"],[103,18,109,16],[104,2,110,0],[104,3,110,1],[106,2,112,0],[107,0,113,0],[108,0,114,0],[109,0,115,0],[110,2,116,0,"exports"],[110,9,116,7],[110,10,116,8,"decode"],[110,16,116,14],[110,19,116,17],[110,28,116,26,"base64VLQ_decode"],[110,44,116,42,"base64VLQ_decode"],[110,45,116,43,"aStr"],[110,49,116,47],[110,51,116,49,"aIndex"],[110,57,116,55],[110,59,116,57,"aOutParam"],[110,68,116,66],[110,70,116,68],[111,4,117,2],[111,8,117,6,"strLen"],[111,14,117,12],[111,17,117,15,"aStr"],[111,21,117,19],[111,22,117,20,"length"],[111,28,117,26],[112,4,118,2],[112,8,118,6,"result"],[112,14,118,12],[112,17,118,15],[112,18,118,16],[113,4,119,2],[113,8,119,6,"shift"],[113,13,119,11],[113,16,119,14],[113,17,119,15],[114,4,120,2],[114,8,120,6,"continuation"],[114,20,120,18],[114,22,120,20,"digit"],[114,27,120,25],[115,4,122,2],[115,7,122,5],[116,6,123,4],[116,10,123,8,"aIndex"],[116,16,123,14],[116,20,123,18,"strLen"],[116,26,123,24],[116,28,123,26],[117,8,124,6],[117,14,124,12],[117,18,124,16,"Error"],[117,23,124,21],[117,24,124,22],[117,68,124,66],[117,69,124,67],[118,6,125,4],[119,6,127,4,"digit"],[119,11,127,9],[119,14,127,12,"base64"],[119,20,127,18],[119,21,127,19,"decode"],[119,27,127,25],[119,28,127,26,"aStr"],[119,32,127,30],[119,33,127,31,"charCodeAt"],[119,43,127,41],[119,44,127,42,"aIndex"],[119,50,127,48],[119,52,127,50],[119,53,127,51],[119,54,127,52],[120,6,128,4],[120,10,128,8,"digit"],[120,15,128,13],[120,20,128,18],[120,21,128,19],[120,22,128,20],[120,24,128,22],[121,8,129,6],[121,14,129,12],[121,18,129,16,"Error"],[121,23,129,21],[121,24,129,22],[121,48,129,46],[121,51,129,49,"aStr"],[121,55,129,53],[121,56,129,54,"charAt"],[121,62,129,60],[121,63,129,61,"aIndex"],[121,69,129,67],[121,72,129,70],[121,73,129,71],[121,74,129,72],[121,75,129,73],[122,6,130,4],[123,6,132,4,"continuation"],[123,18,132,16],[123,21,132,19],[123,22,132,20],[123,24,132,22,"digit"],[123,29,132,27],[123,32,132,30,"VLQ_CONTINUATION_BIT"],[123,52,132,50],[123,53,132,51],[124,6,133,4,"digit"],[124,11,133,9],[124,15,133,13,"VLQ_BASE_MASK"],[124,28,133,26],[125,6,134,4,"result"],[125,12,134,10],[125,15,134,13,"result"],[125,21,134,19],[125,25,134,23,"digit"],[125,30,134,28],[125,34,134,32,"shift"],[125,39,134,37],[125,40,134,38],[126,6,135,4,"shift"],[126,11,135,9],[126,15,135,13,"VLQ_BASE_SHIFT"],[126,29,135,27],[127,4,136,2],[127,5,136,3],[127,13,136,11,"continuation"],[127,25,136,23],[128,4,138,2,"aOutParam"],[128,13,138,11],[128,14,138,12,"value"],[128,19,138,17],[128,22,138,20,"fromVLQSigned"],[128,35,138,33],[128,36,138,34,"result"],[128,42,138,40],[128,43,138,41],[129,4,139,2,"aOutParam"],[129,13,139,11],[129,14,139,12,"rest"],[129,18,139,16],[129,21,139,19,"aIndex"],[129,27,139,25],[130,2,140,0],[130,3,140,1],[131,0,140,2]],"functionMap":{"names":["<global>","toVLQSigned","fromVLQSigned","base64VLQ_encode","base64VLQ_decode"],"mappings":"AAA;ACoE;CDI;AEQ;CFM;iBGK;CHkB;iBIM;CJwB"}},"type":"js/module"}]}