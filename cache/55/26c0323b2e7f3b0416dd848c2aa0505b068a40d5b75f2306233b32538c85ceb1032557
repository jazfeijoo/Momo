{"dependencies":[{"name":"domhandler","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":19,"index":210},"end":{"line":4,"column":40,"index":231}}],"key":"JhlTxQPoKjLr/Si5MjJ4YoDUcd0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.uniqueSort = exports.compareDocumentPosition = exports.DocumentPosition = exports.removeSubsets = void 0;\n  var domhandler_1 = _$$_REQUIRE(_dependencyMap[0], \"domhandler\");\n  /**\n   * Given an array of nodes, remove any member that is contained by another\n   * member.\n   *\n   * @category Helpers\n   * @param nodes Nodes to filter.\n   * @returns Remaining nodes that aren't contained by other nodes.\n   */\n  function removeSubsets(nodes) {\n    var idx = nodes.length;\n    /*\n     * Check if each node (or one of its ancestors) is already contained in the\n     * array.\n     */\n    while (--idx >= 0) {\n      var node = nodes[idx];\n      /*\n       * Remove the node if it is not unique.\n       * We are going through the array from the end, so we only\n       * have to check nodes that preceed the node under consideration in the array.\n       */\n      if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n        nodes.splice(idx, 1);\n        continue;\n      }\n      for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n        if (nodes.includes(ancestor)) {\n          nodes.splice(idx, 1);\n          break;\n        }\n      }\n    }\n    return nodes;\n  }\n  exports.removeSubsets = removeSubsets;\n  /**\n   * @category Helpers\n   * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}\n   */\n  var DocumentPosition;\n  (function (DocumentPosition) {\n    DocumentPosition[DocumentPosition[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n    DocumentPosition[DocumentPosition[\"PRECEDING\"] = 2] = \"PRECEDING\";\n    DocumentPosition[DocumentPosition[\"FOLLOWING\"] = 4] = \"FOLLOWING\";\n    DocumentPosition[DocumentPosition[\"CONTAINS\"] = 8] = \"CONTAINS\";\n    DocumentPosition[DocumentPosition[\"CONTAINED_BY\"] = 16] = \"CONTAINED_BY\";\n  })(DocumentPosition = exports.DocumentPosition || (exports.DocumentPosition = {}));\n  /**\n   * Compare the position of one node against another node in any other document,\n   * returning a bitmask with the values from {@link DocumentPosition}.\n   *\n   * Document order:\n   * > There is an ordering, document order, defined on all the nodes in the\n   * > document corresponding to the order in which the first character of the\n   * > XML representation of each node occurs in the XML representation of the\n   * > document after expansion of general entities. Thus, the document element\n   * > node will be the first node. Element nodes occur before their children.\n   * > Thus, document order orders element nodes in order of the occurrence of\n   * > their start-tag in the XML (after expansion of entities). The attribute\n   * > nodes of an element occur after the element and before its children. The\n   * > relative order of attribute nodes is implementation-dependent.\n   *\n   * Source:\n   * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n   *\n   * @category Helpers\n   * @param nodeA The first node to use in the comparison\n   * @param nodeB The second node to use in the comparison\n   * @returns A bitmask describing the input nodes' relative position.\n   *\n   * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n   * a description of these values.\n   */\n  function compareDocumentPosition(nodeA, nodeB) {\n    var aParents = [];\n    var bParents = [];\n    if (nodeA === nodeB) {\n      return 0;\n    }\n    var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;\n    while (current) {\n      aParents.unshift(current);\n      current = current.parent;\n    }\n    current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;\n    while (current) {\n      bParents.unshift(current);\n      current = current.parent;\n    }\n    var maxIdx = Math.min(aParents.length, bParents.length);\n    var idx = 0;\n    while (idx < maxIdx && aParents[idx] === bParents[idx]) {\n      idx++;\n    }\n    if (idx === 0) {\n      return DocumentPosition.DISCONNECTED;\n    }\n    var sharedParent = aParents[idx - 1];\n    var siblings = sharedParent.children;\n    var aSibling = aParents[idx];\n    var bSibling = bParents[idx];\n    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n      if (sharedParent === nodeB) {\n        return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;\n      }\n      return DocumentPosition.FOLLOWING;\n    }\n    if (sharedParent === nodeA) {\n      return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;\n    }\n    return DocumentPosition.PRECEDING;\n  }\n  exports.compareDocumentPosition = compareDocumentPosition;\n  /**\n   * Sort an array of nodes based on their relative position in the document,\n   * removing any duplicate nodes. If the array contains nodes that do not belong\n   * to the same document, sort order is unspecified.\n   *\n   * @category Helpers\n   * @param nodes Array of DOM nodes.\n   * @returns Collection of unique nodes, sorted in document order.\n   */\n  function uniqueSort(nodes) {\n    nodes = nodes.filter(function (node, i, arr) {\n      return !arr.includes(node, i + 1);\n    });\n    nodes.sort(function (a, b) {\n      var relative = compareDocumentPosition(a, b);\n      if (relative & DocumentPosition.PRECEDING) {\n        return -1;\n      } else if (relative & DocumentPosition.FOLLOWING) {\n        return 1;\n      }\n      return 0;\n    });\n    return nodes;\n  }\n  exports.uniqueSort = uniqueSort;\n});","lineCount":147,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"uniqueSort"],[7,20,3,18],[7,23,3,21,"exports"],[7,30,3,28],[7,31,3,29,"compareDocumentPosition"],[7,54,3,52],[7,57,3,55,"exports"],[7,64,3,62],[7,65,3,63,"DocumentPosition"],[7,81,3,79],[7,84,3,82,"exports"],[7,91,3,89],[7,92,3,90,"removeSubsets"],[7,105,3,103],[7,108,3,106],[7,113,3,111],[7,114,3,112],[8,2,4,0],[8,6,4,4,"domhandler_1"],[8,18,4,16],[8,21,4,19,"require"],[8,32,4,26],[8,33,4,26,"_dependencyMap"],[8,47,4,26],[8,64,4,39],[8,65,4,40],[9,2,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,2,13,0],[17,11,13,9,"removeSubsets"],[17,24,13,22,"removeSubsets"],[17,25,13,23,"nodes"],[17,30,13,28],[17,32,13,30],[18,4,14,4],[18,8,14,8,"idx"],[18,11,14,11],[18,14,14,14,"nodes"],[18,19,14,19],[18,20,14,20,"length"],[18,26,14,26],[19,4,15,4],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,4,19,4],[23,11,19,11],[23,13,19,13,"idx"],[23,16,19,16],[23,20,19,20],[23,21,19,21],[23,23,19,23],[24,6,20,8],[24,10,20,12,"node"],[24,14,20,16],[24,17,20,19,"nodes"],[24,22,20,24],[24,23,20,25,"idx"],[24,26,20,28],[24,27,20,29],[25,6,21,8],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,6,26,8],[30,10,26,12,"idx"],[30,13,26,15],[30,16,26,18],[30,17,26,19],[30,21,26,23,"nodes"],[30,26,26,28],[30,27,26,29,"lastIndexOf"],[30,38,26,40],[30,39,26,41,"node"],[30,43,26,45],[30,45,26,47,"idx"],[30,48,26,50],[30,51,26,53],[30,52,26,54],[30,53,26,55],[30,57,26,59],[30,58,26,60],[30,60,26,62],[31,8,27,12,"nodes"],[31,13,27,17],[31,14,27,18,"splice"],[31,20,27,24],[31,21,27,25,"idx"],[31,24,27,28],[31,26,27,30],[31,27,27,31],[31,28,27,32],[32,8,28,12],[33,6,29,8],[34,6,30,8],[34,11,30,13],[34,15,30,17,"ancestor"],[34,23,30,25],[34,26,30,28,"node"],[34,30,30,32],[34,31,30,33,"parent"],[34,37,30,39],[34,39,30,41,"ancestor"],[34,47,30,49],[34,49,30,51,"ancestor"],[34,57,30,59],[34,60,30,62,"ancestor"],[34,68,30,70],[34,69,30,71,"parent"],[34,75,30,77],[34,77,30,79],[35,8,31,12],[35,12,31,16,"nodes"],[35,17,31,21],[35,18,31,22,"includes"],[35,26,31,30],[35,27,31,31,"ancestor"],[35,35,31,39],[35,36,31,40],[35,38,31,42],[36,10,32,16,"nodes"],[36,15,32,21],[36,16,32,22,"splice"],[36,22,32,28],[36,23,32,29,"idx"],[36,26,32,32],[36,28,32,34],[36,29,32,35],[36,30,32,36],[37,10,33,16],[38,8,34,12],[39,6,35,8],[40,4,36,4],[41,4,37,4],[41,11,37,11,"nodes"],[41,16,37,16],[42,2,38,0],[43,2,39,0,"exports"],[43,9,39,7],[43,10,39,8,"removeSubsets"],[43,23,39,21],[43,26,39,24,"removeSubsets"],[43,39,39,37],[44,2,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,2,44,0],[48,6,44,4,"DocumentPosition"],[48,22,44,20],[49,2,45,0],[49,3,45,1],[49,13,45,11,"DocumentPosition"],[49,29,45,27],[49,31,45,29],[50,4,46,4,"DocumentPosition"],[50,20,46,20],[50,21,46,21,"DocumentPosition"],[50,37,46,37],[50,38,46,38],[50,52,46,52],[50,53,46,53],[50,56,46,56],[50,57,46,57],[50,58,46,58],[50,61,46,61],[50,75,46,75],[51,4,47,4,"DocumentPosition"],[51,20,47,20],[51,21,47,21,"DocumentPosition"],[51,37,47,37],[51,38,47,38],[51,49,47,49],[51,50,47,50],[51,53,47,53],[51,54,47,54],[51,55,47,55],[51,58,47,58],[51,69,47,69],[52,4,48,4,"DocumentPosition"],[52,20,48,20],[52,21,48,21,"DocumentPosition"],[52,37,48,37],[52,38,48,38],[52,49,48,49],[52,50,48,50],[52,53,48,53],[52,54,48,54],[52,55,48,55],[52,58,48,58],[52,69,48,69],[53,4,49,4,"DocumentPosition"],[53,20,49,20],[53,21,49,21,"DocumentPosition"],[53,37,49,37],[53,38,49,38],[53,48,49,48],[53,49,49,49],[53,52,49,52],[53,53,49,53],[53,54,49,54],[53,57,49,57],[53,67,49,67],[54,4,50,4,"DocumentPosition"],[54,20,50,20],[54,21,50,21,"DocumentPosition"],[54,37,50,37],[54,38,50,38],[54,52,50,52],[54,53,50,53],[54,56,50,56],[54,58,50,58],[54,59,50,59],[54,62,50,62],[54,76,50,76],[55,2,51,0],[55,3,51,1],[55,5,51,3,"DocumentPosition"],[55,21,51,19],[55,24,51,22,"exports"],[55,31,51,29],[55,32,51,30,"DocumentPosition"],[55,48,51,46],[55,53,51,51,"exports"],[55,60,51,58],[55,61,51,59,"DocumentPosition"],[55,77,51,75],[55,80,51,78],[55,81,51,79],[55,82,51,80],[55,83,51,81],[55,84,51,82],[56,2,52,0],[57,0,53,0],[58,0,54,0],[59,0,55,0],[60,0,56,0],[61,0,57,0],[62,0,58,0],[63,0,59,0],[64,0,60,0],[65,0,61,0],[66,0,62,0],[67,0,63,0],[68,0,64,0],[69,0,65,0],[70,0,66,0],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,0,70,0],[75,0,71,0],[76,0,72,0],[77,0,73,0],[78,0,74,0],[79,0,75,0],[80,0,76,0],[81,0,77,0],[82,2,78,0],[82,11,78,9,"compareDocumentPosition"],[82,34,78,32,"compareDocumentPosition"],[82,35,78,33,"nodeA"],[82,40,78,38],[82,42,78,40,"nodeB"],[82,47,78,45],[82,49,78,47],[83,4,79,4],[83,8,79,8,"aParents"],[83,16,79,16],[83,19,79,19],[83,21,79,21],[84,4,80,4],[84,8,80,8,"bParents"],[84,16,80,16],[84,19,80,19],[84,21,80,21],[85,4,81,4],[85,8,81,8,"nodeA"],[85,13,81,13],[85,18,81,18,"nodeB"],[85,23,81,23],[85,25,81,25],[86,6,82,8],[86,13,82,15],[86,14,82,16],[87,4,83,4],[88,4,84,4],[88,8,84,8,"current"],[88,15,84,15],[88,18,84,18],[88,19,84,19],[88,20,84,20],[88,22,84,22,"domhandler_1"],[88,34,84,34],[88,35,84,35,"hasChildren"],[88,46,84,46],[88,48,84,48,"nodeA"],[88,53,84,53],[88,54,84,54],[88,57,84,57,"nodeA"],[88,62,84,62],[88,65,84,65,"nodeA"],[88,70,84,70],[88,71,84,71,"parent"],[88,77,84,77],[89,4,85,4],[89,11,85,11,"current"],[89,18,85,18],[89,20,85,20],[90,6,86,8,"aParents"],[90,14,86,16],[90,15,86,17,"unshift"],[90,22,86,24],[90,23,86,25,"current"],[90,30,86,32],[90,31,86,33],[91,6,87,8,"current"],[91,13,87,15],[91,16,87,18,"current"],[91,23,87,25],[91,24,87,26,"parent"],[91,30,87,32],[92,4,88,4],[93,4,89,4,"current"],[93,11,89,11],[93,14,89,14],[93,15,89,15],[93,16,89,16],[93,18,89,18,"domhandler_1"],[93,30,89,30],[93,31,89,31,"hasChildren"],[93,42,89,42],[93,44,89,44,"nodeB"],[93,49,89,49],[93,50,89,50],[93,53,89,53,"nodeB"],[93,58,89,58],[93,61,89,61,"nodeB"],[93,66,89,66],[93,67,89,67,"parent"],[93,73,89,73],[94,4,90,4],[94,11,90,11,"current"],[94,18,90,18],[94,20,90,20],[95,6,91,8,"bParents"],[95,14,91,16],[95,15,91,17,"unshift"],[95,22,91,24],[95,23,91,25,"current"],[95,30,91,32],[95,31,91,33],[96,6,92,8,"current"],[96,13,92,15],[96,16,92,18,"current"],[96,23,92,25],[96,24,92,26,"parent"],[96,30,92,32],[97,4,93,4],[98,4,94,4],[98,8,94,8,"maxIdx"],[98,14,94,14],[98,17,94,17,"Math"],[98,21,94,21],[98,22,94,22,"min"],[98,25,94,25],[98,26,94,26,"aParents"],[98,34,94,34],[98,35,94,35,"length"],[98,41,94,41],[98,43,94,43,"bParents"],[98,51,94,51],[98,52,94,52,"length"],[98,58,94,58],[98,59,94,59],[99,4,95,4],[99,8,95,8,"idx"],[99,11,95,11],[99,14,95,14],[99,15,95,15],[100,4,96,4],[100,11,96,11,"idx"],[100,14,96,14],[100,17,96,17,"maxIdx"],[100,23,96,23],[100,27,96,27,"aParents"],[100,35,96,35],[100,36,96,36,"idx"],[100,39,96,39],[100,40,96,40],[100,45,96,45,"bParents"],[100,53,96,53],[100,54,96,54,"idx"],[100,57,96,57],[100,58,96,58],[100,60,96,60],[101,6,97,8,"idx"],[101,9,97,11],[101,11,97,13],[102,4,98,4],[103,4,99,4],[103,8,99,8,"idx"],[103,11,99,11],[103,16,99,16],[103,17,99,17],[103,19,99,19],[104,6,100,8],[104,13,100,15,"DocumentPosition"],[104,29,100,31],[104,30,100,32,"DISCONNECTED"],[104,42,100,44],[105,4,101,4],[106,4,102,4],[106,8,102,8,"sharedParent"],[106,20,102,20],[106,23,102,23,"aParents"],[106,31,102,31],[106,32,102,32,"idx"],[106,35,102,35],[106,38,102,38],[106,39,102,39],[106,40,102,40],[107,4,103,4],[107,8,103,8,"siblings"],[107,16,103,16],[107,19,103,19,"sharedParent"],[107,31,103,31],[107,32,103,32,"children"],[107,40,103,40],[108,4,104,4],[108,8,104,8,"aSibling"],[108,16,104,16],[108,19,104,19,"aParents"],[108,27,104,27],[108,28,104,28,"idx"],[108,31,104,31],[108,32,104,32],[109,4,105,4],[109,8,105,8,"bSibling"],[109,16,105,16],[109,19,105,19,"bParents"],[109,27,105,27],[109,28,105,28,"idx"],[109,31,105,31],[109,32,105,32],[110,4,106,4],[110,8,106,8,"siblings"],[110,16,106,16],[110,17,106,17,"indexOf"],[110,24,106,24],[110,25,106,25,"aSibling"],[110,33,106,33],[110,34,106,34],[110,37,106,37,"siblings"],[110,45,106,45],[110,46,106,46,"indexOf"],[110,53,106,53],[110,54,106,54,"bSibling"],[110,62,106,62],[110,63,106,63],[110,65,106,65],[111,6,107,8],[111,10,107,12,"sharedParent"],[111,22,107,24],[111,27,107,29,"nodeB"],[111,32,107,34],[111,34,107,36],[112,8,108,12],[112,15,108,19,"DocumentPosition"],[112,31,108,35],[112,32,108,36,"FOLLOWING"],[112,41,108,45],[112,44,108,48,"DocumentPosition"],[112,60,108,64],[112,61,108,65,"CONTAINED_BY"],[112,73,108,77],[113,6,109,8],[114,6,110,8],[114,13,110,15,"DocumentPosition"],[114,29,110,31],[114,30,110,32,"FOLLOWING"],[114,39,110,41],[115,4,111,4],[116,4,112,4],[116,8,112,8,"sharedParent"],[116,20,112,20],[116,25,112,25,"nodeA"],[116,30,112,30],[116,32,112,32],[117,6,113,8],[117,13,113,15,"DocumentPosition"],[117,29,113,31],[117,30,113,32,"PRECEDING"],[117,39,113,41],[117,42,113,44,"DocumentPosition"],[117,58,113,60],[117,59,113,61,"CONTAINS"],[117,67,113,69],[118,4,114,4],[119,4,115,4],[119,11,115,11,"DocumentPosition"],[119,27,115,27],[119,28,115,28,"PRECEDING"],[119,37,115,37],[120,2,116,0],[121,2,117,0,"exports"],[121,9,117,7],[121,10,117,8,"compareDocumentPosition"],[121,33,117,31],[121,36,117,34,"compareDocumentPosition"],[121,59,117,57],[122,2,118,0],[123,0,119,0],[124,0,120,0],[125,0,121,0],[126,0,122,0],[127,0,123,0],[128,0,124,0],[129,0,125,0],[130,0,126,0],[131,2,127,0],[131,11,127,9,"uniqueSort"],[131,21,127,19,"uniqueSort"],[131,22,127,20,"nodes"],[131,27,127,25],[131,29,127,27],[132,4,128,4,"nodes"],[132,9,128,9],[132,12,128,12,"nodes"],[132,17,128,17],[132,18,128,18,"filter"],[132,24,128,24],[132,25,128,25],[132,35,128,35,"node"],[132,39,128,39],[132,41,128,41,"i"],[132,42,128,42],[132,44,128,44,"arr"],[132,47,128,47],[132,49,128,49],[133,6,128,51],[133,13,128,58],[133,14,128,59,"arr"],[133,17,128,62],[133,18,128,63,"includes"],[133,26,128,71],[133,27,128,72,"node"],[133,31,128,76],[133,33,128,78,"i"],[133,34,128,79],[133,37,128,82],[133,38,128,83],[133,39,128,84],[134,4,128,86],[134,5,128,87],[134,6,128,88],[135,4,129,4,"nodes"],[135,9,129,9],[135,10,129,10,"sort"],[135,14,129,14],[135,15,129,15],[135,25,129,25,"a"],[135,26,129,26],[135,28,129,28,"b"],[135,29,129,29],[135,31,129,31],[136,6,130,8],[136,10,130,12,"relative"],[136,18,130,20],[136,21,130,23,"compareDocumentPosition"],[136,44,130,46],[136,45,130,47,"a"],[136,46,130,48],[136,48,130,50,"b"],[136,49,130,51],[136,50,130,52],[137,6,131,8],[137,10,131,12,"relative"],[137,18,131,20],[137,21,131,23,"DocumentPosition"],[137,37,131,39],[137,38,131,40,"PRECEDING"],[137,47,131,49],[137,49,131,51],[138,8,132,12],[138,15,132,19],[138,16,132,20],[138,17,132,21],[139,6,133,8],[139,7,133,9],[139,13,134,13],[139,17,134,17,"relative"],[139,25,134,25],[139,28,134,28,"DocumentPosition"],[139,44,134,44],[139,45,134,45,"FOLLOWING"],[139,54,134,54],[139,56,134,56],[140,8,135,12],[140,15,135,19],[140,16,135,20],[141,6,136,8],[142,6,137,8],[142,13,137,15],[142,14,137,16],[143,4,138,4],[143,5,138,5],[143,6,138,6],[144,4,139,4],[144,11,139,11,"nodes"],[144,16,139,16],[145,2,140,0],[146,2,141,0,"exports"],[146,9,141,7],[146,10,141,8,"uniqueSort"],[146,20,141,18],[146,23,141,21,"uniqueSort"],[146,33,141,31],[147,0,141,32]],"functionMap":{"names":["<global>","removeSubsets","<anonymous>","compareDocumentPosition","uniqueSort","nodes.filter$argument_0","nodes.sort$argument_0"],"mappings":"AAA;ACY;CDyB;CEO;CFM;AG2B;CHsC;AIW;yBCC,8DD;eEC;KFS;CJE"}},"type":"js/module"}]}