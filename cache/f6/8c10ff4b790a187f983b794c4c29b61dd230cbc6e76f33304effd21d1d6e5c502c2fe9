{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":259,"column":0,"index":7664}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":259,"column":0,"index":7664}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.computeWindowedRenderLimits = computeWindowedRenderLimits;\n  exports.elementsThatOverlapOffsets = elementsThatOverlapOffsets;\n  exports.keyExtractor = keyExtractor;\n  exports.newRangeCount = newRangeCount;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  /**\n   * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n   * items that bound different windows of content, such as the visible area or the buffered overscan\n   * area.\n   */\n  function elementsThatOverlapOffsets(offsets, props, getFrameMetrics) {\n    var zoomScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    var itemCount = props.getItemCount(props.data);\n    var result = [];\n    for (var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {\n      var currentOffset = offsets[offsetIndex];\n      var left = 0;\n      var right = itemCount - 1;\n      while (left <= right) {\n        // eslint-disable-next-line no-bitwise\n        var mid = left + (right - left >>> 1);\n        var frame = getFrameMetrics(mid, props);\n        var scaledOffsetStart = frame.offset * zoomScale;\n        var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;\n\n        // We want the first frame that contains the offset, with inclusive bounds. Thus, for the\n        // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.\n        if (mid === 0 && currentOffset < scaledOffsetStart || mid !== 0 && currentOffset <= scaledOffsetStart) {\n          right = mid - 1;\n        } else if (currentOffset > scaledOffsetEnd) {\n          left = mid + 1;\n        } else {\n          result[offsetIndex] = mid;\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n   * Handy for calculating how many new items will be rendered when the render window changes so we\n   * can restrict the number of new items render at once so that content can appear on the screen\n   * faster.\n   */\n  function newRangeCount(prev, next) {\n    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n  }\n\n  /**\n   * Custom logic for determining which items should be rendered given the current frame and scroll\n   * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n   * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n   * biased in the direction of scroll.\n   */\n  function computeWindowedRenderLimits(props, maxToRenderPerBatch, windowSize, prev, getFrameMetricsApprox, scrollMetrics) {\n    var itemCount = props.getItemCount(props.data);\n    if (itemCount === 0) {\n      return {\n        first: 0,\n        last: -1\n      };\n    }\n    var offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength,\n      _scrollMetrics$zoomSc = scrollMetrics.zoomScale,\n      zoomScale = _scrollMetrics$zoomSc === void 0 ? 1 : _scrollMetrics$zoomSc;\n\n    // Start with visible area, then compute maximum overscan region by expanding from there, biased\n    // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n    // too.\n    var visibleBegin = Math.max(0, offset);\n    var visibleEnd = visibleBegin + visibleLength;\n    var overscanLength = (windowSize - 1) * visibleLength;\n\n    // Considering velocity seems to introduce more churn than it's worth.\n    var leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n    var lastItemOffset = getFrameMetricsApprox(itemCount - 1, props).offset * zoomScale;\n    if (lastItemOffset < overscanBegin) {\n      // Entire list is before our overscan window\n      return {\n        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n        last: itemCount - 1\n      };\n    }\n\n    // Find the indices that correspond to the items at the render boundaries we're targeting.\n    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props, getFrameMetricsApprox, zoomScale),\n      _elementsThatOverlapO2 = (0, _slicedToArray2.default)(_elementsThatOverlapO, 4),\n      overscanFirst = _elementsThatOverlapO2[0],\n      first = _elementsThatOverlapO2[1],\n      last = _elementsThatOverlapO2[2],\n      overscanLast = _elementsThatOverlapO2[3];\n    overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n    first = first == null ? Math.max(0, overscanFirst) : first;\n    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n    var visible = {\n      first: first,\n      last: last\n    };\n\n    // We want to limit the number of new cells we're rendering per batch so that we can fill the\n    // content on the screen quickly. If we rendered the entire overscan window at once, the user\n    // could be staring at white space for a long time waiting for a bunch of offscreen content to\n    // render.\n    var newCellCount = newRangeCount(prev, visible);\n    while (true) {\n      if (first <= overscanFirst && last >= overscanLast) {\n        // If we fill the entire overscan range, we're done.\n        break;\n      }\n      var maxNewCells = newCellCount >= maxToRenderPerBatch;\n      var firstWillAddMore = first <= prev.first || first > prev.last;\n      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n      var lastWillAddMore = last >= prev.last || last < prev.first;\n      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n        // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n        // without rendering new items. This let's us preserve as many already rendered items as\n        // possible, reducing render churn and keeping the rendered overscan range as large as\n        // possible.\n        break;\n      }\n      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n        if (firstWillAddMore) {\n          newCellCount++;\n        }\n        first--;\n      }\n      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n        if (lastWillAddMore) {\n          newCellCount++;\n        }\n        last++;\n      }\n    }\n    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n      throw new Error('Bad window calculation ' + JSON.stringify({\n        first: first,\n        last: last,\n        itemCount: itemCount,\n        overscanFirst: overscanFirst,\n        overscanLast: overscanLast,\n        visible: visible\n      }));\n    }\n    return {\n      first: first,\n      last: last\n    };\n  }\n  function keyExtractor(item, index) {\n    if (typeof item === 'object' && (item == null ? void 0 : item.key) != null) {\n      return item.key;\n    }\n    if (typeof item === 'object' && (item == null ? void 0 : item.id) != null) {\n      return item.id;\n    }\n    return String(index);\n  }\n});","lineCount":185,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_interopRequireDefault"],[14,28,11,13],[14,31,11,13,"_$$_REQUIRE"],[14,42,11,13],[14,43,11,13,"_dependencyMap"],[14,57,11,13],[15,2,11,13,"Object"],[15,8,11,13],[15,9,11,13,"defineProperty"],[15,23,11,13],[15,24,11,13,"exports"],[15,31,11,13],[16,4,11,13,"value"],[16,9,11,13],[17,2,11,13],[18,2,11,13,"exports"],[18,9,11,13],[18,10,11,13,"computeWindowedRenderLimits"],[18,37,11,13],[18,40,11,13,"computeWindowedRenderLimits"],[18,67,11,13],[19,2,11,13,"exports"],[19,9,11,13],[19,10,11,13,"elementsThatOverlapOffsets"],[19,36,11,13],[19,39,11,13,"elementsThatOverlapOffsets"],[19,65,11,13],[20,2,11,13,"exports"],[20,9,11,13],[20,10,11,13,"keyExtractor"],[20,22,11,13],[20,25,11,13,"keyExtractor"],[20,37,11,13],[21,2,11,13,"exports"],[21,9,11,13],[21,10,11,13,"newRangeCount"],[21,23,11,13],[21,26,11,13,"newRangeCount"],[21,39,11,13],[22,2,11,13],[22,6,11,13,"_slicedToArray2"],[22,21,11,13],[22,24,11,13,"_interopRequireDefault"],[22,46,11,13],[22,47,11,13,"_$$_REQUIRE"],[22,58,11,13],[22,59,11,13,"_dependencyMap"],[22,73,11,13],[23,2,15,0],[24,0,16,0],[25,0,17,0],[26,0,18,0],[27,0,19,0],[28,2,20,7],[28,11,20,16,"elementsThatOverlapOffsets"],[28,37,20,42,"elementsThatOverlapOffsets"],[28,38,21,2,"offsets"],[28,45,21,24],[28,47,22,2,"props"],[28,52,22,25],[28,54,23,2,"getFrameMetrics"],[28,69,30,3],[28,71,32,17],[29,4,32,17],[29,8,31,2,"zoomScale"],[29,17,31,19],[29,20,31,19,"arguments"],[29,29,31,19],[29,30,31,19,"length"],[29,36,31,19],[29,44,31,19,"arguments"],[29,53,31,19],[29,61,31,19,"undefined"],[29,70,31,19],[29,73,31,19,"arguments"],[29,82,31,19],[29,88,31,22],[29,89,31,23],[30,4,33,2],[30,8,33,8,"itemCount"],[30,17,33,17],[30,20,33,20,"props"],[30,25,33,25],[30,26,33,26,"getItemCount"],[30,38,33,38],[30,39,33,39,"props"],[30,44,33,44],[30,45,33,45,"data"],[30,49,33,49],[30,50,33,50],[31,4,34,2],[31,8,34,8,"result"],[31,14,34,14],[31,17,34,17],[31,19,34,19],[32,4,35,2],[32,9,35,7],[32,13,35,11,"offsetIndex"],[32,24,35,22],[32,27,35,25],[32,28,35,26],[32,30,35,28,"offsetIndex"],[32,41,35,39],[32,44,35,42,"offsets"],[32,51,35,49],[32,52,35,50,"length"],[32,58,35,56],[32,60,35,58,"offsetIndex"],[32,71,35,69],[32,73,35,71],[32,75,35,73],[33,6,36,4],[33,10,36,10,"currentOffset"],[33,23,36,23],[33,26,36,26,"offsets"],[33,33,36,33],[33,34,36,34,"offsetIndex"],[33,45,36,45],[33,46,36,46],[34,6,37,4],[34,10,37,8,"left"],[34,14,37,12],[34,17,37,15],[34,18,37,16],[35,6,38,4],[35,10,38,8,"right"],[35,15,38,13],[35,18,38,16,"itemCount"],[35,27,38,25],[35,30,38,28],[35,31,38,29],[36,6,40,4],[36,13,40,11,"left"],[36,17,40,15],[36,21,40,19,"right"],[36,26,40,24],[36,28,40,26],[37,8,41,6],[38,8,42,6],[38,12,42,12,"mid"],[38,15,42,15],[38,18,42,18,"left"],[38,22,42,22],[38,26,42,27,"right"],[38,31,42,32],[38,34,42,35,"left"],[38,38,42,39],[38,43,42,45],[38,44,42,46],[38,45,42,47],[39,8,43,6],[39,12,43,12,"frame"],[39,17,43,17],[39,20,43,20,"getFrameMetrics"],[39,35,43,35],[39,36,43,36,"mid"],[39,39,43,39],[39,41,43,41,"props"],[39,46,43,46],[39,47,43,47],[40,8,44,6],[40,12,44,12,"scaledOffsetStart"],[40,29,44,29],[40,32,44,32,"frame"],[40,37,44,37],[40,38,44,38,"offset"],[40,44,44,44],[40,47,44,47,"zoomScale"],[40,56,44,56],[41,8,45,6],[41,12,45,12,"scaledOffsetEnd"],[41,27,45,27],[41,30,45,30],[41,31,45,31,"frame"],[41,36,45,36],[41,37,45,37,"offset"],[41,43,45,43],[41,46,45,46,"frame"],[41,51,45,51],[41,52,45,52,"length"],[41,58,45,58],[41,62,45,62,"zoomScale"],[41,71,45,71],[43,8,47,6],[44,8,48,6],[45,8,49,6],[45,12,50,9,"mid"],[45,15,50,12],[45,20,50,17],[45,21,50,18],[45,25,50,22,"currentOffset"],[45,38,50,35],[45,41,50,38,"scaledOffsetStart"],[45,58,50,55],[45,62,51,9,"mid"],[45,65,51,12],[45,70,51,17],[45,71,51,18],[45,75,51,22,"currentOffset"],[45,88,51,35],[45,92,51,39,"scaledOffsetStart"],[45,109,51,57],[45,111,52,8],[46,10,53,8,"right"],[46,15,53,13],[46,18,53,16,"mid"],[46,21,53,19],[46,24,53,22],[46,25,53,23],[47,8,54,6],[47,9,54,7],[47,15,54,13],[47,19,54,17,"currentOffset"],[47,32,54,30],[47,35,54,33,"scaledOffsetEnd"],[47,50,54,48],[47,52,54,50],[48,10,55,8,"left"],[48,14,55,12],[48,17,55,15,"mid"],[48,20,55,18],[48,23,55,21],[48,24,55,22],[49,8,56,6],[49,9,56,7],[49,15,56,13],[50,10,57,8,"result"],[50,16,57,14],[50,17,57,15,"offsetIndex"],[50,28,57,26],[50,29,57,27],[50,32,57,30,"mid"],[50,35,57,33],[51,10,58,8],[52,8,59,6],[53,6,60,4],[54,4,61,2],[55,4,63,2],[55,11,63,9,"result"],[55,17,63,15],[56,2,64,0],[58,2,66,0],[59,0,67,0],[60,0,68,0],[61,0,69,0],[62,0,70,0],[63,0,71,0],[64,2,72,7],[64,11,72,16,"newRangeCount"],[64,24,72,29,"newRangeCount"],[64,25,73,2,"prev"],[64,29,77,3],[64,31,78,2,"next"],[64,35,82,3],[64,37,83,10],[65,4,84,2],[65,11,85,4,"next"],[65,15,85,8],[65,16,85,9,"last"],[65,20,85,13],[65,23,86,4,"next"],[65,27,86,8],[65,28,86,9,"first"],[65,33,86,14],[65,36,87,4],[65,37,87,5],[65,40,88,4,"Math"],[65,44,88,8],[65,45,88,9,"max"],[65,48,88,12],[65,49,89,6],[65,50,89,7],[65,52,90,6],[65,53,90,7],[65,56,90,10,"Math"],[65,60,90,14],[65,61,90,15,"min"],[65,64,90,18],[65,65,90,19,"next"],[65,69,90,23],[65,70,90,24,"last"],[65,74,90,28],[65,76,90,30,"prev"],[65,80,90,34],[65,81,90,35,"last"],[65,85,90,39],[65,86,90,40],[65,89,90,43,"Math"],[65,93,90,47],[65,94,90,48,"max"],[65,97,90,51],[65,98,90,52,"next"],[65,102,90,56],[65,103,90,57,"first"],[65,108,90,62],[65,110,90,64,"prev"],[65,114,90,68],[65,115,90,69,"first"],[65,120,90,74],[65,121,91,4],[65,122,91,5],[66,2,93,0],[68,2,95,0],[69,0,96,0],[70,0,97,0],[71,0,98,0],[72,0,99,0],[73,0,100,0],[74,2,101,7],[74,11,101,16,"computeWindowedRenderLimits"],[74,38,101,43,"computeWindowedRenderLimits"],[74,39,102,2,"props"],[74,44,102,25],[74,46,103,2,"maxToRenderPerBatch"],[74,65,103,29],[74,67,104,2,"windowSize"],[74,77,104,20],[74,79,105,2,"prev"],[74,83,108,3],[74,85,109,2,"getFrameMetricsApprox"],[74,106,116,3],[74,108,117,2,"scrollMetrics"],[74,121,124,3],[74,123,128,2],[75,4,129,2],[75,8,129,8,"itemCount"],[75,17,129,17],[75,20,129,20,"props"],[75,25,129,25],[75,26,129,26,"getItemCount"],[75,38,129,38],[75,39,129,39,"props"],[75,44,129,44],[75,45,129,45,"data"],[75,49,129,49],[75,50,129,50],[76,4,130,2],[76,8,130,6,"itemCount"],[76,17,130,15],[76,22,130,20],[76,23,130,21],[76,25,130,23],[77,6,131,4],[77,13,131,11],[78,8,131,12,"first"],[78,13,131,17],[78,15,131,19],[78,16,131,20],[79,8,131,22,"last"],[79,12,131,26],[79,14,131,28],[79,15,131,29],[80,6,131,30],[80,7,131,31],[81,4,132,2],[82,4,133,2],[82,8,133,9,"offset"],[82,14,133,15],[82,17,133,59,"scrollMetrics"],[82,30,133,72],[82,31,133,9,"offset"],[82,37,133,15],[83,6,133,17,"velocity"],[83,14,133,25],[83,17,133,59,"scrollMetrics"],[83,30,133,72],[83,31,133,17,"velocity"],[83,39,133,25],[84,6,133,27,"visibleLength"],[84,19,133,40],[84,22,133,59,"scrollMetrics"],[84,35,133,72],[84,36,133,27,"visibleLength"],[84,49,133,40],[85,6,133,40,"_scrollMetrics$zoomSc"],[85,27,133,40],[85,30,133,59,"scrollMetrics"],[85,43,133,72],[85,44,133,42,"zoomScale"],[85,53,133,51],[86,6,133,42,"zoomScale"],[86,15,133,51],[86,18,133,51,"_scrollMetrics$zoomSc"],[86,39,133,51],[86,53,133,54],[86,54,133,55],[86,57,133,55,"_scrollMetrics$zoomSc"],[86,78,133,55],[88,4,135,2],[89,4,136,2],[90,4,137,2],[91,4,138,2],[91,8,138,8,"visibleBegin"],[91,20,138,20],[91,23,138,23,"Math"],[91,27,138,27],[91,28,138,28,"max"],[91,31,138,31],[91,32,138,32],[91,33,138,33],[91,35,138,35,"offset"],[91,41,138,41],[91,42,138,42],[92,4,139,2],[92,8,139,8,"visibleEnd"],[92,18,139,18],[92,21,139,21,"visibleBegin"],[92,33,139,33],[92,36,139,36,"visibleLength"],[92,49,139,49],[93,4,140,2],[93,8,140,8,"overscanLength"],[93,22,140,22],[93,25,140,25],[93,26,140,26,"windowSize"],[93,36,140,36],[93,39,140,39],[93,40,140,40],[93,44,140,44,"visibleLength"],[93,57,140,57],[95,4,142,2],[96,4,143,2],[96,8,143,8,"leadFactor"],[96,18,143,18],[96,21,143,21],[96,24,143,24],[96,25,143,25],[96,26,143,26],[98,4,145,2],[98,8,145,8,"fillPreference"],[98,22,145,22],[98,25,146,4,"velocity"],[98,33,146,12],[98,36,146,15],[98,37,146,16],[98,40,146,19],[98,47,146,26],[98,50,146,29,"velocity"],[98,58,146,37],[98,61,146,40],[98,62,146,41],[98,63,146,42],[98,66,146,45],[98,74,146,53],[98,77,146,56],[98,83,146,62],[99,4,148,2],[99,8,148,8,"overscanBegin"],[99,21,148,21],[99,24,148,24,"Math"],[99,28,148,28],[99,29,148,29,"max"],[99,32,148,32],[99,33,149,4],[99,34,149,5],[99,36,150,4,"visibleBegin"],[99,48,150,16],[99,51,150,19],[99,52,150,20],[99,53,150,21],[99,56,150,24,"leadFactor"],[99,66,150,34],[99,70,150,38,"overscanLength"],[99,84,151,2],[99,85,151,3],[100,4,152,2],[100,8,152,8,"overscanEnd"],[100,19,152,19],[100,22,152,22,"Math"],[100,26,152,26],[100,27,152,27,"max"],[100,30,152,30],[100,31,152,31],[100,32,152,32],[100,34,152,34,"visibleEnd"],[100,44,152,44],[100,47,152,47,"leadFactor"],[100,57,152,57],[100,60,152,60,"overscanLength"],[100,74,152,74],[100,75,152,75],[101,4,154,2],[101,8,154,8,"lastItemOffset"],[101,22,154,22],[101,25,155,4,"getFrameMetricsApprox"],[101,46,155,25],[101,47,155,26,"itemCount"],[101,56,155,35],[101,59,155,38],[101,60,155,39],[101,62,155,41,"props"],[101,67,155,46],[101,68,155,47],[101,69,155,48,"offset"],[101,75,155,54],[101,78,155,57,"zoomScale"],[101,87,155,66],[102,4,156,2],[102,8,156,6,"lastItemOffset"],[102,22,156,20],[102,25,156,23,"overscanBegin"],[102,38,156,36],[102,40,156,38],[103,6,157,4],[104,6,158,4],[104,13,158,11],[105,8,159,6,"first"],[105,13,159,11],[105,15,159,13,"Math"],[105,19,159,17],[105,20,159,18,"max"],[105,23,159,21],[105,24,159,22],[105,25,159,23],[105,27,159,25,"itemCount"],[105,36,159,34],[105,39,159,37],[105,40,159,38],[105,43,159,41,"maxToRenderPerBatch"],[105,62,159,60],[105,63,159,61],[106,8,160,6,"last"],[106,12,160,10],[106,14,160,12,"itemCount"],[106,23,160,21],[106,26,160,24],[107,6,161,4],[107,7,161,5],[108,4,162,2],[110,4,164,2],[111,4,165,2],[111,8,165,2,"_elementsThatOverlapO"],[111,29,165,2],[111,32,165,51,"elementsThatOverlapOffsets"],[111,58,165,77],[111,59,166,4],[111,60,166,5,"overscanBegin"],[111,73,166,18],[111,75,166,20,"visibleBegin"],[111,87,166,32],[111,89,166,34,"visibleEnd"],[111,99,166,44],[111,101,166,46,"overscanEnd"],[111,112,166,57],[111,113,166,58],[111,115,167,4,"props"],[111,120,167,9],[111,122,168,4,"getFrameMetricsApprox"],[111,143,168,25],[111,145,169,4,"zoomScale"],[111,154,170,2],[111,155,170,3],[112,6,170,3,"_elementsThatOverlapO2"],[112,28,170,3],[112,35,170,3,"_slicedToArray2"],[112,50,170,3],[112,51,170,3,"default"],[112,58,170,3],[112,60,170,3,"_elementsThatOverlapO"],[112,81,170,3],[113,6,165,7,"overscanFirst"],[113,19,165,20],[113,22,165,20,"_elementsThatOverlapO2"],[113,44,165,20],[114,6,165,22,"first"],[114,11,165,27],[114,14,165,27,"_elementsThatOverlapO2"],[114,36,165,27],[115,6,165,29,"last"],[115,10,165,33],[115,13,165,33,"_elementsThatOverlapO2"],[115,35,165,33],[116,6,165,35,"overscanLast"],[116,18,165,47],[116,21,165,47,"_elementsThatOverlapO2"],[116,43,165,47],[117,4,171,2,"overscanFirst"],[117,17,171,15],[117,20,171,18,"overscanFirst"],[117,33,171,31],[117,37,171,35],[117,41,171,39],[117,44,171,42],[117,45,171,43],[117,48,171,46,"overscanFirst"],[117,61,171,59],[118,4,172,2,"first"],[118,9,172,7],[118,12,172,10,"first"],[118,17,172,15],[118,21,172,19],[118,25,172,23],[118,28,172,26,"Math"],[118,32,172,30],[118,33,172,31,"max"],[118,36,172,34],[118,37,172,35],[118,38,172,36],[118,40,172,38,"overscanFirst"],[118,53,172,51],[118,54,172,52],[118,57,172,55,"first"],[118,62,172,60],[119,4,173,2,"overscanLast"],[119,16,173,14],[119,19,173,17,"overscanLast"],[119,31,173,29],[119,35,173,33],[119,39,173,37],[119,42,173,40,"itemCount"],[119,51,173,49],[119,54,173,52],[119,55,173,53],[119,58,173,56,"overscanLast"],[119,70,173,68],[120,4,174,2,"last"],[120,8,174,6],[120,11,175,4,"last"],[120,15,175,8],[120,19,175,12],[120,23,175,16],[120,26,176,8,"Math"],[120,30,176,12],[120,31,176,13,"min"],[120,34,176,16],[120,35,176,17,"overscanLast"],[120,47,176,29],[120,49,176,31,"first"],[120,54,176,36],[120,57,176,39,"maxToRenderPerBatch"],[120,76,176,58],[120,79,176,61],[120,80,176,62],[120,81,176,63],[120,84,177,8,"last"],[120,88,177,12],[121,4,178,2],[121,8,178,8,"visible"],[121,15,178,15],[121,18,178,18],[122,6,178,19,"first"],[122,11,178,24],[122,13,178,19,"first"],[122,18,178,24],[123,6,178,26,"last"],[123,10,178,30],[123,12,178,26,"last"],[124,4,178,30],[124,5,178,31],[126,4,180,2],[127,4,181,2],[128,4,182,2],[129,4,183,2],[130,4,184,2],[130,8,184,6,"newCellCount"],[130,20,184,18],[130,23,184,21,"newRangeCount"],[130,36,184,34],[130,37,184,35,"prev"],[130,41,184,39],[130,43,184,41,"visible"],[130,50,184,48],[130,51,184,49],[131,4,186,2],[131,11,186,9],[131,15,186,13],[131,17,186,15],[132,6,187,4],[132,10,187,8,"first"],[132,15,187,13],[132,19,187,17,"overscanFirst"],[132,32,187,30],[132,36,187,34,"last"],[132,40,187,38],[132,44,187,42,"overscanLast"],[132,56,187,54],[132,58,187,56],[133,8,188,6],[134,8,189,6],[135,6,190,4],[136,6,191,4],[136,10,191,10,"maxNewCells"],[136,21,191,21],[136,24,191,24,"newCellCount"],[136,36,191,36],[136,40,191,40,"maxToRenderPerBatch"],[136,59,191,59],[137,6,192,4],[137,10,192,10,"firstWillAddMore"],[137,26,192,26],[137,29,192,29,"first"],[137,34,192,34],[137,38,192,38,"prev"],[137,42,192,42],[137,43,192,43,"first"],[137,48,192,48],[137,52,192,52,"first"],[137,57,192,57],[137,60,192,60,"prev"],[137,64,192,64],[137,65,192,65,"last"],[137,69,192,69],[138,6,193,4],[138,10,193,10,"firstShouldIncrement"],[138,30,193,30],[138,33,194,6,"first"],[138,38,194,11],[138,41,194,14,"overscanFirst"],[138,54,194,27],[138,59,194,32],[138,60,194,33,"maxNewCells"],[138,71,194,44],[138,75,194,48],[138,76,194,49,"firstWillAddMore"],[138,92,194,65],[138,93,194,66],[139,6,195,4],[139,10,195,10,"lastWillAddMore"],[139,25,195,25],[139,28,195,28,"last"],[139,32,195,32],[139,36,195,36,"prev"],[139,40,195,40],[139,41,195,41,"last"],[139,45,195,45],[139,49,195,49,"last"],[139,53,195,53],[139,56,195,56,"prev"],[139,60,195,60],[139,61,195,61,"first"],[139,66,195,66],[140,6,196,4],[140,10,196,10,"lastShouldIncrement"],[140,29,196,29],[140,32,197,6,"last"],[140,36,197,10],[140,39,197,13,"overscanLast"],[140,51,197,25],[140,56,197,30],[140,57,197,31,"maxNewCells"],[140,68,197,42],[140,72,197,46],[140,73,197,47,"lastWillAddMore"],[140,88,197,62],[140,89,197,63],[141,6,198,4],[141,10,198,8,"maxNewCells"],[141,21,198,19],[141,25,198,23],[141,26,198,24,"firstShouldIncrement"],[141,46,198,44],[141,50,198,48],[141,51,198,49,"lastShouldIncrement"],[141,70,198,68],[141,72,198,70],[142,8,199,6],[143,8,200,6],[144,8,201,6],[145,8,202,6],[146,8,203,6],[147,6,204,4],[148,6,205,4],[148,10,206,6,"firstShouldIncrement"],[148,30,206,26],[148,34,207,6],[148,36,207,8,"fillPreference"],[148,50,207,22],[148,55,207,27],[148,62,207,34],[148,66,207,38,"lastShouldIncrement"],[148,85,207,57],[148,89,207,61,"lastWillAddMore"],[148,104,207,76],[148,105,207,77],[148,107,208,6],[149,8,209,6],[149,12,209,10,"firstWillAddMore"],[149,28,209,26],[149,30,209,28],[150,10,210,8,"newCellCount"],[150,22,210,20],[150,24,210,22],[151,8,211,6],[152,8,212,6,"first"],[152,13,212,11],[152,15,212,13],[153,6,213,4],[154,6,214,4],[154,10,215,6,"lastShouldIncrement"],[154,29,215,25],[154,33,216,6],[154,35,216,8,"fillPreference"],[154,49,216,22],[154,54,216,27],[154,62,216,35],[154,66,216,39,"firstShouldIncrement"],[154,86,216,59],[154,90,216,63,"firstWillAddMore"],[154,106,216,79],[154,107,216,80],[154,109,217,6],[155,8,218,6],[155,12,218,10,"lastWillAddMore"],[155,27,218,25],[155,29,218,27],[156,10,219,8,"newCellCount"],[156,22,219,20],[156,24,219,22],[157,8,220,6],[158,8,221,6,"last"],[158,12,221,10],[158,14,221,12],[159,6,222,4],[160,4,223,2],[161,4,224,2],[161,8,225,4],[161,10,226,6,"last"],[161,14,226,10],[161,18,226,14,"first"],[161,23,226,19],[161,27,227,6,"first"],[161,32,227,11],[161,36,227,15],[161,37,227,16],[161,41,228,6,"last"],[161,45,228,10],[161,48,228,13,"itemCount"],[161,57,228,22],[161,61,229,6,"first"],[161,66,229,11],[161,70,229,15,"overscanFirst"],[161,83,229,28],[161,87,230,6,"last"],[161,91,230,10],[161,95,230,14,"overscanLast"],[161,107,230,26],[161,111,231,6,"first"],[161,116,231,11],[161,120,231,15,"visible"],[161,127,231,22],[161,128,231,23,"first"],[161,133,231,28],[161,137,232,6,"last"],[161,141,232,10],[161,145,232,14,"visible"],[161,152,232,21],[161,153,232,22,"last"],[161,157,232,26],[161,158,233,5],[161,160,234,4],[162,6,235,4],[162,12,235,10],[162,16,235,14,"Error"],[162,21,235,19],[162,22,236,6],[162,47,236,31],[162,50,237,8,"JSON"],[162,54,237,12],[162,55,237,13,"stringify"],[162,64,237,22],[162,65,237,23],[163,8,238,10,"first"],[163,13,238,15],[163,15,238,10,"first"],[163,20,238,15],[164,8,239,10,"last"],[164,12,239,14],[164,14,239,10,"last"],[164,18,239,14],[165,8,240,10,"itemCount"],[165,17,240,19],[165,19,240,10,"itemCount"],[165,28,240,19],[166,8,241,10,"overscanFirst"],[166,21,241,23],[166,23,241,10,"overscanFirst"],[166,36,241,23],[167,8,242,10,"overscanLast"],[167,20,242,22],[167,22,242,10,"overscanLast"],[167,34,242,22],[168,8,243,10,"visible"],[168,15,243,17],[168,17,243,10,"visible"],[169,6,244,8],[169,7,244,9],[169,8,245,4],[169,9,245,5],[170,4,246,2],[171,4,247,2],[171,11,247,9],[172,6,247,10,"first"],[172,11,247,15],[172,13,247,10,"first"],[172,18,247,15],[173,6,247,17,"last"],[173,10,247,21],[173,12,247,17,"last"],[174,4,247,21],[174,5,247,22],[175,2,248,0],[176,2,250,7],[176,11,250,16,"keyExtractor"],[176,23,250,28,"keyExtractor"],[176,24,250,29,"item"],[176,28,250,38],[176,30,250,40,"index"],[176,35,250,53],[176,37,250,63],[177,4,251,2],[177,8,251,6],[177,15,251,13,"item"],[177,19,251,17],[177,24,251,22],[177,32,251,30],[177,36,251,34],[177,37,251,34,"item"],[177,41,251,38],[177,61,251,34,"item"],[177,65,251,38],[177,66,251,40,"key"],[177,69,251,43],[177,74,251,47],[177,78,251,51],[177,80,251,53],[178,6,252,4],[178,13,252,11,"item"],[178,17,252,15],[178,18,252,16,"key"],[178,21,252,19],[179,4,253,2],[180,4,254,2],[180,8,254,6],[180,15,254,13,"item"],[180,19,254,17],[180,24,254,22],[180,32,254,30],[180,36,254,34],[180,37,254,34,"item"],[180,41,254,38],[180,61,254,34,"item"],[180,65,254,38],[180,66,254,40,"id"],[180,68,254,42],[180,73,254,46],[180,77,254,50],[180,79,254,52],[181,6,255,4],[181,13,255,11,"item"],[181,17,255,15],[181,18,255,16,"id"],[181,20,255,18],[182,4,256,2],[183,4,257,2],[183,11,257,9,"String"],[183,17,257,15],[183,18,257,16,"index"],[183,23,257,21],[183,24,257,22],[184,2,258,0],[185,0,258,1]],"functionMap":{"names":["<global>","elementsThatOverlapOffsets","newRangeCount","computeWindowedRenderLimits","keyExtractor"],"mappings":"AAA;OCmB;CD4C;OEQ;CFqB;OGQ;CHmJ;OIE;CJQ"}},"type":"js/module"}]}