{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":165,"column":32,"index":7380}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":165,"column":32,"index":7380}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"expo-modules-core","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":68,"index":68}}],"key":"ka0FS6s7ZmvhJq+hEjGkLLrGpyo="}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":69},"end":{"line":2,"column":46,"index":115}}],"key":"KK+yT+oF8ktP56kCbQmPR1OEhiQ="}},{"name":"./Font.types","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":116},"end":{"line":3,"column":43,"index":159}}],"key":"K4Hyp3e8pgPTo4cphMtfc9wmlHI="}},{"name":"./FontLoader","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":160},"end":{"line":4,"column":114,"index":274}}],"key":"2OEhiAaqBQmRJPh1zT+UzMquCjU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function get() {\n      return _Font.FontDisplay;\n    }\n  });\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.processFontFamily = processFontFamily;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = _$$_REQUIRE(_dependencyMap[2], \"expo-modules-core\");\n  var _ExpoFontLoader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./ExpoFontLoader\"));\n  var _Font = _$$_REQUIRE(_dependencyMap[4], \"./Font.types\");\n  var _FontLoader = _$$_REQUIRE(_dependencyMap[5], \"./FontLoader\");\n  var loaded = {};\n  var loadPromises = {};\n  // @needsAudit\n  // note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n  /**\n   * Used to transform font family names to the scoped name. This does not need to\n   * be called in standalone or bare apps but it will return unscoped font family\n   * names if it is called in those contexts.\n   *\n   * @param fontFamily Name of font to process.\n   * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n   */\n  function processFontFamily(fontFamily) {\n    if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n      return fontFamily;\n    }\n    if (!isLoaded(fontFamily)) {\n      if (__DEV__) {\n        if (isLoading(fontFamily)) {\n          console.error(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);\n        } else {\n          console.error(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`);\n        }\n      }\n      return 'System';\n    }\n    return `ExpoFont-${(0, _FontLoader.getNativeFontName)(fontFamily)}`;\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    return fontFamily in loaded;\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in loadPromises;\n  }\n  // @needsAudit\n  /**\n   * Highly efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n   * style prop with React Native Text elements.\n   * @param source the font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(_x, _x2) {\n    return _loadAsync.apply(this, arguments);\n  }\n  function _loadAsync() {\n    _loadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, source) {\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (source) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(function (name) {\n          return loadFontInNamespaceAsync(name, fontMap[name]);\n        }));\n        return;\n      }\n      return yield loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n    });\n    return _loadAsync.apply(this, arguments);\n  }\n  function loadFontInNamespaceAsync(_x3, _x4) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      if (loaded[fontFamily]) {\n        return;\n      }\n      if (loadPromises.hasOwnProperty(fontFamily)) {\n        return loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          loaded[fontFamily] = true;\n        } finally {\n          delete loadPromises[fontFamily];\n        }\n      })();\n      yield loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);\n      }\n      for (var fontFamily of Object.keys(loaded)) {\n        delete loaded[fontFamily];\n      }\n      yield _ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x5, _x6) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {\n      if (!_ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(function (name) {\n          return unloadFontInNamespaceAsync(name, fontMap[name]);\n        }));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x7, _x8) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {\n      if (!loaded[fontFamily]) {\n        return;\n      } else {\n        delete loaded[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n      if (!nativeFontName) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      yield _ExpoFontLoader.default.unloadAsync(nativeFontName, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":211,"map":[[19,2,1,0],[19,6,1,0,"_expoModulesCore"],[19,22,1,0],[19,25,1,0,"_$$_REQUIRE"],[19,36,1,0],[19,37,1,0,"_dependencyMap"],[19,51,1,0],[20,2,2,0],[20,6,2,0,"_ExpoFontLoader"],[20,21,2,0],[20,24,2,0,"_interopRequireDefault"],[20,46,2,0],[20,47,2,0,"_$$_REQUIRE"],[20,58,2,0],[20,59,2,0,"_dependencyMap"],[20,73,2,0],[21,2,3,0],[21,6,3,0,"_Font"],[21,11,3,0],[21,14,3,0,"_$$_REQUIRE"],[21,25,3,0],[21,26,3,0,"_dependencyMap"],[21,40,3,0],[22,2,4,0],[22,6,4,0,"_FontLoader"],[22,17,4,0],[22,20,4,0,"_$$_REQUIRE"],[22,31,4,0],[22,32,4,0,"_dependencyMap"],[22,46,4,0],[23,2,5,0],[23,6,5,6,"loaded"],[23,12,5,12],[23,15,5,15],[23,16,5,16],[23,17,5,17],[24,2,6,0],[24,6,6,6,"loadPromises"],[24,18,6,18],[24,21,6,21],[24,22,6,22],[24,23,6,23],[25,2,7,0],[26,2,8,0],[27,2,9,0],[28,0,10,0],[29,0,11,0],[30,0,12,0],[31,0,13,0],[32,0,14,0],[33,0,15,0],[34,0,16,0],[35,2,17,7],[35,11,17,16,"processFontFamily"],[35,28,17,33,"processFontFamily"],[35,29,17,34,"fontFamily"],[35,39,17,44],[35,41,17,46],[36,4,18,4],[36,8,18,8],[36,9,18,9,"fontFamily"],[36,19,18,19],[36,23,18,23],[36,24,18,24],[36,28,18,24,"fontFamilyNeedsScoping"],[36,62,18,46],[36,64,18,47,"fontFamily"],[36,74,18,57],[36,75,18,58],[36,77,18,60],[37,6,19,8],[37,13,19,15,"fontFamily"],[37,23,19,25],[38,4,20,4],[39,4,21,4],[39,8,21,8],[39,9,21,9,"isLoaded"],[39,17,21,17],[39,18,21,18,"fontFamily"],[39,28,21,28],[39,29,21,29],[39,31,21,31],[40,6,22,8],[40,10,22,12,"__DEV__"],[40,17,22,19],[40,19,22,21],[41,8,23,12],[41,12,23,16,"isLoading"],[41,21,23,25],[41,22,23,26,"fontFamily"],[41,32,23,36],[41,33,23,37],[41,35,23,39],[42,10,24,16,"console"],[42,17,24,23],[42,18,24,24,"error"],[42,23,24,29],[42,24,24,31],[42,57,24,63,"fontFamily"],[42,67,24,74],[42,182,24,188],[42,183,24,189],[43,8,25,12],[43,9,25,13],[43,15,26,17],[44,10,27,16,"console"],[44,17,27,23],[44,18,27,24,"error"],[44,23,27,29],[44,24,27,31],[44,39,27,45,"fontFamily"],[44,49,27,56],[45,0,28,0],[46,0,29,0],[46,68,29,68],[46,69,29,69],[47,8,30,12],[48,6,31,8],[49,6,32,8],[49,13,32,15],[49,21,32,23],[50,4,33,4],[51,4,34,4],[51,11,34,12],[51,23,34,23],[51,27,34,23,"getNativeFontName"],[51,56,34,40],[51,58,34,41,"fontFamily"],[51,68,34,51],[51,69,34,53],[51,71,34,54],[52,2,35,0],[53,2,36,0],[54,2,37,0],[55,0,38,0],[56,0,39,0],[57,0,40,0],[58,0,41,0],[59,0,42,0],[60,2,43,7],[60,11,43,16,"isLoaded"],[60,19,43,24,"isLoaded"],[60,20,43,25,"fontFamily"],[60,30,43,35],[60,32,43,37],[61,4,44,4],[61,11,44,11,"fontFamily"],[61,21,44,21],[61,25,44,25,"loaded"],[61,31,44,31],[62,2,45,0],[63,2,46,0],[64,2,47,0],[65,0,48,0],[66,0,49,0],[67,0,50,0],[68,0,51,0],[69,0,52,0],[70,2,53,7],[70,11,53,16,"isLoading"],[70,20,53,25,"isLoading"],[70,21,53,26,"fontFamily"],[70,31,53,36],[70,33,53,38],[71,4,54,4],[71,11,54,11,"fontFamily"],[71,21,54,21],[71,25,54,25,"loadPromises"],[71,37,54,37],[72,2,55,0],[73,2,56,0],[74,2,57,0],[75,0,58,0],[76,0,59,0],[77,0,60,0],[78,0,61,0],[79,0,62,0],[80,0,63,0],[81,0,64,0],[82,0,65,0],[83,0,66,0],[84,0,67,0],[85,0,68,0],[86,2,57,0],[86,11,69,22,"loadAsync"],[86,20,69,31,"loadAsync"],[86,21,69,31,"_x"],[86,23,69,31],[86,25,69,31,"_x2"],[86,28,69,31],[87,4,69,31],[87,11,69,31,"_loadAsync"],[87,21,69,31],[87,22,69,31,"apply"],[87,27,69,31],[87,34,69,31,"arguments"],[87,43,69,31],[88,2,69,31],[89,2,69,31],[89,11,69,31,"_loadAsync"],[89,22,69,31],[90,4,69,31,"_loadAsync"],[90,14,69,31],[90,21,69,31,"_asyncToGenerator2"],[90,39,69,31],[90,40,69,31,"default"],[90,47,69,31],[90,49,69,7],[90,60,69,32,"fontFamilyOrFontMap"],[90,79,69,51],[90,81,69,53,"source"],[90,87,69,59],[90,89,69,61],[91,6,70,4],[91,10,70,8],[91,17,70,15,"fontFamilyOrFontMap"],[91,36,70,34],[91,41,70,39],[91,49,70,47],[91,51,70,49],[92,8,71,8],[92,12,71,12,"source"],[92,18,71,18],[92,20,71,20],[93,10,72,12],[93,16,72,18],[93,20,72,22,"CodedError"],[93,47,72,32],[93,48,72,34],[93,62,72,47],[93,64,72,50],[93,118,72,103,"source"],[93,124,72,110],[93,230,72,215],[93,231,72,216],[94,8,73,8],[95,8,74,8],[95,12,74,14,"fontMap"],[95,19,74,21],[95,22,74,24,"fontFamilyOrFontMap"],[95,41,74,43],[96,8,75,8],[96,12,75,14,"names"],[96,17,75,19],[96,20,75,22,"Object"],[96,26,75,28],[96,27,75,29,"keys"],[96,31,75,33],[96,32,75,34,"fontMap"],[96,39,75,41],[96,40,75,42],[97,8,76,8],[97,14,76,14,"Promise"],[97,21,76,21],[97,22,76,22,"all"],[97,25,76,25],[97,26,76,26,"names"],[97,31,76,31],[97,32,76,32,"map"],[97,35,76,35],[97,36,76,36],[97,46,76,37,"name"],[97,50,76,41],[98,10,76,41],[98,17,76,46,"loadFontInNamespaceAsync"],[98,41,76,70],[98,42,76,71,"name"],[98,46,76,75],[98,48,76,77,"fontMap"],[98,55,76,84],[98,56,76,85,"name"],[98,60,76,89],[98,61,76,90],[98,62,76,91],[99,8,76,91],[99,10,76,92],[99,11,76,93],[100,8,77,8],[101,6,78,4],[102,6,79,4],[102,19,79,17,"loadFontInNamespaceAsync"],[102,43,79,41],[102,44,79,42,"fontFamilyOrFontMap"],[102,63,79,61],[102,65,79,63,"source"],[102,71,79,69],[102,72,79,70],[103,4,80,0],[103,5,80,1],[104,4,80,1],[104,11,80,1,"_loadAsync"],[104,21,80,1],[104,22,80,1,"apply"],[104,27,80,1],[104,34,80,1,"arguments"],[104,43,80,1],[105,2,80,1],[106,2,80,1],[106,11,81,15,"loadFontInNamespaceAsync"],[106,35,81,39,"loadFontInNamespaceAsync"],[106,36,81,39,"_x3"],[106,39,81,39],[106,41,81,39,"_x4"],[106,44,81,39],[107,4,81,39],[107,11,81,39,"_loadFontInNamespaceAsync"],[107,36,81,39],[107,37,81,39,"apply"],[107,42,81,39],[107,49,81,39,"arguments"],[107,58,81,39],[108,2,81,39],[108,4,107,0],[109,2,108,0],[110,0,109,0],[111,0,110,0],[112,2,108,0],[112,11,108,0,"_loadFontInNamespaceAsync"],[112,37,108,0],[113,4,108,0,"_loadFontInNamespaceAsync"],[113,29,108,0],[113,36,108,0,"_asyncToGenerator2"],[113,54,108,0],[113,55,108,0,"default"],[113,62,108,0],[113,64,81,0],[113,75,81,40,"fontFamily"],[113,85,81,50],[113,87,81,52,"source"],[113,93,81,58],[113,95,81,60],[114,6,82,4],[114,10,82,8],[114,11,82,9,"source"],[114,17,82,15],[114,19,82,17],[115,8,83,8],[115,14,83,14],[115,18,83,18,"CodedError"],[115,45,83,28],[115,46,83,30],[115,63,83,46],[115,65,83,49],[115,114,83,97,"fontFamily"],[115,124,83,108],[115,130,83,113,"source"],[115,136,83,120],[115,206,83,189,"fontFamily"],[115,216,83,200],[115,219,83,202],[115,220,83,203],[116,6,84,4],[117,6,85,4],[117,10,85,8,"loaded"],[117,16,85,14],[117,17,85,15,"fontFamily"],[117,27,85,25],[117,28,85,26],[117,30,85,28],[118,8,86,8],[119,6,87,4],[120,6,88,4],[120,10,88,8,"loadPromises"],[120,22,88,20],[120,23,88,21,"hasOwnProperty"],[120,37,88,35],[120,38,88,36,"fontFamily"],[120,48,88,46],[120,49,88,47],[120,51,88,49],[121,8,89,8],[121,15,89,15,"loadPromises"],[121,27,89,27],[121,28,89,28,"fontFamily"],[121,38,89,38],[121,39,89,39],[122,6,90,4],[123,6,91,4],[124,6,92,4],[125,6,93,4],[126,6,94,4],[127,6,95,4],[127,10,95,10,"asset"],[127,15,95,15],[127,18,95,18],[127,22,95,18,"getAssetForSource"],[127,51,95,35],[127,53,95,36,"source"],[127,59,95,42],[127,60,95,43],[128,6,96,4,"loadPromises"],[128,18,96,16],[128,19,96,17,"fontFamily"],[128,29,96,27],[128,30,96,28],[128,33,96,31],[128,37,96,31,"_asyncToGenerator2"],[128,55,96,31],[128,56,96,31,"default"],[128,63,96,31],[128,65,96,32],[128,78,96,44],[129,8,97,8],[129,12,97,12],[130,10,98,12],[130,16,98,18],[130,20,98,18,"loadSingleFontAsync"],[130,51,98,37],[130,53,98,38,"fontFamily"],[130,63,98,48],[130,65,98,50,"asset"],[130,70,98,55],[130,71,98,56],[131,10,99,12,"loaded"],[131,16,99,18],[131,17,99,19,"fontFamily"],[131,27,99,29],[131,28,99,30],[131,31,99,33],[131,35,99,37],[132,8,100,8],[132,9,100,9],[132,18,101,16],[133,10,102,12],[133,17,102,19,"loadPromises"],[133,29,102,31],[133,30,102,32,"fontFamily"],[133,40,102,42],[133,41,102,43],[134,8,103,8],[135,6,104,4],[135,7,104,5],[135,9,104,7],[135,10,104,8],[136,6,105,4],[136,12,105,10,"loadPromises"],[136,24,105,22],[136,25,105,23,"fontFamily"],[136,35,105,33],[136,36,105,34],[137,4,106,0],[137,5,106,1],[138,4,106,1],[138,11,106,1,"_loadFontInNamespaceAsync"],[138,36,106,1],[138,37,106,1,"apply"],[138,42,106,1],[138,49,106,1,"arguments"],[138,58,106,1],[139,2,106,1],[140,2,106,1],[140,11,111,22,"unloadAllAsync"],[140,25,111,36,"unloadAllAsync"],[140,26,111,36],[141,4,111,36],[141,11,111,36,"_unloadAllAsync"],[141,26,111,36],[141,27,111,36,"apply"],[141,32,111,36],[141,39,111,36,"arguments"],[141,48,111,36],[142,2,111,36],[142,4,123,0],[143,2,124,0],[144,0,125,0],[145,0,126,0],[146,0,127,0],[147,0,128,0],[148,0,129,0],[149,0,130,0],[150,0,131,0],[151,2,124,0],[151,11,124,0,"_unloadAllAsync"],[151,27,124,0],[152,4,124,0,"_unloadAllAsync"],[152,19,124,0],[152,26,124,0,"_asyncToGenerator2"],[152,44,124,0],[152,45,124,0,"default"],[152,52,124,0],[152,54,111,7],[152,67,111,39],[153,6,112,4],[153,10,112,8],[153,11,112,9,"ExpoFontLoader"],[153,34,112,23],[153,35,112,24,"unloadAllAsync"],[153,49,112,38],[153,51,112,40],[154,8,113,8],[154,14,113,14],[154,18,113,18,"UnavailabilityError"],[154,54,113,37],[154,55,113,38],[154,66,113,49],[154,68,113,51],[154,84,113,67],[154,85,113,68],[155,6,114,4],[156,6,115,4],[156,10,115,8,"Object"],[156,16,115,14],[156,17,115,15,"keys"],[156,21,115,19],[156,22,115,20,"loadPromises"],[156,34,115,32],[156,35,115,33],[156,36,115,34,"length"],[156,42,115,40],[156,44,115,42],[157,8,116,8],[157,14,116,14],[157,18,116,18,"CodedError"],[157,45,116,28],[157,46,116,30],[157,58,116,41],[157,60,116,44],[157,112,116,95,"Object"],[157,118,116,101],[157,119,116,102,"keys"],[157,123,116,106],[157,124,116,107,"loadPromises"],[157,136,116,119],[157,137,116,120],[157,138,116,121,"join"],[157,142,116,125],[157,143,116,126],[157,147,116,130],[157,148,116,132],[157,150,116,133],[157,151,116,134],[158,6,117,4],[159,6,118,4],[159,11,118,9],[159,15,118,15,"fontFamily"],[159,25,118,25],[159,29,118,29,"Object"],[159,35,118,35],[159,36,118,36,"keys"],[159,40,118,40],[159,41,118,41,"loaded"],[159,47,118,47],[159,48,118,48],[159,50,118,50],[160,8,119,8],[160,15,119,15,"loaded"],[160,21,119,21],[160,22,119,22,"fontFamily"],[160,32,119,32],[160,33,119,33],[161,6,120,4],[162,6,121,4],[162,12,121,10,"ExpoFontLoader"],[162,35,121,24],[162,36,121,25,"unloadAllAsync"],[162,50,121,39],[162,51,121,40],[162,52,121,41],[163,4,122,0],[163,5,122,1],[164,4,122,1],[164,11,122,1,"_unloadAllAsync"],[164,26,122,1],[164,27,122,1,"apply"],[164,32,122,1],[164,39,122,1,"arguments"],[164,48,122,1],[165,2,122,1],[166,2,122,1],[166,11,132,22,"unloadAsync"],[166,22,132,33,"unloadAsync"],[166,23,132,33,"_x5"],[166,26,132,33],[166,28,132,33,"_x6"],[166,31,132,33],[167,4,132,33],[167,11,132,33,"_unloadAsync"],[167,23,132,33],[167,24,132,33,"apply"],[167,29,132,33],[167,36,132,33,"arguments"],[167,45,132,33],[168,2,132,33],[169,2,132,33],[169,11,132,33,"_unloadAsync"],[169,24,132,33],[170,4,132,33,"_unloadAsync"],[170,16,132,33],[170,23,132,33,"_asyncToGenerator2"],[170,41,132,33],[170,42,132,33,"default"],[170,49,132,33],[170,51,132,7],[170,62,132,34,"fontFamilyOrFontMap"],[170,81,132,53],[170,83,132,55,"options"],[170,90,132,62],[170,92,132,64],[171,6,133,4],[171,10,133,8],[171,11,133,9,"ExpoFontLoader"],[171,34,133,23],[171,35,133,24,"unloadAsync"],[171,46,133,35],[171,48,133,37],[172,8,134,8],[172,14,134,14],[172,18,134,18,"UnavailabilityError"],[172,54,134,37],[172,55,134,38],[172,66,134,49],[172,68,134,51],[172,81,134,64],[172,82,134,65],[173,6,135,4],[174,6,136,4],[174,10,136,8],[174,17,136,15,"fontFamilyOrFontMap"],[174,36,136,34],[174,41,136,39],[174,49,136,47],[174,51,136,49],[175,8,137,8],[175,12,137,12,"options"],[175,19,137,19],[175,21,137,21],[176,10,138,12],[176,16,138,18],[176,20,138,22,"CodedError"],[176,47,138,32],[176,48,138,34],[176,62,138,47],[176,64,138,50],[176,119,138,104,"options"],[176,126,138,112],[176,234,138,219],[176,235,138,220],[177,8,139,8],[178,8,140,8],[178,12,140,14,"fontMap"],[178,19,140,21],[178,22,140,24,"fontFamilyOrFontMap"],[178,41,140,43],[179,8,141,8],[179,12,141,14,"names"],[179,17,141,19],[179,20,141,22,"Object"],[179,26,141,28],[179,27,141,29,"keys"],[179,31,141,33],[179,32,141,34,"fontMap"],[179,39,141,41],[179,40,141,42],[180,8,142,8],[180,14,142,14,"Promise"],[180,21,142,21],[180,22,142,22,"all"],[180,25,142,25],[180,26,142,26,"names"],[180,31,142,31],[180,32,142,32,"map"],[180,35,142,35],[180,36,142,36],[180,46,142,37,"name"],[180,50,142,41],[181,10,142,41],[181,17,142,46,"unloadFontInNamespaceAsync"],[181,43,142,72],[181,44,142,73,"name"],[181,48,142,77],[181,50,142,79,"fontMap"],[181,57,142,86],[181,58,142,87,"name"],[181,62,142,91],[181,63,142,92],[181,64,142,93],[182,8,142,93],[182,10,142,94],[182,11,142,95],[183,8,143,8],[184,6,144,4],[185,6,145,4],[185,19,145,17,"unloadFontInNamespaceAsync"],[185,45,145,43],[185,46,145,44,"fontFamilyOrFontMap"],[185,65,145,63],[185,67,145,65,"options"],[185,74,145,72],[185,75,145,73],[186,4,146,0],[186,5,146,1],[187,4,146,1],[187,11,146,1,"_unloadAsync"],[187,23,146,1],[187,24,146,1,"apply"],[187,29,146,1],[187,36,146,1,"arguments"],[187,45,146,1],[188,2,146,1],[189,2,146,1],[189,11,147,15,"unloadFontInNamespaceAsync"],[189,37,147,41,"unloadFontInNamespaceAsync"],[189,38,147,41,"_x7"],[189,41,147,41],[189,43,147,41,"_x8"],[189,46,147,41],[190,4,147,41],[190,11,147,41,"_unloadFontInNamespaceAsync"],[190,38,147,41],[190,39,147,41,"apply"],[190,44,147,41],[190,51,147,41,"arguments"],[190,60,147,41],[191,2,147,41],[192,2,147,41],[192,11,147,41,"_unloadFontInNamespaceAsync"],[192,39,147,41],[193,4,147,41,"_unloadFontInNamespaceAsync"],[193,31,147,41],[193,38,147,41,"_asyncToGenerator2"],[193,56,147,41],[193,57,147,41,"default"],[193,64,147,41],[193,66,147,0],[193,77,147,42,"fontFamily"],[193,87,147,52],[193,89,147,54,"options"],[193,96,147,61],[193,98,147,63],[194,6,148,4],[194,10,148,8],[194,11,148,9,"loaded"],[194,17,148,15],[194,18,148,16,"fontFamily"],[194,28,148,26],[194,29,148,27],[194,31,148,29],[195,8,149,8],[196,6,150,4],[196,7,150,5],[196,13,151,9],[197,8,152,8],[197,15,152,15,"loaded"],[197,21,152,21],[197,22,152,22,"fontFamily"],[197,32,152,32],[197,33,152,33],[198,6,153,4],[199,6,154,4],[200,6,155,4],[201,6,156,4],[202,6,157,4],[203,6,158,4],[203,10,158,10,"nativeFontName"],[203,24,158,24],[203,27,158,27],[203,31,158,27,"getNativeFontName"],[203,60,158,44],[203,62,158,45,"fontFamily"],[203,72,158,55],[203,73,158,56],[204,6,159,4],[204,10,159,8],[204,11,159,9,"nativeFontName"],[204,25,159,23],[204,27,159,25],[205,8,160,8],[205,14,160,14],[205,18,160,18,"CodedError"],[205,45,160,28],[205,46,160,30],[205,63,160,46],[205,65,160,49],[205,94,160,77],[205,95,160,78],[206,6,161,4],[207,6,162,4],[207,12,162,10,"ExpoFontLoader"],[207,35,162,24],[207,36,162,25,"unloadAsync"],[207,47,162,36],[207,48,162,37,"nativeFontName"],[207,62,162,51],[207,64,162,53,"options"],[207,71,162,60],[207,72,162,61],[208,4,163,0],[208,5,163,1],[209,4,163,1],[209,11,163,1,"_unloadFontInNamespaceAsync"],[209,38,163,1],[209,39,163,1,"apply"],[209,44,163,1],[209,51,163,1,"arguments"],[209,60,163,1],[210,2,163,1],[211,0,163,1]],"functionMap":{"names":["<global>","processFontFamily","isLoaded","isLoading","loadAsync","names.map$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCgB;CDkB;OEQ;CFE;OGQ;CHE;OIc;oCCO,uDD;CJI;AMC;gCCe;KDQ;CNE;OQK;CRW;OSU;oCJU,yDI;CTI;AUC;CVgB"}},"type":"js/module"}]}