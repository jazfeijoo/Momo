{"dependencies":[{"name":"./util","data":{"asyncType":null,"locs":[{"start":{"line":8,"column":11,"index":219},"end":{"line":8,"column":28,"index":236}}],"key":"DQ+NnsvRW532iS20nr5BN5Yr8jw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* -*- Mode: js; js-indent-level: 2; -*- */\n  /*\n   * Copyright 2011 Mozilla Foundation and contributors\n   * Licensed under the New BSD license. See LICENSE or:\n   * http://opensource.org/licenses/BSD-3-Clause\n   */\n\n  var util = _$$_REQUIRE(_dependencyMap[0], \"./util\");\n  var has = Object.prototype.hasOwnProperty;\n  var hasNativeMap = typeof Map !== \"undefined\";\n\n  /**\n   * A data structure which is a combination of an array and a set. Adding a new\n   * member is O(1), testing for membership is O(1), and finding the index of an\n   * element is O(1). Removing elements from the set is not supported. Only\n   * strings are supported for membership.\n   */\n  function ArraySet() {\n    this._array = [];\n    this._set = hasNativeMap ? new Map() : Object.create(null);\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  };\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  ArraySet.prototype.size = function ArraySet_size() {\n    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n  };\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n    var idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      if (hasNativeMap) {\n        this._set.set(aStr, idx);\n      } else {\n        this._set[sStr] = idx;\n      }\n    }\n  };\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    if (hasNativeMap) {\n      return this._set.has(aStr);\n    } else {\n      var sStr = util.toSetString(aStr);\n      return has.call(this._set, sStr);\n    }\n  };\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (hasNativeMap) {\n      var idx = this._set.get(aStr);\n      if (idx >= 0) {\n        return idx;\n      }\n    } else {\n      var sStr = util.toSetString(aStr);\n      if (has.call(this._set, sStr)) {\n        return this._set[sStr];\n      }\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n  exports.ArraySet = ArraySet;\n});","lineCount":121,"map":[[2,2,1,0],[3,2,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[9,2,8,0],[9,6,8,4,"util"],[9,10,8,8],[9,13,8,11,"require"],[9,24,8,18],[9,25,8,18,"_dependencyMap"],[9,39,8,18],[9,52,8,27],[9,53,8,28],[10,2,9,0],[10,6,9,4,"has"],[10,9,9,7],[10,12,9,10,"Object"],[10,18,9,16],[10,19,9,17,"prototype"],[10,28,9,26],[10,29,9,27,"hasOwnProperty"],[10,43,9,41],[11,2,10,0],[11,6,10,4,"hasNativeMap"],[11,18,10,16],[11,21,10,19],[11,28,10,26,"Map"],[11,31,10,29],[11,36,10,34],[11,47,10,45],[13,2,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,2,18,0],[19,11,18,9,"ArraySet"],[19,19,18,17,"ArraySet"],[19,20,18,17],[19,22,18,20],[20,4,19,2],[20,8,19,6],[20,9,19,7,"_array"],[20,15,19,13],[20,18,19,16],[20,20,19,18],[21,4,20,2],[21,8,20,6],[21,9,20,7,"_set"],[21,13,20,11],[21,16,20,14,"hasNativeMap"],[21,28,20,26],[21,31,20,29],[21,35,20,33,"Map"],[21,38,20,36],[21,39,20,37],[21,40,20,38],[21,43,20,41,"Object"],[21,49,20,47],[21,50,20,48,"create"],[21,56,20,54],[21,57,20,55],[21,61,20,59],[21,62,20,60],[22,2,21,0],[24,2,23,0],[25,0,24,0],[26,0,25,0],[27,2,26,0,"ArraySet"],[27,10,26,8],[27,11,26,9,"fromArray"],[27,20,26,18],[27,23,26,21],[27,32,26,30,"ArraySet_fromArray"],[27,50,26,48,"ArraySet_fromArray"],[27,51,26,49,"aArray"],[27,57,26,55],[27,59,26,57,"aAllowDuplicates"],[27,75,26,73],[27,77,26,75],[28,4,27,2],[28,8,27,6,"set"],[28,11,27,9],[28,14,27,12],[28,18,27,16,"ArraySet"],[28,26,27,24],[28,27,27,25],[28,28,27,26],[29,4,28,2],[29,9,28,7],[29,13,28,11,"i"],[29,14,28,12],[29,17,28,15],[29,18,28,16],[29,20,28,18,"len"],[29,23,28,21],[29,26,28,24,"aArray"],[29,32,28,30],[29,33,28,31,"length"],[29,39,28,37],[29,41,28,39,"i"],[29,42,28,40],[29,45,28,43,"len"],[29,48,28,46],[29,50,28,48,"i"],[29,51,28,49],[29,53,28,51],[29,55,28,53],[30,6,29,4,"set"],[30,9,29,7],[30,10,29,8,"add"],[30,13,29,11],[30,14,29,12,"aArray"],[30,20,29,18],[30,21,29,19,"i"],[30,22,29,20],[30,23,29,21],[30,25,29,23,"aAllowDuplicates"],[30,41,29,39],[30,42,29,40],[31,4,30,2],[32,4,31,2],[32,11,31,9,"set"],[32,14,31,12],[33,2,32,0],[33,3,32,1],[35,2,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,2,40,0,"ArraySet"],[41,10,40,8],[41,11,40,9,"prototype"],[41,20,40,18],[41,21,40,19,"size"],[41,25,40,23],[41,28,40,26],[41,37,40,35,"ArraySet_size"],[41,50,40,48,"ArraySet_size"],[41,51,40,48],[41,53,40,51],[42,4,41,2],[42,11,41,9,"hasNativeMap"],[42,23,41,21],[42,26,41,24],[42,30,41,28],[42,31,41,29,"_set"],[42,35,41,33],[42,36,41,34,"size"],[42,40,41,38],[42,43,41,41,"Object"],[42,49,41,47],[42,50,41,48,"getOwnPropertyNames"],[42,69,41,67],[42,70,41,68],[42,74,41,72],[42,75,41,73,"_set"],[42,79,41,77],[42,80,41,78],[42,81,41,79,"length"],[42,87,41,85],[43,2,42,0],[43,3,42,1],[45,2,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,2,49,0,"ArraySet"],[50,10,49,8],[50,11,49,9,"prototype"],[50,20,49,18],[50,21,49,19,"add"],[50,24,49,22],[50,27,49,25],[50,36,49,34,"ArraySet_add"],[50,48,49,46,"ArraySet_add"],[50,49,49,47,"aStr"],[50,53,49,51],[50,55,49,53,"aAllowDuplicates"],[50,71,49,69],[50,73,49,71],[51,4,50,2],[51,8,50,6,"sStr"],[51,12,50,10],[51,15,50,13,"hasNativeMap"],[51,27,50,25],[51,30,50,28,"aStr"],[51,34,50,32],[51,37,50,35,"util"],[51,41,50,39],[51,42,50,40,"toSetString"],[51,53,50,51],[51,54,50,52,"aStr"],[51,58,50,56],[51,59,50,57],[52,4,51,2],[52,8,51,6,"isDuplicate"],[52,19,51,17],[52,22,51,20,"hasNativeMap"],[52,34,51,32],[52,37,51,35],[52,41,51,39],[52,42,51,40,"has"],[52,45,51,43],[52,46,51,44,"aStr"],[52,50,51,48],[52,51,51,49],[52,54,51,52,"has"],[52,57,51,55],[52,58,51,56,"call"],[52,62,51,60],[52,63,51,61],[52,67,51,65],[52,68,51,66,"_set"],[52,72,51,70],[52,74,51,72,"sStr"],[52,78,51,76],[52,79,51,77],[53,4,52,2],[53,8,52,6,"idx"],[53,11,52,9],[53,14,52,12],[53,18,52,16],[53,19,52,17,"_array"],[53,25,52,23],[53,26,52,24,"length"],[53,32,52,30],[54,4,53,2],[54,8,53,6],[54,9,53,7,"isDuplicate"],[54,20,53,18],[54,24,53,22,"aAllowDuplicates"],[54,40,53,38],[54,42,53,40],[55,6,54,4],[55,10,54,8],[55,11,54,9,"_array"],[55,17,54,15],[55,18,54,16,"push"],[55,22,54,20],[55,23,54,21,"aStr"],[55,27,54,25],[55,28,54,26],[56,4,55,2],[57,4,56,2],[57,8,56,6],[57,9,56,7,"isDuplicate"],[57,20,56,18],[57,22,56,20],[58,6,57,4],[58,10,57,8,"hasNativeMap"],[58,22,57,20],[58,24,57,22],[59,8,58,6],[59,12,58,10],[59,13,58,11,"_set"],[59,17,58,15],[59,18,58,16,"set"],[59,21,58,19],[59,22,58,20,"aStr"],[59,26,58,24],[59,28,58,26,"idx"],[59,31,58,29],[59,32,58,30],[60,6,59,4],[60,7,59,5],[60,13,59,11],[61,8,60,6],[61,12,60,10],[61,13,60,11,"_set"],[61,17,60,15],[61,18,60,16,"sStr"],[61,22,60,20],[61,23,60,21],[61,26,60,24,"idx"],[61,29,60,27],[62,6,61,4],[63,4,62,2],[64,2,63,0],[64,3,63,1],[66,2,65,0],[67,0,66,0],[68,0,67,0],[69,0,68,0],[70,0,69,0],[71,2,70,0,"ArraySet"],[71,10,70,8],[71,11,70,9,"prototype"],[71,20,70,18],[71,21,70,19,"has"],[71,24,70,22],[71,27,70,25],[71,36,70,34,"ArraySet_has"],[71,48,70,46,"ArraySet_has"],[71,49,70,47,"aStr"],[71,53,70,51],[71,55,70,53],[72,4,71,2],[72,8,71,6,"hasNativeMap"],[72,20,71,18],[72,22,71,20],[73,6,72,4],[73,13,72,11],[73,17,72,15],[73,18,72,16,"_set"],[73,22,72,20],[73,23,72,21,"has"],[73,26,72,24],[73,27,72,25,"aStr"],[73,31,72,29],[73,32,72,30],[74,4,73,2],[74,5,73,3],[74,11,73,9],[75,6,74,4],[75,10,74,8,"sStr"],[75,14,74,12],[75,17,74,15,"util"],[75,21,74,19],[75,22,74,20,"toSetString"],[75,33,74,31],[75,34,74,32,"aStr"],[75,38,74,36],[75,39,74,37],[76,6,75,4],[76,13,75,11,"has"],[76,16,75,14],[76,17,75,15,"call"],[76,21,75,19],[76,22,75,20],[76,26,75,24],[76,27,75,25,"_set"],[76,31,75,29],[76,33,75,31,"sStr"],[76,37,75,35],[76,38,75,36],[77,4,76,2],[78,2,77,0],[78,3,77,1],[80,2,79,0],[81,0,80,0],[82,0,81,0],[83,0,82,0],[84,0,83,0],[85,2,84,0,"ArraySet"],[85,10,84,8],[85,11,84,9,"prototype"],[85,20,84,18],[85,21,84,19,"indexOf"],[85,28,84,26],[85,31,84,29],[85,40,84,38,"ArraySet_indexOf"],[85,56,84,54,"ArraySet_indexOf"],[85,57,84,55,"aStr"],[85,61,84,59],[85,63,84,61],[86,4,85,2],[86,8,85,6,"hasNativeMap"],[86,20,85,18],[86,22,85,20],[87,6,86,4],[87,10,86,8,"idx"],[87,13,86,11],[87,16,86,14],[87,20,86,18],[87,21,86,19,"_set"],[87,25,86,23],[87,26,86,24,"get"],[87,29,86,27],[87,30,86,28,"aStr"],[87,34,86,32],[87,35,86,33],[88,6,87,4],[88,10,87,8,"idx"],[88,13,87,11],[88,17,87,15],[88,18,87,16],[88,20,87,18],[89,8,88,8],[89,15,88,15,"idx"],[89,18,88,18],[90,6,89,4],[91,4,90,2],[91,5,90,3],[91,11,90,9],[92,6,91,4],[92,10,91,8,"sStr"],[92,14,91,12],[92,17,91,15,"util"],[92,21,91,19],[92,22,91,20,"toSetString"],[92,33,91,31],[92,34,91,32,"aStr"],[92,38,91,36],[92,39,91,37],[93,6,92,4],[93,10,92,8,"has"],[93,13,92,11],[93,14,92,12,"call"],[93,18,92,16],[93,19,92,17],[93,23,92,21],[93,24,92,22,"_set"],[93,28,92,26],[93,30,92,28,"sStr"],[93,34,92,32],[93,35,92,33],[93,37,92,35],[94,8,93,6],[94,15,93,13],[94,19,93,17],[94,20,93,18,"_set"],[94,24,93,22],[94,25,93,23,"sStr"],[94,29,93,27],[94,30,93,28],[95,6,94,4],[96,4,95,2],[97,4,97,2],[97,10,97,8],[97,14,97,12,"Error"],[97,19,97,17],[97,20,97,18],[97,23,97,21],[97,26,97,24,"aStr"],[97,30,97,28],[97,33,97,31],[97,55,97,53],[97,56,97,54],[98,2,98,0],[98,3,98,1],[100,2,100,0],[101,0,101,0],[102,0,102,0],[103,0,103,0],[104,0,104,0],[105,2,105,0,"ArraySet"],[105,10,105,8],[105,11,105,9,"prototype"],[105,20,105,18],[105,21,105,19,"at"],[105,23,105,21],[105,26,105,24],[105,35,105,33,"ArraySet_at"],[105,46,105,44,"ArraySet_at"],[105,47,105,45,"aIdx"],[105,51,105,49],[105,53,105,51],[106,4,106,2],[106,8,106,6,"aIdx"],[106,12,106,10],[106,16,106,14],[106,17,106,15],[106,21,106,19,"aIdx"],[106,25,106,23],[106,28,106,26],[106,32,106,30],[106,33,106,31,"_array"],[106,39,106,37],[106,40,106,38,"length"],[106,46,106,44],[106,48,106,46],[107,6,107,4],[107,13,107,11],[107,17,107,15],[107,18,107,16,"_array"],[107,24,107,22],[107,25,107,23,"aIdx"],[107,29,107,27],[107,30,107,28],[108,4,108,2],[109,4,109,2],[109,10,109,8],[109,14,109,12,"Error"],[109,19,109,17],[109,20,109,18],[109,44,109,42],[109,47,109,45,"aIdx"],[109,51,109,49],[109,52,109,50],[110,2,110,0],[110,3,110,1],[112,2,112,0],[113,0,113,0],[114,0,114,0],[115,0,115,0],[116,0,116,0],[117,2,117,0,"ArraySet"],[117,10,117,8],[117,11,117,9,"prototype"],[117,20,117,18],[117,21,117,19,"toArray"],[117,28,117,26],[117,31,117,29],[117,40,117,38,"ArraySet_toArray"],[117,56,117,54,"ArraySet_toArray"],[117,57,117,54],[117,59,117,57],[118,4,118,2],[118,11,118,9],[118,15,118,13],[118,16,118,14,"_array"],[118,22,118,20],[118,23,118,21,"slice"],[118,28,118,26],[118,29,118,27],[118,30,118,28],[119,2,119,0],[119,3,119,1],[120,2,121,0,"exports"],[120,9,121,7],[120,10,121,8,"ArraySet"],[120,18,121,16],[120,21,121,19,"ArraySet"],[120,29,121,27],[121,0,121,28]],"functionMap":{"names":["<global>","ArraySet","ArraySet_fromArray","ArraySet_size","ArraySet_add","ArraySet_has","ArraySet_indexOf","ArraySet_at","ArraySet_toArray"],"mappings":"AAA;ACiB;CDG;qBEK;CFM;0BGQ;CHE;yBIO;CJc;yBKO;CLO;6BMO;CNc;wBOO;CPK;6BQO;CRE"}},"type":"js/module"}]}