{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":579,"column":0,"index":15586}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":579,"column":0,"index":15586}}],"key":"RY2z4+Bdq4bpTD/1b+1jGPWZdgA="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":579,"column":0,"index":15586}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"escape-string-regexp","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":0,"index":101},"end":{"line":6,"column":42,"index":143}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}},{"name":"query-string","data":{"asyncType":null,"locs":[{"start":{"line":7,"column":0,"index":144},"end":{"line":7,"column":44,"index":188}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./findFocusedRoute","data":{"asyncType":null,"locs":[{"start":{"line":9,"column":0,"index":190},"end":{"line":9,"column":50,"index":240}}],"key":"9+VFhBOjQcTQeIvNi1xuiiMPBRA="}},{"name":"./validatePathConfig","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":287},"end":{"line":11,"column":54,"index":341}}],"key":"cg7LCOlFjZ3IP0CYIpbP6C+VR6g="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getStateFromPath;\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], \"query-string\"));\n  var _findFocusedRoute = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./findFocusedRoute\"));\n  var _validatePathConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./validatePathConfig\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _ref;\n    if (options) {\n      (0, _validatePathConfig.default)(options);\n    }\n    var initialRoutes = [];\n    if (options != null && options.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    var screens = options == null ? void 0 : options.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n        var name = decodeURIComponent(segment);\n        return {\n          name: name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n\n    // Create a normalized configs array which will be easier to use\n    var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n      return createNormalizedConfigs(key, screens, [], initialRoutes, []);\n    }))).sort(function (a, b) {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n      var aParts = a.pattern.split('/');\n      var bParts = b.pattern.split('/');\n      for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n    // Check for duplicate patterns in the config\n    configs.reduce(function (acc, config) {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every(function (it, i) {\n          return a[i] === it;\n        }) : a.every(function (it, i) {\n          return b[i] === it;\n        });\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n    }, {});\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(function (config) {\n        return config.path === '' && config.routeNames.every(\n        // Make sure that none of the parent configs have a non-empty path defined\n        function (name) {\n          var _configs$find;\n          return !((_configs$find = configs.find(function (c) {\n            return c.screen === name;\n          })) != null && _configs$find.path);\n        });\n      });\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(function (name) {\n          return {\n            name: name\n          };\n        }), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  var joinPaths = function joinPaths() {\n    var _ref2;\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n      return p.split('/');\n    }))).filter(Boolean).join('/');\n  };\n  var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function _loop() {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          var _config$pattern;\n          var matchedParams = (_config$pattern = config.pattern) == null ? void 0 : _config$pattern.split('/').filter(function (p) {\n            return p.startsWith(':');\n          }).reduce(function (acc, p, i) {\n            return Object.assign(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n          }, {});\n          routes = config.routeNames.map(function (name) {\n            var _config$path;\n            var config = configs.find(function (c) {\n              return c.screen === name;\n            });\n            var params = config == null ? void 0 : (_config$path = config.path) == null ? void 0 : _config$path.split('/').filter(function (p) {\n              return p.startsWith(':');\n            }).reduce(function (acc, p) {\n              var value = matchedParams[p];\n              if (value) {\n                var _config$parse;\n                var key = p.replace(/^:/, '').replace(/\\?$/, '');\n                acc[key] = (_config$parse = config.parse) != null && _config$parse[key] ? config.parse[key](value) : value;\n              }\n              return acc;\n            }, {});\n            if (params && Object.keys(params).length) {\n              return {\n                name: name,\n                params: params\n              };\n            }\n            return {\n              name: name\n            };\n          });\n          remainingPath = remainingPath.replace(match[1], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop();\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes: routes,\n      remainingPath: remainingPath\n    };\n  };\n  var createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n\n    // @ts-expect-error: we can't strongly typecheck this for now\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens: parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(function (nestedConfig) {\n          var _pattern2;\n          var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2.default)(parentScreens), (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n          configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(`^(${pattern.split('/').map(function (it) {\n      if (it.startsWith(':')) {\n        return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n      }\n      return `${it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)}\\\\/`;\n    }).join('')})`) : undefined;\n    return {\n      screen: screen,\n      regex: regex,\n      pattern: pattern,\n      path: path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: (0, _toConsumableArray2.default)(routeNames),\n      parse: parse\n    };\n  };\n  var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, _objectSpread(_objectSpread({}, route), {}, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [_objectSpread(_objectSpread({}, route), {}, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n    var state;\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRoute.default)(state);\n    route.path = path;\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = _objectSpread(_objectSpread({}, route.params), params);\n    }\n    return state;\n  };\n  var parseQueryParams = function parseQueryParams(path, parseConfig) {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(function (name) {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":427,"map":[[9,2,6,0],[9,6,6,0,"_escapeStringRegexp"],[9,25,6,0],[9,28,6,0,"_interopRequireDefault"],[9,50,6,0],[9,51,6,0,"_$$_REQUIRE"],[9,62,6,0],[9,63,6,0,"_dependencyMap"],[9,77,6,0],[10,2,7,0],[10,6,7,0,"queryString"],[10,17,7,0],[10,20,7,0,"_interopRequireWildcard"],[10,43,7,0],[10,44,7,0,"_$$_REQUIRE"],[10,55,7,0],[10,56,7,0,"_dependencyMap"],[10,70,7,0],[11,2,9,0],[11,6,9,0,"_findFocusedRoute"],[11,23,9,0],[11,26,9,0,"_interopRequireDefault"],[11,48,9,0],[11,49,9,0,"_$$_REQUIRE"],[11,60,9,0],[11,61,9,0,"_dependencyMap"],[11,75,9,0],[12,2,11,0],[12,6,11,0,"_validatePathConfig"],[12,25,11,0],[12,28,11,0,"_interopRequireDefault"],[12,50,11,0],[12,51,11,0,"_$$_REQUIRE"],[12,62,11,0],[12,63,11,0,"_dependencyMap"],[12,77,11,0],[13,2,11,54],[13,11,11,54,"_getRequireWildcardCache"],[13,36,11,54,"e"],[13,37,11,54],[13,66,11,54,"WeakMap"],[13,73,11,54],[13,92,11,54,"r"],[13,93,11,54],[13,100,11,54,"WeakMap"],[13,107,11,54],[13,111,11,54,"t"],[13,112,11,54],[13,119,11,54,"WeakMap"],[13,126,11,54],[13,138,11,54,"_getRequireWildcardCache"],[13,162,11,54],[13,174,11,54,"_getRequireWildcardCache"],[13,199,11,54,"e"],[13,200,11,54],[13,211,11,54,"e"],[13,212,11,54],[13,215,11,54,"t"],[13,216,11,54],[13,219,11,54,"r"],[13,220,11,54],[13,225,11,54,"e"],[13,226,11,54],[14,2,11,54],[14,11,11,54,"_interopRequireWildcard"],[14,35,11,54,"e"],[14,36,11,54],[14,38,11,54,"r"],[14,39,11,54],[14,48,11,54,"r"],[14,49,11,54],[14,53,11,54,"e"],[14,54,11,54],[14,58,11,54,"e"],[14,59,11,54],[14,60,11,54,"__esModule"],[14,70,11,54],[14,79,11,54,"e"],[14,80,11,54],[14,95,11,54,"e"],[14,96,11,54],[14,119,11,54,"e"],[14,120,11,54],[14,145,11,54,"e"],[14,146,11,54],[14,157,11,54,"default"],[14,164,11,54],[14,166,11,54,"e"],[14,167,11,54],[14,175,11,54,"t"],[14,176,11,54],[14,179,11,54,"_getRequireWildcardCache"],[14,203,11,54],[14,204,11,54,"r"],[14,205,11,54],[14,212,11,54,"t"],[14,213,11,54],[14,217,11,54,"t"],[14,218,11,54],[14,219,11,54,"has"],[14,222,11,54],[14,223,11,54,"e"],[14,224,11,54],[14,234,11,54,"t"],[14,235,11,54],[14,236,11,54,"get"],[14,239,11,54],[14,240,11,54,"e"],[14,241,11,54],[14,248,11,54,"n"],[14,249,11,54],[14,254,11,54,"__proto__"],[14,263,11,54],[14,273,11,54,"a"],[14,274,11,54],[14,277,11,54,"Object"],[14,283,11,54],[14,284,11,54,"defineProperty"],[14,298,11,54],[14,302,11,54,"Object"],[14,308,11,54],[14,309,11,54,"getOwnPropertyDescriptor"],[14,333,11,54],[14,344,11,54,"u"],[14,345,11,54],[14,349,11,54,"e"],[14,350,11,54],[14,370,11,54,"u"],[14,371,11,54],[14,375,11,54,"Object"],[14,381,11,54],[14,382,11,54,"prototype"],[14,391,11,54],[14,392,11,54,"hasOwnProperty"],[14,406,11,54],[14,407,11,54,"call"],[14,411,11,54],[14,412,11,54,"e"],[14,413,11,54],[14,415,11,54,"u"],[14,416,11,54],[14,425,11,54,"i"],[14,426,11,54],[14,429,11,54,"a"],[14,430,11,54],[14,433,11,54,"Object"],[14,439,11,54],[14,440,11,54,"getOwnPropertyDescriptor"],[14,464,11,54],[14,465,11,54,"e"],[14,466,11,54],[14,468,11,54,"u"],[14,469,11,54],[14,479,11,54,"i"],[14,480,11,54],[14,485,11,54,"i"],[14,486,11,54],[14,487,11,54,"get"],[14,490,11,54],[14,494,11,54,"i"],[14,495,11,54],[14,496,11,54,"set"],[14,499,11,54],[14,503,11,54,"Object"],[14,509,11,54],[14,510,11,54,"defineProperty"],[14,524,11,54],[14,525,11,54,"n"],[14,526,11,54],[14,528,11,54,"u"],[14,529,11,54],[14,531,11,54,"i"],[14,532,11,54],[14,536,11,54,"n"],[14,537,11,54],[14,538,11,54,"u"],[14,539,11,54],[14,543,11,54,"e"],[14,544,11,54],[14,545,11,54,"u"],[14,546,11,54],[14,558,11,54,"n"],[14,559,11,54],[14,560,11,54,"default"],[14,567,11,54],[14,570,11,54,"e"],[14,571,11,54],[14,573,11,54,"t"],[14,574,11,54],[14,578,11,54,"t"],[14,579,11,54],[14,580,11,54,"set"],[14,583,11,54],[14,584,11,54,"e"],[14,585,11,54],[14,587,11,54,"n"],[14,588,11,54],[14,591,11,54,"n"],[14,592,11,54],[15,2,11,54],[15,11,11,54,"ownKeys"],[15,19,11,54,"e"],[15,20,11,54],[15,22,11,54,"r"],[15,23,11,54],[15,31,11,54,"t"],[15,32,11,54],[15,35,11,54,"Object"],[15,41,11,54],[15,42,11,54,"keys"],[15,46,11,54],[15,47,11,54,"e"],[15,48,11,54],[15,55,11,54,"Object"],[15,61,11,54],[15,62,11,54,"getOwnPropertySymbols"],[15,83,11,54],[15,91,11,54,"o"],[15,92,11,54],[15,95,11,54,"Object"],[15,101,11,54],[15,102,11,54,"getOwnPropertySymbols"],[15,123,11,54],[15,124,11,54,"e"],[15,125,11,54],[15,128,11,54,"r"],[15,129,11,54],[15,134,11,54,"o"],[15,135,11,54],[15,138,11,54,"o"],[15,139,11,54],[15,140,11,54,"filter"],[15,146,11,54],[15,157,11,54,"r"],[15,158,11,54],[15,169,11,54,"Object"],[15,175,11,54],[15,176,11,54,"getOwnPropertyDescriptor"],[15,200,11,54],[15,201,11,54,"e"],[15,202,11,54],[15,204,11,54,"r"],[15,205,11,54],[15,207,11,54,"enumerable"],[15,217,11,54],[15,224,11,54,"t"],[15,225,11,54],[15,226,11,54,"push"],[15,230,11,54],[15,231,11,54,"apply"],[15,236,11,54],[15,237,11,54,"t"],[15,238,11,54],[15,240,11,54,"o"],[15,241,11,54],[15,253,11,54,"t"],[15,254,11,54],[16,2,11,54],[16,11,11,54,"_objectSpread"],[16,25,11,54,"e"],[16,26,11,54],[16,39,11,54,"r"],[16,40,11,54],[16,46,11,54,"r"],[16,47,11,54],[16,50,11,54,"arguments"],[16,59,11,54],[16,60,11,54,"length"],[16,66,11,54],[16,68,11,54,"r"],[16,69,11,54],[16,79,11,54,"t"],[16,80,11,54],[16,91,11,54,"arguments"],[16,100,11,54],[16,101,11,54,"r"],[16,102,11,54],[16,106,11,54,"arguments"],[16,115,11,54],[16,116,11,54,"r"],[16,117,11,54],[16,125,11,54,"r"],[16,126,11,54],[16,133,11,54,"ownKeys"],[16,140,11,54],[16,141,11,54,"Object"],[16,147,11,54],[16,148,11,54,"t"],[16,149,11,54],[16,156,11,54,"forEach"],[16,163,11,54],[16,174,11,54,"r"],[16,175,11,54],[16,183,11,54,"_defineProperty2"],[16,199,11,54],[16,200,11,54,"default"],[16,207,11,54],[16,209,11,54,"e"],[16,210,11,54],[16,212,11,54,"r"],[16,213,11,54],[16,215,11,54,"t"],[16,216,11,54],[16,217,11,54,"r"],[16,218,11,54],[16,227,11,54,"Object"],[16,233,11,54],[16,234,11,54,"getOwnPropertyDescriptors"],[16,259,11,54],[16,262,11,54,"Object"],[16,268,11,54],[16,269,11,54,"defineProperties"],[16,285,11,54],[16,286,11,54,"e"],[16,287,11,54],[16,289,11,54,"Object"],[16,295,11,54],[16,296,11,54,"getOwnPropertyDescriptors"],[16,321,11,54],[16,322,11,54,"t"],[16,323,11,54],[16,328,11,54,"ownKeys"],[16,335,11,54],[16,336,11,54,"Object"],[16,342,11,54],[16,343,11,54,"t"],[16,344,11,54],[16,347,11,54,"forEach"],[16,354,11,54],[16,365,11,54,"r"],[16,366,11,54],[16,370,11,54,"Object"],[16,376,11,54],[16,377,11,54,"defineProperty"],[16,391,11,54],[16,392,11,54,"e"],[16,393,11,54],[16,395,11,54,"r"],[16,396,11,54],[16,398,11,54,"Object"],[16,404,11,54],[16,405,11,54,"getOwnPropertyDescriptor"],[16,429,11,54],[16,430,11,54,"t"],[16,431,11,54],[16,433,11,54,"r"],[16,434,11,54],[16,451,11,54,"e"],[16,452,11,54],[17,2,44,0],[18,0,45,0],[19,0,46,0],[20,0,47,0],[21,0,48,0],[22,0,49,0],[23,0,50,0],[24,0,51,0],[25,0,52,0],[26,0,53,0],[27,0,54,0],[28,0,55,0],[29,0,56,0],[30,0,57,0],[31,0,58,0],[32,0,59,0],[33,0,60,0],[34,0,61,0],[35,0,62,0],[36,0,63,0],[37,0,64,0],[38,2,65,15],[38,11,65,24,"getStateFromPath"],[38,27,65,40,"getStateFromPath"],[38,28,66,2,"path"],[38,32,66,14],[38,34,67,2,"options"],[38,41,67,30],[38,43,68,27],[39,4,68,27],[39,8,68,27,"_ref"],[39,12,68,27],[40,4,69,2],[40,8,69,6,"options"],[40,15,69,13],[40,17,69,15],[41,6,70,4],[41,10,70,4,"validatePathConfig"],[41,37,70,22],[41,39,70,23,"options"],[41,46,70,30],[41,47,70,31],[42,4,71,2],[43,4,73,2],[43,8,73,6,"initialRoutes"],[43,21,73,41],[43,24,73,44],[43,26,73,46],[44,4,75,2],[44,8,75,6,"options"],[44,15,75,13],[44,27,75,6,"options"],[44,34,75,13],[44,35,75,15,"initialRouteName"],[44,51,75,31],[44,53,75,33],[45,6,76,4,"initialRoutes"],[45,19,76,17],[45,20,76,18,"push"],[45,24,76,22],[45,25,76,23],[46,8,77,6,"initialRouteName"],[46,24,77,22],[46,26,77,24,"options"],[46,33,77,31],[46,34,77,32,"initialRouteName"],[46,50,77,48],[47,8,78,6,"parentScreens"],[47,21,78,19],[47,23,78,21],[48,6,79,4],[48,7,79,5],[48,8,79,6],[49,4,80,2],[50,4,82,2],[50,8,82,8,"screens"],[50,15,82,15],[50,18,82,18,"options"],[50,25,82,25],[50,45,82,18,"options"],[50,52,82,25],[50,53,82,27,"screens"],[50,60,82,34],[51,4,84,2],[51,8,84,6,"remaining"],[51,17,84,15],[51,20,84,18,"path"],[51,24,84,22],[51,25,85,5,"replace"],[51,32,85,12],[51,33,85,13],[51,39,85,19],[51,41,85,21],[51,44,85,24],[51,45,85,25],[51,46,85,26],[52,4,85,26],[52,5,86,5,"replace"],[52,12,86,12],[52,13,86,13],[52,18,86,18],[52,20,86,20],[52,22,86,22],[52,23,86,23],[52,24,86,24],[53,4,86,24],[53,5,87,5,"replace"],[53,12,87,12],[53,13,87,13],[53,20,87,20],[53,22,87,22],[53,24,87,24],[53,25,87,25],[53,26,87,26],[53,27,87,27],[55,4,89,2],[56,4,90,2,"remaining"],[56,13,90,11],[56,16,90,14,"remaining"],[56,25,90,23],[56,26,90,24,"endsWith"],[56,34,90,32],[56,35,90,33],[56,38,90,36],[56,39,90,37],[56,42,90,40,"remaining"],[56,51,90,49],[56,54,90,53],[56,57,90,55,"remaining"],[56,66,90,65],[56,69,90,67],[57,4,92,2],[57,8,92,6,"screens"],[57,15,92,13],[57,20,92,18,"undefined"],[57,29,92,27],[57,31,92,29],[58,6,93,4],[59,6,94,4],[59,10,94,10,"routes"],[59,17,94,16],[59,20,94,19,"remaining"],[59,29,94,28],[59,30,95,7,"split"],[59,35,95,12],[59,36,95,13],[59,39,95,16],[59,40,95,17],[59,41,96,7,"filter"],[59,47,96,13],[59,48,96,14,"Boolean"],[59,55,96,21],[59,56,96,22],[59,57,97,7,"map"],[59,60,97,10],[59,61,97,11],[59,71,97,12,"segment"],[59,78,97,19],[59,80,97,24],[60,8,98,8],[60,12,98,14,"name"],[60,16,98,18],[60,19,98,21,"decodeURIComponent"],[60,37,98,39],[60,38,98,40,"segment"],[60,45,98,47],[60,46,98,48],[61,8,99,8],[61,15,99,15],[62,10,99,17,"name"],[62,14,99,21],[62,16,99,17,"name"],[63,8,99,22],[63,9,99,23],[64,6,100,6],[64,7,100,7],[64,8,100,8],[65,6,102,4],[65,10,102,8,"routes"],[65,17,102,14],[65,18,102,15,"length"],[65,24,102,21],[65,26,102,23],[66,8,103,6],[66,15,103,13,"createNestedStateObject"],[66,38,103,36],[66,39,103,37,"path"],[66,43,103,41],[66,45,103,43,"routes"],[66,52,103,49],[66,54,103,51,"initialRoutes"],[66,67,103,64],[66,68,103,65],[67,6,104,4],[68,6,106,4],[68,13,106,11,"undefined"],[68,22,106,20],[69,4,107,2],[71,4,109,2],[72,4,110,2],[72,8,110,8,"configs"],[72,15,110,15],[72,18,110,18],[72,19,110,18,"_ref"],[72,23,110,18],[72,26,110,19],[72,28,110,21],[72,30,111,5,"concat"],[72,36,111,11],[72,37,111,11,"apply"],[72,42,111,11],[72,43,111,11,"_ref"],[72,47,111,11],[72,53,111,11,"_toConsumableArray2"],[72,72,111,11],[72,73,111,11,"default"],[72,80,111,11],[72,82,112,9,"Object"],[72,88,112,15],[72,89,112,16,"keys"],[72,93,112,20],[72,94,112,21,"screens"],[72,101,112,28],[72,102,112,29],[72,103,112,30,"map"],[72,106,112,33],[72,107,112,34],[72,117,112,35,"key"],[72,120,112,38],[73,6,112,38],[73,13,113,8,"createNormalizedConfigs"],[73,36,113,31],[73,37,114,10,"key"],[73,40,114,13],[73,42,115,10,"screens"],[73,49,115,17],[73,51,116,10],[73,53,116,12],[73,55,117,10,"initialRoutes"],[73,68,117,23],[73,70,118,10],[73,72,119,8],[73,73,119,9],[74,4,119,9],[74,5,120,6],[74,6,120,7],[74,7,121,4],[74,8,121,5],[74,9,122,5,"sort"],[74,13,122,9],[74,14,122,10],[74,24,122,11,"a"],[74,25,122,12],[74,27,122,14,"b"],[74,28,122,15],[74,30,122,20],[75,6,123,6],[76,6,124,6],[77,6,125,6],[79,6,127,6],[80,6,128,6],[81,6,129,6],[81,10,129,10,"a"],[81,11,129,11],[81,12,129,12,"pattern"],[81,19,129,19],[81,24,129,24,"b"],[81,25,129,25],[81,26,129,26,"pattern"],[81,33,129,33],[81,35,129,35],[82,8,130,8],[82,15,130,15,"b"],[82,16,130,16],[82,17,130,17,"routeNames"],[82,27,130,27],[82,28,130,28,"join"],[82,32,130,32],[82,33,130,33],[82,36,130,36],[82,37,130,37],[82,38,130,38,"localeCompare"],[82,51,130,51],[82,52,130,52,"a"],[82,53,130,53],[82,54,130,54,"routeNames"],[82,64,130,64],[82,65,130,65,"join"],[82,69,130,69],[82,70,130,70],[82,73,130,73],[82,74,130,74],[82,75,130,75],[83,6,131,6],[85,6,133,6],[86,6,134,6],[87,6,135,6],[87,10,135,10,"a"],[87,11,135,11],[87,12,135,12,"pattern"],[87,19,135,19],[87,20,135,20,"startsWith"],[87,30,135,30],[87,31,135,31,"b"],[87,32,135,32],[87,33,135,33,"pattern"],[87,40,135,40],[87,41,135,41],[87,43,135,43],[88,8,136,8],[88,15,136,15],[88,16,136,16],[88,17,136,17],[89,6,137,6],[90,6,139,6],[90,10,139,10,"b"],[90,11,139,11],[90,12,139,12,"pattern"],[90,19,139,19],[90,20,139,20,"startsWith"],[90,30,139,30],[90,31,139,31,"a"],[90,32,139,32],[90,33,139,33,"pattern"],[90,40,139,40],[90,41,139,41],[90,43,139,43],[91,8,140,8],[91,15,140,15],[91,16,140,16],[92,6,141,6],[93,6,143,6],[93,10,143,12,"aParts"],[93,16,143,18],[93,19,143,21,"a"],[93,20,143,22],[93,21,143,23,"pattern"],[93,28,143,30],[93,29,143,31,"split"],[93,34,143,36],[93,35,143,37],[93,38,143,40],[93,39,143,41],[94,6,144,6],[94,10,144,12,"bParts"],[94,16,144,18],[94,19,144,21,"b"],[94,20,144,22],[94,21,144,23,"pattern"],[94,28,144,30],[94,29,144,31,"split"],[94,34,144,36],[94,35,144,37],[94,38,144,40],[94,39,144,41],[95,6,146,6],[95,11,146,11],[95,15,146,15,"i"],[95,16,146,16],[95,19,146,19],[95,20,146,20],[95,22,146,22,"i"],[95,23,146,23],[95,26,146,26,"Math"],[95,30,146,30],[95,31,146,31,"max"],[95,34,146,34],[95,35,146,35,"aParts"],[95,41,146,41],[95,42,146,42,"length"],[95,48,146,48],[95,50,146,50,"bParts"],[95,56,146,56],[95,57,146,57,"length"],[95,63,146,63],[95,64,146,64],[95,66,146,66,"i"],[95,67,146,67],[95,69,146,69],[95,71,146,71],[96,8,147,8],[97,8,148,8],[97,12,148,12,"aParts"],[97,18,148,18],[97,19,148,19,"i"],[97,20,148,20],[97,21,148,21],[97,25,148,25],[97,29,148,29],[97,31,148,31],[98,10,149,10],[98,17,149,17],[98,18,149,18],[99,8,150,8],[100,8,151,8],[101,8,152,8],[101,12,152,12,"bParts"],[101,18,152,18],[101,19,152,19,"i"],[101,20,152,20],[101,21,152,21],[101,25,152,25],[101,29,152,29],[101,31,152,31],[102,10,153,10],[102,17,153,17],[102,18,153,18],[102,19,153,19],[103,8,154,8],[104,8,155,8],[104,12,155,14,"aWildCard"],[104,21,155,23],[104,24,155,26,"aParts"],[104,30,155,32],[104,31,155,33,"i"],[104,32,155,34],[104,33,155,35],[104,38,155,40],[104,41,155,43],[104,45,155,47,"aParts"],[104,51,155,53],[104,52,155,54,"i"],[104,53,155,55],[104,54,155,56],[104,55,155,57,"startsWith"],[104,65,155,67],[104,66,155,68],[104,69,155,71],[104,70,155,72],[105,8,156,8],[105,12,156,14,"bWildCard"],[105,21,156,23],[105,24,156,26,"bParts"],[105,30,156,32],[105,31,156,33,"i"],[105,32,156,34],[105,33,156,35],[105,38,156,40],[105,41,156,43],[105,45,156,47,"bParts"],[105,51,156,53],[105,52,156,54,"i"],[105,53,156,55],[105,54,156,56],[105,55,156,57,"startsWith"],[105,65,156,67],[105,66,156,68],[105,69,156,71],[105,70,156,72],[106,8,157,8],[107,8,158,8],[107,12,158,12,"aWildCard"],[107,21,158,21],[107,25,158,25,"bWildCard"],[107,34,158,34],[107,36,158,36],[108,10,159,10],[109,8,160,8],[110,8,161,8],[111,8,162,8],[111,12,162,12,"aWildCard"],[111,21,162,21],[111,23,162,23],[112,10,163,10],[112,17,163,17],[112,18,163,18],[113,8,164,8],[114,8,165,8],[115,8,166,8],[115,12,166,12,"bWildCard"],[115,21,166,21],[115,23,166,23],[116,10,167,10],[116,17,167,17],[116,18,167,18],[116,19,167,19],[117,8,168,8],[118,6,169,6],[119,6,170,6],[119,13,170,13,"bParts"],[119,19,170,19],[119,20,170,20,"length"],[119,26,170,26],[119,29,170,29,"aParts"],[119,35,170,35],[119,36,170,36,"length"],[119,42,170,42],[120,4,171,4],[120,5,171,5],[120,6,171,6],[122,4,173,2],[123,4,174,2,"configs"],[123,11,174,9],[123,12,174,10,"reduce"],[123,18,174,16],[123,19,174,46],[123,29,174,47,"acc"],[123,32,174,50],[123,34,174,52,"config"],[123,40,174,58],[123,42,174,63],[124,6,175,4],[124,10,175,8,"acc"],[124,13,175,11],[124,14,175,12,"config"],[124,20,175,18],[124,21,175,19,"pattern"],[124,28,175,26],[124,29,175,27],[124,31,175,29],[125,8,176,6],[125,12,176,12,"a"],[125,13,176,13],[125,16,176,16,"acc"],[125,19,176,19],[125,20,176,20,"config"],[125,26,176,26],[125,27,176,27,"pattern"],[125,34,176,34],[125,35,176,35],[125,36,176,36,"routeNames"],[125,46,176,46],[126,8,177,6],[126,12,177,12,"b"],[126,13,177,13],[126,16,177,16,"config"],[126,22,177,22],[126,23,177,23,"routeNames"],[126,33,177,33],[128,8,179,6],[129,8,180,6],[130,8,181,6],[130,12,181,12,"intersects"],[130,22,181,22],[130,25,182,8,"a"],[130,26,182,9],[130,27,182,10,"length"],[130,33,182,16],[130,36,182,19,"b"],[130,37,182,20],[130,38,182,21,"length"],[130,44,182,27],[130,47,183,12,"b"],[130,48,183,13],[130,49,183,14,"every"],[130,54,183,19],[130,55,183,20],[130,65,183,21,"it"],[130,67,183,23],[130,69,183,25,"i"],[130,70,183,26],[131,10,183,26],[131,17,183,31,"a"],[131,18,183,32],[131,19,183,33,"i"],[131,20,183,34],[131,21,183,35],[131,26,183,40,"it"],[131,28,183,42],[132,8,183,42],[132,10,183,43],[132,13,184,12,"a"],[132,14,184,13],[132,15,184,14,"every"],[132,20,184,19],[132,21,184,20],[132,31,184,21,"it"],[132,33,184,23],[132,35,184,25,"i"],[132,36,184,26],[133,10,184,26],[133,17,184,31,"b"],[133,18,184,32],[133,19,184,33,"i"],[133,20,184,34],[133,21,184,35],[133,26,184,40,"it"],[133,28,184,42],[134,8,184,42],[134,10,184,43],[135,8,186,6],[135,12,186,10],[135,13,186,11,"intersects"],[135,23,186,21],[135,25,186,23],[136,10,187,8],[136,16,187,14],[136,20,187,18,"Error"],[136,25,187,23],[136,26,188,11],[136,91,189,12,"config"],[136,97,189,18],[136,98,189,19,"pattern"],[136,105,190,11],[136,128,190,33,"a"],[136,129,190,34],[136,130,190,35,"join"],[136,134,190,39],[136,135,190,40],[136,140,190,45],[136,141,190,47],[136,151,190,56,"b"],[136,152,190,57],[136,153,190,58,"join"],[136,157,190,62],[136,158,191,12],[136,163,192,10],[136,164,192,12],[136,236,193,8],[136,237,193,9],[137,8,194,6],[138,6,195,4],[139,6,197,4],[139,13,197,11,"Object"],[139,19,197,17],[139,20,197,18,"assign"],[139,26,197,24],[139,27,197,25,"acc"],[139,30,197,28],[139,36,197,28,"_defineProperty2"],[139,52,197,28],[139,53,197,28,"default"],[139,60,197,28],[139,66,198,7,"config"],[139,72,198,13],[139,73,198,14,"pattern"],[139,80,198,21],[139,82,198,24,"config"],[139,88,198,30],[139,89,199,5],[139,90,199,6],[140,4,200,2],[140,5,200,3],[140,7,200,5],[140,8,200,6],[140,9,200,7],[140,10,200,8],[141,4,202,2],[141,8,202,6,"remaining"],[141,17,202,15],[141,22,202,20],[141,25,202,23],[141,27,202,25],[142,6,203,4],[143,6,204,4],[144,6,205,4],[144,10,205,10,"match"],[144,15,205,15],[144,18,205,18,"configs"],[144,25,205,25],[144,26,205,26,"find"],[144,30,205,30],[144,31,206,6],[144,41,206,7,"config"],[144,47,206,13],[145,8,206,13],[145,15,207,8,"config"],[145,21,207,14],[145,22,207,15,"path"],[145,26,207,19],[145,31,207,24],[145,33,207,26],[145,37,208,8,"config"],[145,43,208,14],[145,44,208,15,"routeNames"],[145,54,208,25],[145,55,208,26,"every"],[145,60,208,31],[146,8,209,10],[147,8,210,10],[147,18,210,11,"name"],[147,22,210,15],[148,10,210,15],[148,14,210,15,"_configs$find"],[148,27,210,15],[149,10,210,15],[149,17,210,20],[149,20,210,20,"_configs$find"],[149,33,210,20],[149,36,210,21,"configs"],[149,43,210,28],[149,44,210,29,"find"],[149,48,210,33],[149,49,210,34],[149,59,210,35,"c"],[149,60,210,36],[150,12,210,36],[150,19,210,41,"c"],[150,20,210,42],[150,21,210,43,"screen"],[150,27,210,49],[150,32,210,54,"name"],[150,36,210,58],[151,10,210,58],[151,12,210,59],[151,25,210,21,"_configs$find"],[151,38,210,21],[151,39,210,61,"path"],[151,43,210,65],[152,8,210,65],[152,9,211,8],[152,10,211,9],[153,6,211,9],[153,7,212,4],[153,8,212,5],[154,6,214,4],[154,10,214,8,"match"],[154,15,214,13],[154,17,214,15],[155,8,215,6],[155,15,215,13,"createNestedStateObject"],[155,38,215,36],[155,39,216,8,"path"],[155,43,216,12],[155,45,217,8,"match"],[155,50,217,13],[155,51,217,14,"routeNames"],[155,61,217,24],[155,62,217,25,"map"],[155,65,217,28],[155,66,217,29],[155,76,217,30,"name"],[155,80,217,34],[156,10,217,34],[156,17,217,40],[157,12,217,42,"name"],[157,16,217,46],[157,18,217,42,"name"],[158,10,217,47],[158,11,217,48],[159,8,217,48],[159,9,217,49],[159,10,217,50],[159,12,218,8,"initialRoutes"],[159,25,218,21],[159,27,219,8,"configs"],[159,34,220,6],[159,35,220,7],[160,6,221,4],[161,6,223,4],[161,13,223,11,"undefined"],[161,22,223,20],[162,4,224,2],[163,4,226,2],[163,8,226,6,"result"],[163,14,226,55],[164,4,227,2],[164,8,227,6,"current"],[164,15,227,56],[166,4,229,2],[167,4,230,2],[168,4,231,2],[168,8,231,2,"_matchAgainstConfigs"],[168,28,231,2],[168,31,231,36,"matchAgainstConfigs"],[168,50,231,55],[168,51,232,4,"remaining"],[168,60,232,13],[168,62,233,4,"configs"],[168,69,233,11],[168,70,233,12,"map"],[168,73,233,15],[168,74,233,16],[168,84,233,17,"c"],[168,85,233,18],[169,8,233,18],[169,15,233,18,"_objectSpread"],[169,28,233,18],[169,29,233,18,"_objectSpread"],[169,42,233,18],[169,47,234,9,"c"],[169,48,234,10],[170,10,235,6],[171,10,236,6,"regex"],[171,15,236,11],[171,17,236,13,"c"],[171,18,236,14],[171,19,236,15,"regex"],[171,24,236,20],[171,27,236,23],[171,31,236,27,"RegExp"],[171,37,236,33],[171,38,236,34,"c"],[171,39,236,35],[171,40,236,36,"regex"],[171,45,236,41],[171,46,236,42,"source"],[171,52,236,48],[171,55,236,51],[171,58,236,54],[171,59,236,55],[171,62,236,58,"undefined"],[172,8,236,67],[173,6,236,67],[173,7,237,6],[173,8,238,2],[173,9,238,3],[174,6,231,10,"routes"],[174,12,231,16],[174,15,231,16,"_matchAgainstConfigs"],[174,35,231,16],[174,36,231,10,"routes"],[174,42,231,16],[175,6,231,18,"remainingPath"],[175,19,231,31],[175,22,231,31,"_matchAgainstConfigs"],[175,42,231,31],[175,43,231,18,"remainingPath"],[175,56,231,31],[176,4,240,2],[176,8,240,6,"routes"],[176,14,240,12],[176,19,240,17,"undefined"],[176,28,240,26],[176,30,240,28],[177,6,241,4],[178,6,242,4,"current"],[178,13,242,11],[178,16,242,14,"createNestedStateObject"],[178,39,242,37],[178,40,242,38,"path"],[178,44,242,42],[178,46,242,44,"routes"],[178,52,242,50],[178,54,242,52,"initialRoutes"],[178,67,242,65],[178,69,242,67,"configs"],[178,76,242,74],[178,77,242,75],[179,6,243,4,"remaining"],[179,15,243,13],[179,18,243,16,"remainingPath"],[179,31,243,29],[180,6,244,4,"result"],[180,12,244,10],[180,15,244,13,"current"],[180,22,244,20],[181,4,245,2],[182,4,247,2],[182,8,247,6,"current"],[182,15,247,13],[182,19,247,17],[182,23,247,21],[182,27,247,25,"result"],[182,33,247,31],[182,37,247,35],[182,41,247,39],[182,43,247,41],[183,6,248,4],[183,13,248,11,"undefined"],[183,22,248,20],[184,4,249,2],[185,4,251,2],[185,11,251,9,"result"],[185,17,251,15],[186,2,252,0],[187,2,254,0],[187,6,254,6,"joinPaths"],[187,15,254,15],[187,18,254,18],[187,27,254,6,"joinPaths"],[187,36,254,15,"joinPaths"],[187,37,254,15],[188,4,254,15],[188,8,254,15,"_ref2"],[188,13,254,15],[189,4,254,15],[189,13,254,15,"_len"],[189,17,254,15],[189,20,254,15,"arguments"],[189,29,254,15],[189,30,254,15,"length"],[189,36,254,15],[189,38,254,22,"paths"],[189,43,254,27],[189,50,254,27,"Array"],[189,55,254,27],[189,56,254,27,"_len"],[189,60,254,27],[189,63,254,27,"_key"],[189,67,254,27],[189,73,254,27,"_key"],[189,77,254,27],[189,80,254,27,"_len"],[189,84,254,27],[189,86,254,27,"_key"],[189,90,254,27],[190,6,254,22,"paths"],[190,11,254,27],[190,12,254,27,"_key"],[190,16,254,27],[190,20,254,27,"arguments"],[190,29,254,27],[190,30,254,27,"_key"],[190,34,254,27],[191,4,254,27],[192,4,254,27],[192,11,255,2],[192,12,255,2,"_ref2"],[192,17,255,2],[192,20,255,3],[192,22,255,5],[192,24,256,5,"concat"],[192,30,256,11],[192,31,256,11,"apply"],[192,36,256,11],[192,37,256,11,"_ref2"],[192,42,256,11],[192,48,256,11,"_toConsumableArray2"],[192,67,256,11],[192,68,256,11,"default"],[192,75,256,11],[192,77,256,15,"paths"],[192,82,256,20],[192,83,256,21,"map"],[192,86,256,24],[192,87,256,25],[192,97,256,26,"p"],[192,98,256,27],[193,6,256,27],[193,13,256,32,"p"],[193,14,256,33],[193,15,256,34,"split"],[193,20,256,39],[193,21,256,40],[193,24,256,43],[193,25,256,44],[194,4,256,44],[194,6,256,45],[194,8,256,46],[194,9,257,5,"filter"],[194,15,257,11],[194,16,257,12,"Boolean"],[194,23,257,19],[194,24,257,20],[194,25,258,5,"join"],[194,29,258,9],[194,30,258,10],[194,33,258,13],[194,34,258,14],[195,2,258,14],[196,2,260,0],[196,6,260,6,"matchAgainstConfigs"],[196,25,260,25],[196,28,260,28],[196,37,260,6,"matchAgainstConfigs"],[196,56,260,25,"matchAgainstConfigs"],[196,57,260,29,"remaining"],[196,66,260,46],[196,68,260,48,"configs"],[196,75,260,70],[196,77,260,75],[197,4,261,2],[197,8,261,6,"routes"],[197,14,261,39],[198,4,262,2],[198,8,262,6,"remainingPath"],[198,21,262,19],[198,24,262,22,"remaining"],[198,33,262,31],[200,4,264,2],[201,4,264,2],[201,8,264,2,"_loop"],[201,13,264,2],[201,25,264,2,"_loop"],[201,31,264,2],[201,33,265,32],[202,8,266,4],[202,12,266,8],[202,13,266,9,"config"],[202,19,266,15],[202,20,266,16,"regex"],[202,25,266,21],[202,27,266,23],[203,10,266,23],[204,8,268,4],[205,8,270,4],[205,12,270,10,"match"],[205,17,270,15],[205,20,270,18,"remainingPath"],[205,33,270,31],[205,34,270,32,"match"],[205,39,270,37],[205,40,270,38,"config"],[205,46,270,44],[205,47,270,45,"regex"],[205,52,270,50],[205,53,270,51],[207,8,272,4],[208,8,273,4],[208,12,273,8,"match"],[208,17,273,13],[208,19,273,15],[209,10,273,15],[209,14,273,15,"_config$pattern"],[209,29,273,15],[210,10,274,6],[210,14,274,12,"matchedParams"],[210,27,274,25],[210,31,274,25,"_config$pattern"],[210,46,274,25],[210,49,274,28,"config"],[210,55,274,34],[210,56,274,35,"pattern"],[210,63,274,42],[210,84,274,28,"_config$pattern"],[210,99,274,28],[210,100,275,10,"split"],[210,105,275,15],[210,106,275,16],[210,109,275,19],[210,110,275,20],[210,111,276,9,"filter"],[210,117,276,15],[210,118,276,16],[210,128,276,17,"p"],[210,129,276,18],[211,12,276,18],[211,19,276,23,"p"],[211,20,276,24],[211,21,276,25,"startsWith"],[211,31,276,35],[211,32,276,36],[211,35,276,39],[211,36,276,40],[212,10,276,40],[212,12,276,41],[212,13,277,9,"reduce"],[212,19,277,15],[212,20,278,10],[212,30,278,11,"acc"],[212,33,278,14],[212,35,278,16,"p"],[212,36,278,17],[212,38,278,19,"i"],[212,39,278,20],[213,12,278,20],[213,19,279,12,"Object"],[213,25,279,18],[213,26,279,19,"assign"],[213,32,279,25],[213,33,279,26,"acc"],[213,36,279,29],[213,42,279,29,"_defineProperty2"],[213,58,279,29],[213,59,279,29,"default"],[213,66,279,29],[213,72,281,15,"p"],[213,73,281,16],[213,75,281,19,"match"],[213,80,281,24],[213,81,281,26],[213,82,281,27,"i"],[213,83,281,28],[213,86,281,31],[213,87,281,32],[213,91,281,36],[213,92,281,37],[213,93,281,38],[213,94,281,39,"replace"],[213,101,281,46],[213,102,281,47],[213,106,281,51],[213,108,281,53],[213,110,281,55],[213,111,281,56],[213,112,282,13],[213,113,282,14],[214,10,282,14],[214,13,283,10],[214,14,283,11],[214,15,284,8],[214,16,284,9],[215,10,286,6,"routes"],[215,16,286,12],[215,19,286,15,"config"],[215,25,286,21],[215,26,286,22,"routeNames"],[215,36,286,32],[215,37,286,33,"map"],[215,40,286,36],[215,41,286,37],[215,51,286,38,"name"],[215,55,286,42],[215,57,286,47],[216,12,286,47],[216,16,286,47,"_config$path"],[216,28,286,47],[217,12,287,8],[217,16,287,14,"config"],[217,22,287,20],[217,25,287,23,"configs"],[217,32,287,30],[217,33,287,31,"find"],[217,37,287,35],[217,38,287,36],[217,48,287,37,"c"],[217,49,287,38],[218,14,287,38],[218,21,287,43,"c"],[218,22,287,44],[218,23,287,45,"screen"],[218,29,287,51],[218,34,287,56,"name"],[218,38,287,60],[219,12,287,60],[219,14,287,61],[220,12,288,8],[220,16,288,14,"params"],[220,22,288,20],[220,25,288,23,"config"],[220,31,288,29],[220,52,288,29,"_config$path"],[220,64,288,29],[220,67,288,23,"config"],[220,73,288,29],[220,74,288,31,"path"],[220,78,288,35],[220,99,288,23,"_config$path"],[220,111,288,23],[220,112,289,12,"split"],[220,117,289,17],[220,118,289,18],[220,121,289,21],[220,122,289,22],[220,123,290,11,"filter"],[220,129,290,17],[220,130,290,18],[220,140,290,19,"p"],[220,141,290,20],[221,14,290,20],[221,21,290,25,"p"],[221,22,290,26],[221,23,290,27,"startsWith"],[221,33,290,37],[221,34,290,38],[221,37,290,41],[221,38,290,42],[222,12,290,42],[222,14,290,43],[222,15,291,11,"reduce"],[222,21,291,17],[222,22,291,39],[222,32,291,40,"acc"],[222,35,291,43],[222,37,291,45,"p"],[222,38,291,46],[222,40,291,51],[223,14,292,12],[223,18,292,18,"value"],[223,23,292,23],[223,26,292,26,"matchedParams"],[223,39,292,39],[223,40,292,40,"p"],[223,41,292,41],[223,42,292,42],[224,14,294,12],[224,18,294,16,"value"],[224,23,294,21],[224,25,294,23],[225,16,294,23],[225,20,294,23,"_config$parse"],[225,33,294,23],[226,16,295,14],[226,20,295,20,"key"],[226,23,295,23],[226,26,295,26,"p"],[226,27,295,27],[226,28,295,28,"replace"],[226,35,295,35],[226,36,295,36],[226,40,295,40],[226,42,295,42],[226,44,295,44],[226,45,295,45],[226,46,295,46,"replace"],[226,53,295,53],[226,54,295,54],[226,59,295,59],[226,61,295,61],[226,63,295,63],[226,64,295,64],[227,16,296,14,"acc"],[227,19,296,17],[227,20,296,18,"key"],[227,23,296,21],[227,24,296,22],[227,27,296,25],[227,28,296,25,"_config$parse"],[227,41,296,25],[227,44,296,25,"config"],[227,50,296,31],[227,51,296,32,"parse"],[227,56,296,37],[227,69,296,25,"_config$parse"],[227,82,296,25],[227,83,296,40,"key"],[227,86,296,43],[227,87,296,44],[227,90,296,47,"config"],[227,96,296,53],[227,97,296,54,"parse"],[227,102,296,59],[227,103,296,60,"key"],[227,106,296,63],[227,107,296,64],[227,108,296,65,"value"],[227,113,296,70],[227,114,296,71],[227,117,296,74,"value"],[227,122,296,79],[228,14,297,12],[229,14,299,12],[229,21,299,19,"acc"],[229,24,299,22],[230,12,300,10],[230,13,300,11],[230,15,300,13],[230,16,300,14],[230,17,300,15],[230,18,300,16],[231,12,302,8],[231,16,302,12,"params"],[231,22,302,18],[231,26,302,22,"Object"],[231,32,302,28],[231,33,302,29,"keys"],[231,37,302,33],[231,38,302,34,"params"],[231,44,302,40],[231,45,302,41],[231,46,302,42,"length"],[231,52,302,48],[231,54,302,50],[232,14,303,10],[232,21,303,17],[233,16,303,19,"name"],[233,20,303,23],[233,22,303,19,"name"],[233,26,303,23],[234,16,303,25,"params"],[234,22,303,31],[234,24,303,25,"params"],[235,14,303,32],[235,15,303,33],[236,12,304,8],[237,12,306,8],[237,19,306,15],[238,14,306,17,"name"],[238,18,306,21],[238,20,306,17,"name"],[239,12,306,22],[239,13,306,23],[240,10,307,6],[240,11,307,7],[240,12,307,8],[241,10,309,6,"remainingPath"],[241,23,309,19],[241,26,309,22,"remainingPath"],[241,39,309,35],[241,40,309,36,"replace"],[241,47,309,43],[241,48,309,44,"match"],[241,53,309,49],[241,54,309,50],[241,55,309,51],[241,56,309,52],[241,58,309,54],[241,60,309,56],[241,61,309,57],[242,10,309,58],[243,8,312,4],[244,6,313,2],[244,7,313,3],[245,6,313,3,"_ret"],[245,10,313,3],[246,4,265,2],[246,9,265,7],[246,13,265,13,"config"],[246,19,265,19],[246,23,265,23,"configs"],[246,30,265,30],[247,6,265,30,"_ret"],[247,10,265,30],[247,13,265,30,"_loop"],[247,18,265,30],[248,6,265,30],[248,10,265,30,"_ret"],[248,14,265,30],[248,22,267,6],[249,6,267,15],[249,10,267,15,"_ret"],[249,14,267,15],[249,22,311,6],[250,4,311,12],[251,4,315,2],[251,11,315,9],[252,6,315,11,"routes"],[252,12,315,17],[252,14,315,11,"routes"],[252,20,315,17],[253,6,315,19,"remainingPath"],[253,19,315,32],[253,21,315,19,"remainingPath"],[254,4,315,33],[254,5,315,34],[255,2,316,0],[255,3,316,1],[256,2,318,0],[256,6,318,6,"createNormalizedConfigs"],[256,29,318,29],[256,32,318,32],[256,41,318,6,"createNormalizedConfigs"],[256,64,318,29,"createNormalizedConfigs"],[256,65,319,2,"screen"],[256,71,319,16],[256,73,320,2,"routeConfig"],[256,84,320,36],[256,86,325,20],[257,4,325,20],[257,8,321,2,"routeNames"],[257,18,321,22],[257,21,321,22,"arguments"],[257,30,321,22],[257,31,321,22,"length"],[257,37,321,22],[257,45,321,22,"arguments"],[257,54,321,22],[257,62,321,22,"undefined"],[257,71,321,22],[257,74,321,22,"arguments"],[257,83,321,22],[257,89,321,25],[257,91,321,27],[258,4,321,27],[258,8,322,2,"initials"],[258,16,322,32],[258,19,322,32,"arguments"],[258,28,322,32],[258,29,322,32,"length"],[258,35,322,32],[258,42,322,32,"arguments"],[258,51,322,32],[258,57,322,32,"undefined"],[258,66,322,32],[259,4,322,32],[259,8,323,2,"parentScreens"],[259,21,323,25],[259,24,323,25,"arguments"],[259,33,323,25],[259,34,323,25,"length"],[259,40,323,25],[259,47,323,25,"arguments"],[259,56,323,25],[259,62,323,25,"undefined"],[259,71,323,25],[260,4,323,25],[260,8,324,2,"parentPattern"],[260,21,324,24],[260,24,324,24,"arguments"],[260,33,324,24],[260,34,324,24,"length"],[260,40,324,24],[260,47,324,24,"arguments"],[260,56,324,24],[260,62,324,24,"undefined"],[260,71,324,24],[261,4,326,2],[261,8,326,8,"configs"],[261,15,326,30],[261,18,326,33],[261,20,326,35],[262,4,328,2,"routeNames"],[262,14,328,12],[262,15,328,13,"push"],[262,19,328,17],[262,20,328,18,"screen"],[262,26,328,24],[262,27,328,25],[263,4,330,2,"parentScreens"],[263,17,330,15],[263,18,330,16,"push"],[263,22,330,20],[263,23,330,21,"screen"],[263,29,330,27],[263,30,330,28],[265,4,332,2],[266,4,333,2],[266,8,333,8,"config"],[266,14,333,14],[266,17,333,17,"routeConfig"],[266,28,333,28],[266,29,333,29,"screen"],[266,35,333,35],[266,36,333,36],[267,4,335,2],[267,8,335,6],[267,15,335,13,"config"],[267,21,335,19],[267,26,335,24],[267,34,335,32],[267,36,335,34],[268,6,336,4],[269,6,337,4],[269,10,337,10,"pattern"],[269,17,337,17],[269,20,337,20,"parentPattern"],[269,33,337,33],[269,36,337,36,"joinPaths"],[269,45,337,45],[269,46,337,46,"parentPattern"],[269,59,337,59],[269,61,337,61,"config"],[269,67,337,67],[269,68,337,68],[269,71,337,71,"config"],[269,77,337,77],[270,6,339,4,"configs"],[270,13,339,11],[270,14,339,12,"push"],[270,18,339,16],[270,19,339,17,"createConfigItem"],[270,35,339,33],[270,36,339,34,"screen"],[270,42,339,40],[270,44,339,42,"routeNames"],[270,54,339,52],[270,56,339,54,"pattern"],[270,63,339,61],[270,65,339,63,"config"],[270,71,339,69],[270,72,339,70],[270,73,339,71],[271,4,340,2],[271,5,340,3],[271,11,340,9],[271,15,340,13],[271,22,340,20,"config"],[271,28,340,26],[271,33,340,31],[271,41,340,39],[271,43,340,41],[272,6,341,4],[272,10,341,8,"pattern"],[272,18,341,35],[274,6,343,4],[275,6,344,4],[276,6,345,4],[277,6,346,4],[277,10,346,8],[277,17,346,15,"config"],[277,23,346,21],[277,24,346,22,"path"],[277,28,346,26],[277,33,346,31],[277,41,346,39],[277,43,346,41],[278,8,347,6],[278,12,347,10,"config"],[278,18,347,16],[278,19,347,17,"exact"],[278,24,347,22],[278,28,347,26,"config"],[278,34,347,32],[278,35,347,33,"path"],[278,39,347,37],[278,44,347,42,"undefined"],[278,53,347,51],[278,55,347,53],[279,10,348,8],[279,16,348,14],[279,20,348,18,"Error"],[279,25,348,23],[279,26,349,10],[279,176,350,8],[279,177,350,9],[280,8,351,6],[281,8,353,6,"pattern"],[281,16,353,13],[281,19,354,8,"config"],[281,25,354,14],[281,26,354,15,"exact"],[281,31,354,20],[281,36,354,25],[281,40,354,29],[281,43,355,12,"joinPaths"],[281,52,355,21],[281,53,355,22,"parentPattern"],[281,66,355,35],[281,70,355,39],[281,72,355,41],[281,74,355,43,"config"],[281,80,355,49],[281,81,355,50,"path"],[281,85,355,54],[281,89,355,58],[281,91,355,60],[281,92,355,61],[281,95,356,12,"config"],[281,101,356,18],[281,102,356,19,"path"],[281,106,356,23],[281,110,356,27],[281,112,356,29],[282,8,358,6,"configs"],[282,15,358,13],[282,16,358,14,"push"],[282,20,358,18],[282,21,359,8,"createConfigItem"],[282,37,359,24],[282,38,360,10,"screen"],[282,44,360,16],[282,46,361,10,"routeNames"],[282,56,361,20],[282,58,362,10,"pattern"],[282,66,362,17],[282,68,363,10,"config"],[282,74,363,16],[282,75,363,17,"path"],[282,79,363,21],[282,81,364,10,"config"],[282,87,364,16],[282,88,364,17,"parse"],[282,93,365,8],[282,94,366,6],[282,95,366,7],[283,6,367,4],[284,6,369,4],[284,10,369,8,"config"],[284,16,369,14],[284,17,369,15,"screens"],[284,24,369,22],[284,26,369,24],[285,8,370,6],[286,8,371,6],[286,12,371,10,"config"],[286,18,371,16],[286,19,371,17,"initialRouteName"],[286,35,371,33],[286,37,371,35],[287,10,372,8,"initials"],[287,18,372,16],[287,19,372,17,"push"],[287,23,372,21],[287,24,372,22],[288,12,373,10,"initialRouteName"],[288,28,373,26],[288,30,373,28,"config"],[288,36,373,34],[288,37,373,35,"initialRouteName"],[288,53,373,51],[289,12,374,10,"parentScreens"],[289,25,374,23],[289,27,374,10,"parentScreens"],[290,10,375,8],[290,11,375,9],[290,12,375,10],[291,8,376,6],[292,8,378,6,"Object"],[292,14,378,12],[292,15,378,13,"keys"],[292,19,378,17],[292,20,378,18,"config"],[292,26,378,24],[292,27,378,25,"screens"],[292,34,378,32],[292,35,378,33],[292,36,378,34,"forEach"],[292,43,378,41],[292,44,378,42],[292,54,378,43,"nestedConfig"],[292,66,378,55],[292,68,378,60],[293,10,378,60],[293,14,378,60,"_pattern2"],[293,23,378,60],[294,10,379,8],[294,14,379,14,"result"],[294,20,379,20],[294,23,379,23,"createNormalizedConfigs"],[294,46,379,46],[294,47,380,10,"nestedConfig"],[294,59,380,22],[294,61,381,10,"config"],[294,67,381,16],[294,68,381,17,"screens"],[294,75,381,24],[294,77,382,10,"routeNames"],[294,87,382,20],[294,89,383,10,"initials"],[294,97,383,18],[294,103,383,18,"_toConsumableArray2"],[294,122,383,18],[294,123,383,18,"default"],[294,130,383,18],[294,132,384,14,"parentScreens"],[294,145,384,27],[294,149,384,27,"_pattern2"],[294,158,384,27],[294,161,385,10,"pattern"],[294,169,385,17],[294,181,385,17,"_pattern2"],[294,190,385,17],[294,193,385,21,"parentPattern"],[294,206,386,8],[294,207,386,9],[295,10,388,8,"configs"],[295,17,388,15],[295,18,388,16,"push"],[295,22,388,20],[295,23,388,20,"apply"],[295,28,388,20],[295,29,388,8,"configs"],[295,36,388,15],[295,42,388,15,"_toConsumableArray2"],[295,61,388,15],[295,62,388,15,"default"],[295,69,388,15],[295,71,388,24,"result"],[295,77,388,30],[295,79,388,31],[296,8,389,6],[296,9,389,7],[296,10,389,8],[297,6,390,4],[298,4,391,2],[299,4,393,2,"routeNames"],[299,14,393,12],[299,15,393,13,"pop"],[299,18,393,16],[299,19,393,17],[299,20,393,18],[300,4,395,2],[300,11,395,9,"configs"],[300,18,395,16],[301,2,396,0],[301,3,396,1],[302,2,398,0],[302,6,398,6,"createConfigItem"],[302,22,398,22],[302,25,398,25],[302,34,398,6,"createConfigItem"],[302,50,398,22,"createConfigItem"],[302,51,399,2,"screen"],[302,57,399,16],[302,59,400,2,"routeNames"],[302,69,400,22],[302,71,401,2,"pattern"],[302,78,401,17],[302,80,402,2,"path"],[302,84,402,14],[302,86,403,2,"parse"],[302,91,403,21],[302,93,404,18],[303,4,405,2],[304,4,406,2,"pattern"],[304,11,406,9],[304,14,406,12,"pattern"],[304,21,406,19],[304,22,406,20,"split"],[304,27,406,25],[304,28,406,26],[304,31,406,29],[304,32,406,30],[304,33,406,31,"filter"],[304,39,406,37],[304,40,406,38,"Boolean"],[304,47,406,45],[304,48,406,46],[304,49,406,47,"join"],[304,53,406,51],[304,54,406,52],[304,57,406,55],[304,58,406,56],[305,4,408,2],[305,8,408,8,"regex"],[305,13,408,13],[305,16,408,16,"pattern"],[305,23,408,23],[305,26,409,6],[305,30,409,10,"RegExp"],[305,36,409,16],[305,37,410,9],[305,42,410,13,"pattern"],[305,49,410,20],[305,50,411,11,"split"],[305,55,411,16],[305,56,411,17],[305,59,411,20],[305,60,411,21],[305,61,412,11,"map"],[305,64,412,14],[305,65,412,15],[305,75,412,16,"it"],[305,77,412,18],[305,79,412,23],[306,6,413,12],[306,10,413,16,"it"],[306,12,413,18],[306,13,413,19,"startsWith"],[306,23,413,29],[306,24,413,30],[306,27,413,33],[306,28,413,34],[306,30,413,36],[307,8,414,14],[307,15,414,22],[307,29,414,35,"it"],[307,31,414,37],[307,32,414,38,"endsWith"],[307,40,414,46],[307,41,414,47],[307,44,414,50],[307,45,414,51],[307,48,414,54],[307,51,414,57],[307,54,414,60],[307,56,414,63],[307,59,414,65],[308,6,415,12],[309,6,417,12],[309,13,417,20],[309,16,417,22,"it"],[309,18,417,24],[309,23,417,29],[309,26,417,32],[309,29,417,35],[309,33,417,39],[309,36,417,42],[309,40,417,42,"escape"],[309,67,417,48],[309,69,417,49,"it"],[309,71,417,51],[309,72,417,53],[309,77,417,57],[310,4,418,10],[310,5,418,11],[310,6,418,12],[310,7,419,11,"join"],[310,11,419,15],[310,12,419,16],[310,14,419,18],[310,15,419,20],[310,18,420,6],[310,19,420,7],[310,22,421,6,"undefined"],[310,31,421,15],[311,4,423,2],[311,11,423,9],[312,6,424,4,"screen"],[312,12,424,10],[312,14,424,4,"screen"],[312,20,424,10],[313,6,425,4,"regex"],[313,11,425,9],[313,13,425,4,"regex"],[313,18,425,9],[314,6,426,4,"pattern"],[314,13,426,11],[314,15,426,4,"pattern"],[314,22,426,11],[315,6,427,4,"path"],[315,10,427,8],[315,12,427,4,"path"],[315,16,427,8],[316,6,428,4],[317,6,429,4,"routeNames"],[317,16,429,14],[317,22,429,14,"_toConsumableArray2"],[317,41,429,14],[317,42,429,14,"default"],[317,49,429,14],[317,51,429,20,"routeNames"],[317,61,429,30],[317,62,429,31],[318,6,430,4,"parse"],[318,11,430,9],[318,13,430,4,"parse"],[319,4,431,2],[319,5,431,3],[320,2,432,0],[320,3,432,1],[321,2,434,0],[321,6,434,6,"findParseConfigForRoute"],[321,29,434,29],[321,32,434,32],[321,41,434,6,"findParseConfigForRoute"],[321,64,434,29,"findParseConfigForRoute"],[321,65,435,2,"routeName"],[321,74,435,19],[321,76,436,2,"flatConfig"],[321,86,436,27],[321,88,437,30],[322,4,438,2],[322,9,438,7],[322,13,438,13,"config"],[322,19,438,19],[322,23,438,23,"flatConfig"],[322,33,438,33],[322,35,438,35],[323,6,439,4],[323,10,439,8,"routeName"],[323,19,439,17],[323,24,439,22,"config"],[323,30,439,28],[323,31,439,29,"routeNames"],[323,41,439,39],[323,42,439,40,"config"],[323,48,439,46],[323,49,439,47,"routeNames"],[323,59,439,57],[323,60,439,58,"length"],[323,66,439,64],[323,69,439,67],[323,70,439,68],[323,71,439,69],[323,73,439,71],[324,8,440,6],[324,15,440,13,"config"],[324,21,440,19],[324,22,440,20,"parse"],[324,27,440,25],[325,6,441,4],[326,4,442,2],[327,4,444,2],[327,11,444,9,"undefined"],[327,20,444,18],[328,2,445,0],[328,3,445,1],[330,2,447,0],[331,2,448,0],[331,6,448,6,"findInitialRoute"],[331,22,448,22],[331,25,448,25],[331,34,448,6,"findInitialRoute"],[331,50,448,22,"findInitialRoute"],[331,51,449,2,"routeName"],[331,60,449,19],[331,62,450,2,"parentScreens"],[331,75,450,25],[331,77,451,2,"initialRoutes"],[331,90,451,37],[331,92,452,25],[332,4,453,2],[332,9,453,7],[332,13,453,13,"config"],[332,19,453,19],[332,23,453,23,"initialRoutes"],[332,36,453,36],[332,38,453,38],[333,6,454,4],[333,10,454,8,"parentScreens"],[333,23,454,21],[333,24,454,22,"length"],[333,30,454,28],[333,35,454,33,"config"],[333,41,454,39],[333,42,454,40,"parentScreens"],[333,55,454,53],[333,56,454,54,"length"],[333,62,454,60],[333,64,454,62],[334,8,455,6],[334,12,455,10,"sameParents"],[334,23,455,21],[334,26,455,24],[334,30,455,28],[335,8,456,6],[335,13,456,11],[335,17,456,15,"i"],[335,18,456,16],[335,21,456,19],[335,22,456,20],[335,24,456,22,"i"],[335,25,456,23],[335,28,456,26,"parentScreens"],[335,41,456,39],[335,42,456,40,"length"],[335,48,456,46],[335,50,456,48,"i"],[335,51,456,49],[335,53,456,51],[335,55,456,53],[336,10,457,8],[336,14,457,12,"parentScreens"],[336,27,457,25],[336,28,457,26,"i"],[336,29,457,27],[336,30,457,28],[336,31,457,29,"localeCompare"],[336,44,457,42],[336,45,457,43,"config"],[336,51,457,49],[336,52,457,50,"parentScreens"],[336,65,457,63],[336,66,457,64,"i"],[336,67,457,65],[336,68,457,66],[336,69,457,67],[336,74,457,72],[336,75,457,73],[336,77,457,75],[337,12,458,10,"sameParents"],[337,23,458,21],[337,26,458,24],[337,31,458,29],[338,12,459,10],[339,10,460,8],[340,8,461,6],[341,8,462,6],[341,12,462,10,"sameParents"],[341,23,462,21],[341,25,462,23],[342,10,463,8],[342,17,463,15,"routeName"],[342,26,463,24],[342,31,463,29,"config"],[342,37,463,35],[342,38,463,36,"initialRouteName"],[342,54,463,52],[342,57,464,12,"config"],[342,63,464,18],[342,64,464,19,"initialRouteName"],[342,80,464,35],[342,83,465,12,"undefined"],[342,92,465,21],[343,8,466,6],[344,6,467,4],[345,4,468,2],[346,4,469,2],[346,11,469,9,"undefined"],[346,20,469,18],[347,2,470,0],[347,3,470,1],[349,2,472,0],[350,2,473,0],[351,2,474,0],[351,6,474,6,"createStateObject"],[351,23,474,23],[351,26,474,26],[351,35,474,6,"createStateObject"],[351,52,474,23,"createStateObject"],[351,53,475,2,"initialRoute"],[351,65,475,34],[351,67,476,2,"route"],[351,72,476,20],[351,74,477,2,"isEmpty"],[351,81,477,18],[351,83,478,19],[352,4,479,2],[352,8,479,6,"isEmpty"],[352,15,479,13],[352,17,479,15],[353,6,480,4],[353,10,480,8,"initialRoute"],[353,22,480,20],[353,24,480,22],[354,8,481,6],[354,15,481,13],[355,10,482,8,"index"],[355,15,482,13],[355,17,482,15],[355,18,482,16],[356,10,483,8,"routes"],[356,16,483,14],[356,18,483,16],[356,19,483,17],[357,12,483,19,"name"],[357,16,483,23],[357,18,483,25,"initialRoute"],[358,10,483,38],[358,11,483,39],[358,13,483,41,"route"],[358,18,483,46],[359,8,484,6],[359,9,484,7],[360,6,485,4],[360,7,485,5],[360,13,485,11],[361,8,486,6],[361,15,486,13],[362,10,487,8,"routes"],[362,16,487,14],[362,18,487,16],[362,19,487,17,"route"],[362,24,487,22],[363,8,488,6],[363,9,488,7],[364,6,489,4],[365,4,490,2],[365,5,490,3],[365,11,490,9],[366,6,491,4],[366,10,491,8,"initialRoute"],[366,22,491,20],[366,24,491,22],[367,8,492,6],[367,15,492,13],[368,10,493,8,"index"],[368,15,493,13],[368,17,493,15],[368,18,493,16],[369,10,494,8,"routes"],[369,16,494,14],[369,18,494,16],[369,19,494,17],[370,12,494,19,"name"],[370,16,494,23],[370,18,494,25,"initialRoute"],[371,10,494,38],[371,11,494,39],[371,13,494,39,"_objectSpread"],[371,26,494,39],[371,27,494,39,"_objectSpread"],[371,40,494,39],[371,45,494,46,"route"],[371,50,494,51],[372,12,494,53,"state"],[372,17,494,58],[372,19,494,60],[373,14,494,62,"routes"],[373,20,494,68],[373,22,494,70],[374,12,494,73],[375,10,494,74],[376,8,495,6],[376,9,495,7],[377,6,496,4],[377,7,496,5],[377,13,496,11],[378,8,497,6],[378,15,497,13],[379,10,498,8,"routes"],[379,16,498,14],[379,18,498,16],[379,19,498,16,"_objectSpread"],[379,32,498,16],[379,33,498,16,"_objectSpread"],[379,46,498,16],[379,51,498,22,"route"],[379,56,498,27],[380,12,498,29,"state"],[380,17,498,34],[380,19,498,36],[381,14,498,38,"routes"],[381,20,498,44],[381,22,498,46],[382,12,498,49],[383,10,498,50],[384,8,499,6],[384,9,499,7],[385,6,500,4],[386,4,501,2],[387,2,502,0],[387,3,502,1],[388,2,504,0],[388,6,504,6,"createNestedStateObject"],[388,29,504,29],[388,32,504,32],[388,41,504,6,"createNestedStateObject"],[388,64,504,29,"createNestedStateObject"],[388,65,505,2,"path"],[388,69,505,14],[388,71,506,2,"routes"],[388,77,506,23],[388,79,507,2,"initialRoutes"],[388,92,507,37],[388,94,508,2,"flatConfig"],[388,104,508,28],[388,106,509,5],[389,4,510,2],[389,8,510,6,"state"],[389,13,510,25],[390,4,511,2],[390,8,511,6,"route"],[390,13,511,11],[390,16,511,14,"routes"],[390,22,511,20],[390,23,511,21,"shift"],[390,28,511,26],[390,29,511,27],[390,30,511,43],[391,4,512,2],[391,8,512,8,"parentScreens"],[391,21,512,31],[391,24,512,34],[391,26,512,36],[392,4,514,2],[392,8,514,6,"initialRoute"],[392,20,514,18],[392,23,514,21,"findInitialRoute"],[392,39,514,37],[392,40,514,38,"route"],[392,45,514,43],[392,46,514,44,"name"],[392,50,514,48],[392,52,514,50,"parentScreens"],[392,65,514,63],[392,67,514,65,"initialRoutes"],[392,80,514,78],[392,81,514,79],[393,4,516,2,"parentScreens"],[393,17,516,15],[393,18,516,16,"push"],[393,22,516,20],[393,23,516,21,"route"],[393,28,516,26],[393,29,516,27,"name"],[393,33,516,31],[393,34,516,32],[394,4,518,2,"state"],[394,9,518,7],[394,12,518,10,"createStateObject"],[394,29,518,27],[394,30,518,28,"initialRoute"],[394,42,518,40],[394,44,518,42,"route"],[394,49,518,47],[394,51,518,49,"routes"],[394,57,518,55],[394,58,518,56,"length"],[394,64,518,62],[394,69,518,67],[394,70,518,68],[394,71,518,69],[395,4,520,2],[395,8,520,6,"routes"],[395,14,520,12],[395,15,520,13,"length"],[395,21,520,19],[395,24,520,22],[395,25,520,23],[395,27,520,25],[396,6,521,4],[396,10,521,8,"nestedState"],[396,21,521,19],[396,24,521,22,"state"],[396,29,521,27],[397,6,523,4],[397,13,523,12,"route"],[397,18,523,17],[397,21,523,20,"routes"],[397,27,523,26],[397,28,523,27,"shift"],[397,33,523,32],[397,34,523,33],[397,35,523,49],[397,37,523,52],[398,8,524,6,"initialRoute"],[398,20,524,18],[398,23,524,21,"findInitialRoute"],[398,39,524,37],[398,40,524,38,"route"],[398,45,524,43],[398,46,524,44,"name"],[398,50,524,48],[398,52,524,50,"parentScreens"],[398,65,524,63],[398,67,524,65,"initialRoutes"],[398,80,524,78],[398,81,524,79],[399,8,526,6],[399,12,526,12,"nestedStateIndex"],[399,28,526,28],[399,31,527,8,"nestedState"],[399,42,527,19],[399,43,527,20,"index"],[399,48,527,25],[399,52,527,29,"nestedState"],[399,63,527,40],[399,64,527,41,"routes"],[399,70,527,47],[399,71,527,48,"length"],[399,77,527,54],[399,80,527,57],[399,81,527,58],[400,8,529,6,"nestedState"],[400,19,529,17],[400,20,529,18,"routes"],[400,26,529,24],[400,27,529,25,"nestedStateIndex"],[400,43,529,41],[400,44,529,42],[400,45,529,43,"state"],[400,50,529,48],[400,53,529,51,"createStateObject"],[400,70,529,68],[400,71,530,8,"initialRoute"],[400,83,530,20],[400,85,531,8,"route"],[400,90,531,13],[400,92,532,8,"routes"],[400,98,532,14],[400,99,532,15,"length"],[400,105,532,21],[400,110,532,26],[400,111,533,6],[400,112,533,7],[401,8,535,6],[401,12,535,10,"routes"],[401,18,535,16],[401,19,535,17,"length"],[401,25,535,23],[401,28,535,26],[401,29,535,27],[401,31,535,29],[402,10,536,8,"nestedState"],[402,21,536,19],[402,24,536,22,"nestedState"],[402,35,536,33],[402,36,536,34,"routes"],[402,42,536,40],[402,43,536,41,"nestedStateIndex"],[402,59,536,57],[402,60,536,58],[402,61,537,11,"state"],[402,66,537,32],[403,8,538,6],[404,8,540,6,"parentScreens"],[404,21,540,19],[404,22,540,20,"push"],[404,26,540,24],[404,27,540,25,"route"],[404,32,540,30],[404,33,540,31,"name"],[404,37,540,35],[404,38,540,36],[405,6,541,4],[406,4,542,2],[407,4,544,2,"route"],[407,9,544,7],[407,12,544,10],[407,16,544,10,"findFocusedRoute"],[407,41,544,26],[407,43,544,27,"state"],[407,48,544,32],[407,49,544,48],[408,4,545,2,"route"],[408,9,545,7],[408,10,545,8,"path"],[408,14,545,12],[408,17,545,15,"path"],[408,21,545,19],[409,4,547,2],[409,8,547,8,"params"],[409,14,547,14],[409,17,547,17,"parseQueryParams"],[409,33,547,33],[409,34,548,4,"path"],[409,38,548,8],[409,40,549,4,"flatConfig"],[409,50,549,14],[409,53,549,17,"findParseConfigForRoute"],[409,76,549,40],[409,77,549,41,"route"],[409,82,549,46],[409,83,549,47,"name"],[409,87,549,51],[409,89,549,53,"flatConfig"],[409,99,549,63],[409,100,549,64],[409,103,549,67,"undefined"],[409,112,550,2],[409,113,550,3],[410,4,552,2],[410,8,552,6,"params"],[410,14,552,12],[410,16,552,14],[411,6,553,4,"route"],[411,11,553,9],[411,12,553,10,"params"],[411,18,553,16],[411,21,553,16,"_objectSpread"],[411,34,553,16],[411,35,553,16,"_objectSpread"],[411,48,553,16],[411,53,553,24,"route"],[411,58,553,29],[411,59,553,30,"params"],[411,65,553,36],[411,68,553,41,"params"],[411,74,553,47],[411,75,553,49],[412,4,554,2],[413,4,556,2],[413,11,556,9,"state"],[413,16,556,14],[414,2,557,0],[414,3,557,1],[415,2,559,0],[415,6,559,6,"parseQueryParams"],[415,22,559,22],[415,25,559,25],[415,34,559,6,"parseQueryParams"],[415,50,559,22,"parseQueryParams"],[415,51,560,2,"path"],[415,55,560,14],[415,57,561,2,"parseConfig"],[415,68,561,54],[415,70,562,5],[416,4,563,2],[416,8,563,8,"query"],[416,13,563,13],[416,16,563,16,"path"],[416,20,563,20],[416,21,563,21,"split"],[416,26,563,26],[416,27,563,27],[416,30,563,30],[416,31,563,31],[416,32,563,32],[416,33,563,33],[416,34,563,34],[417,4,564,2],[417,8,564,8,"params"],[417,14,564,14],[417,17,564,17,"queryString"],[417,28,564,28],[417,29,564,29,"parse"],[417,34,564,34],[417,35,564,35,"query"],[417,40,564,40],[417,41,564,41],[418,4,566,2],[418,8,566,6,"parseConfig"],[418,19,566,17],[418,21,566,19],[419,6,567,4,"Object"],[419,12,567,10],[419,13,567,11,"keys"],[419,17,567,15],[419,18,567,16,"params"],[419,24,567,22],[419,25,567,23],[419,26,567,24,"forEach"],[419,33,567,31],[419,34,567,32],[419,44,567,33,"name"],[419,48,567,37],[419,50,567,42],[420,8,568,6],[420,12,569,8,"Object"],[420,18,569,14],[420,19,569,15,"hasOwnProperty"],[420,33,569,29],[420,34,569,30,"call"],[420,38,569,34],[420,39,569,35,"parseConfig"],[420,50,569,46],[420,52,569,48,"name"],[420,56,569,52],[420,57,569,53],[420,61,570,8],[420,68,570,15,"params"],[420,74,570,21],[420,75,570,22,"name"],[420,79,570,26],[420,80,570,27],[420,85,570,32],[420,93,570,40],[420,95,571,8],[421,10,572,8,"params"],[421,16,572,14],[421,17,572,15,"name"],[421,21,572,19],[421,22,572,20],[421,25,572,23,"parseConfig"],[421,36,572,34],[421,37,572,35,"name"],[421,41,572,39],[421,42,572,40],[421,43,572,41,"params"],[421,49,572,47],[421,50,572,48,"name"],[421,54,572,52],[421,55,572,63],[421,56,572,64],[422,8,573,6],[423,6,574,4],[423,7,574,5],[423,8,574,6],[424,4,575,2],[425,4,577,2],[425,11,577,9,"Object"],[425,17,577,15],[425,18,577,16,"keys"],[425,22,577,20],[425,23,577,21,"params"],[425,29,577,27],[425,30,577,28],[425,31,577,29,"length"],[425,37,577,35],[425,40,577,38,"params"],[425,46,577,44],[425,49,577,47,"undefined"],[425,58,577,56],[426,2,578,0],[426,3,578,1],[427,0,578,2]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","Object.keys.map$argument_0","concat.sort$argument_0","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","configs.find$argument_0","config.routeNames.every$argument_0","match.routeNames.map$argument_0","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.filter$argument_0","config.pattern.split.filter.reduce$argument_0","config.routeNames.map$argument_0","config.path.split.filter$argument_0","config.path.split.filter.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;eCgE;WCgC;ODG;kCEY;SFO;UGG;KHiD;8CIG;oBCS,sBD;oBEC,sBF;GJgB;MOM;UCI,wBD,wBC,OD;SPC;6BSM,oBT;gBUgB;MVI;CDe;kBYE;yBCE,mBD;cZE;4BcE;gBCgB,wBD;UEE;cFI;qCGI;oCTC,wBS;kBCG,wBD;uCEC;WFS;OHO;CdS;gCoBE;0CC4D;ODW;CpBO;yBsBE;eCc;WDM;CtBc;gCwBE;CxBW;yByBG;CzBsB;0B0BI;C1B4B;gC2BE;C3BqD;yB4BE;gCPQ;KOO;C5BI"}},"type":"js/module"}]}