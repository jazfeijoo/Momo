{"dependencies":[{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":18,"index":248},"end":{"line":13,"column":38,"index":268}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var invariant = _$$_REQUIRE(_dependencyMap[0], \"invariant\");\n  function processAspectRatio(aspectRatio) {\n    if (typeof aspectRatio === 'number') {\n      return aspectRatio;\n    }\n    if (typeof aspectRatio !== 'string') {\n      if (__DEV__) {\n        invariant(!aspectRatio, 'aspectRatio must either be a number, a ratio string or `auto`. You passed: %s', aspectRatio);\n      }\n      return;\n    }\n    var matches = aspectRatio.split('/').map(function (s) {\n      return s.trim();\n    });\n    if (matches.includes('auto')) {\n      if (__DEV__) {\n        invariant(matches.length, 'aspectRatio does not support `auto <ratio>`. You passed: %s', aspectRatio);\n      }\n      return;\n    }\n    var hasNonNumericValues = matches.some(function (n) {\n      return Number.isNaN(Number(n));\n    });\n    if (__DEV__) {\n      invariant(!hasNonNumericValues && (matches.length === 1 || matches.length === 2), 'aspectRatio must either be a number, a ratio string or `auto`. You passed: %s', aspectRatio);\n    }\n    if (hasNonNumericValues) {\n      return;\n    }\n    if (matches.length === 2) {\n      return Number(matches[0]) / Number(matches[1]);\n    }\n    return Number(matches[0]);\n  }\n  module.exports = processAspectRatio;\n});","lineCount":49,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,13,0],[14,6,13,6,"invariant"],[14,15,13,15],[14,18,13,18,"require"],[14,29,13,25],[14,30,13,25,"_dependencyMap"],[14,44,13,25],[14,60,13,37],[14,61,13,38],[15,2,15,0],[15,11,15,9,"processAspectRatio"],[15,29,15,27,"processAspectRatio"],[15,30,15,28,"aspectRatio"],[15,41,15,57],[15,43,15,68],[16,4,16,2],[16,8,16,6],[16,15,16,13,"aspectRatio"],[16,26,16,24],[16,31,16,29],[16,39,16,37],[16,41,16,39],[17,6,17,4],[17,13,17,11,"aspectRatio"],[17,24,17,22],[18,4,18,2],[19,4,19,2],[19,8,19,6],[19,15,19,13,"aspectRatio"],[19,26,19,24],[19,31,19,29],[19,39,19,37],[19,41,19,39],[20,6,20,4],[20,10,20,8,"__DEV__"],[20,17,20,15],[20,19,20,17],[21,8,21,6,"invariant"],[21,17,21,15],[21,18,22,8],[21,19,22,9,"aspectRatio"],[21,30,22,20],[21,32,23,8],[21,111,23,87],[21,113,24,8,"aspectRatio"],[21,124,25,6],[21,125,25,7],[22,6,26,4],[23,6,27,4],[24,4,28,2],[25,4,30,2],[25,8,30,8,"matches"],[25,15,30,15],[25,18,30,18,"aspectRatio"],[25,29,30,29],[25,30,30,30,"split"],[25,35,30,35],[25,36,30,36],[25,39,30,39],[25,40,30,40],[25,41,30,41,"map"],[25,44,30,44],[25,45,30,45],[25,55,30,45,"s"],[25,56,30,46],[26,6,30,46],[26,13,30,50,"s"],[26,14,30,51],[26,15,30,52,"trim"],[26,19,30,56],[26,20,30,57],[26,21,30,58],[27,4,30,58],[27,6,30,59],[28,4,32,2],[28,8,32,6,"matches"],[28,15,32,13],[28,16,32,14,"includes"],[28,24,32,22],[28,25,32,23],[28,31,32,29],[28,32,32,30],[28,34,32,32],[29,6,33,4],[29,10,33,8,"__DEV__"],[29,17,33,15],[29,19,33,17],[30,8,34,6,"invariant"],[30,17,34,15],[30,18,35,8,"matches"],[30,25,35,15],[30,26,35,16,"length"],[30,32,35,22],[30,34,36,8],[30,95,36,69],[30,97,37,8,"aspectRatio"],[30,108,38,6],[30,109,38,7],[31,6,39,4],[32,6,40,4],[33,4,41,2],[34,4,43,2],[34,8,43,8,"hasNonNumericValues"],[34,27,43,27],[34,30,43,30,"matches"],[34,37,43,37],[34,38,43,38,"some"],[34,42,43,42],[34,43,43,43],[34,53,43,43,"n"],[34,54,43,44],[35,6,43,44],[35,13,43,48,"Number"],[35,19,43,54],[35,20,43,55,"isNaN"],[35,25,43,60],[35,26,43,61,"Number"],[35,32,43,67],[35,33,43,68,"n"],[35,34,43,69],[35,35,43,70],[35,36,43,71],[36,4,43,71],[36,6,43,72],[37,4,44,2],[37,8,44,6,"__DEV__"],[37,15,44,13],[37,17,44,15],[38,6,45,4,"invariant"],[38,15,45,13],[38,16,46,6],[38,17,46,7,"hasNonNumericValues"],[38,36,46,26],[38,41,46,31,"matches"],[38,48,46,38],[38,49,46,39,"length"],[38,55,46,45],[38,60,46,50],[38,61,46,51],[38,65,46,55,"matches"],[38,72,46,62],[38,73,46,63,"length"],[38,79,46,69],[38,84,46,74],[38,85,46,75],[38,86,46,76],[38,88,47,6],[38,167,47,85],[38,169,48,6,"aspectRatio"],[38,180,49,4],[38,181,49,5],[39,4,50,2],[40,4,52,2],[40,8,52,6,"hasNonNumericValues"],[40,27,52,25],[40,29,52,27],[41,6,53,4],[42,4,54,2],[43,4,56,2],[43,8,56,6,"matches"],[43,15,56,13],[43,16,56,14,"length"],[43,22,56,20],[43,27,56,25],[43,28,56,26],[43,30,56,28],[44,6,57,4],[44,13,57,11,"Number"],[44,19,57,17],[44,20,57,18,"matches"],[44,27,57,25],[44,28,57,26],[44,29,57,27],[44,30,57,28],[44,31,57,29],[44,34,57,32,"Number"],[44,40,57,38],[44,41,57,39,"matches"],[44,48,57,46],[44,49,57,47],[44,50,57,48],[44,51,57,49],[44,52,57,50],[45,4,58,2],[46,4,60,2],[46,11,60,9,"Number"],[46,17,60,15],[46,18,60,16,"matches"],[46,25,60,23],[46,26,60,24],[46,27,60,25],[46,28,60,26],[46,29,60,27],[47,2,61,0],[48,2,63,0,"module"],[48,8,63,6],[48,9,63,7,"exports"],[48,16,63,14],[48,19,63,17,"processAspectRatio"],[48,37,63,35],[49,0,63,36]],"functionMap":{"names":["<global>","processAspectRatio","aspectRatio.split.map$argument_0","matches.some$argument_0"],"mappings":"AAA;ACc;6CCe,aD;2CEa,4BF;CDkB"}},"type":"js/module"}]}