{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":422,"column":0,"index":14427}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"../../EventEmitter/RCTDeviceEventEmitter","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":0,"index":416},"end":{"line":15,"column":77,"index":493}}],"key":"r87Yt7vbAr+C1I9qeBMQ65TxQNU="}},{"name":"../../ReactNative/RendererProxy","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":0,"index":494},"end":{"line":16,"column":71,"index":565}}],"key":"QxznglvNF7hpOO8cCvqhdE7Uo6Y="}},{"name":"../../Utilities/Platform","data":{"asyncType":null,"locs":[{"start":{"line":17,"column":0,"index":566},"end":{"line":17,"column":48,"index":614}}],"key":"u8HkMskTipFtyna6raQCNa0ZU48="}},{"name":"./legacySendAccessibilityEvent","data":{"asyncType":null,"locs":[{"start":{"line":18,"column":0,"index":615},"end":{"line":18,"column":74,"index":689}}],"key":"tyfXp/aGwUYa7fV5QNchmcoIc/0="}},{"name":"./NativeAccessibilityInfo","data":{"asyncType":null,"locs":[{"start":{"line":19,"column":0,"index":690},"end":{"line":19,"column":71,"index":761}}],"key":"l3xdACzrGnutwLJ1TpOKOM+V44g="}},{"name":"./NativeAccessibilityManager","data":{"asyncType":null,"locs":[{"start":{"line":20,"column":0,"index":762},"end":{"line":20,"column":73,"index":835}}],"key":"MuIa7n68FHi91IuTdBFDVSRAuZ4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../../EventEmitter/RCTDeviceEventEmitter\"));\n  var _RendererProxy = _$$_REQUIRE(_dependencyMap[2], \"../../ReactNative/RendererProxy\");\n  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../../Utilities/Platform\"));\n  var _legacySendAccessibilityEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./legacySendAccessibilityEvent\"));\n  var _NativeAccessibilityInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./NativeAccessibilityInfo\"));\n  var _NativeAccessibilityManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./NativeAccessibilityManager\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  // Events that are only supported on Android.\n\n  // Events that are only supported on iOS.\n\n  // Mapping of public event names to platform-specific event names.\n  var EventNames = _Platform.default.OS === 'android' ? new Map([['change', 'touchExplorationDidChange'], ['reduceMotionChanged', 'reduceMotionDidChange'], ['screenReaderChanged', 'touchExplorationDidChange'], ['accessibilityServiceChanged', 'accessibilityServiceDidChange']]) : new Map([['announcementFinished', 'announcementFinished'], ['boldTextChanged', 'boldTextChanged'], ['change', 'screenReaderChanged'], ['grayscaleChanged', 'grayscaleChanged'], ['invertColorsChanged', 'invertColorsChanged'], ['reduceMotionChanged', 'reduceMotionChanged'], ['reduceTransparencyChanged', 'reduceTransparencyChanged'], ['screenReaderChanged', 'screenReaderChanged']]);\n\n  /**\n   * Sometimes it's useful to know whether or not the device has a screen reader\n   * that is currently active. The `AccessibilityInfo` API is designed for this\n   * purpose. You can use it to query the current state of the screen reader as\n   * well as to register to be notified when the state of the screen reader\n   * changes.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo\n   */\n  var AccessibilityInfo = {\n    /**\n     * Query whether bold text is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when bold text is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isBoldTextEnabled\n     */\n    isBoldTextEnabled: function isBoldTextEnabled() {\n      if (_Platform.default.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        });\n      }\n    },\n    /**\n     * Query whether grayscale is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when grayscale is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isGrayscaleEnabled\n     */\n    isGrayscaleEnabled: function isGrayscaleEnabled() {\n      if (_Platform.default.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        });\n      }\n    },\n    /**\n     * Query whether inverted colors are currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when invert color is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isInvertColorsEnabled\n     */\n    isInvertColorsEnabled: function isInvertColorsEnabled() {\n      if (_Platform.default.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        });\n      }\n    },\n    /**\n     * Query whether reduced motion is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when a reduce motion is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isReduceMotionEnabled\n     */\n    isReduceMotionEnabled: function isReduceMotionEnabled() {\n      return new Promise(function (resolve, reject) {\n        if (_Platform.default.OS === 'android') {\n          if (_NativeAccessibilityInfo.default != null) {\n            _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);\n          } else {\n            reject(null);\n          }\n        } else {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        }\n      });\n    },\n    /**\n     * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when  prefer cross-fade transitions is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#prefersCrossFadeTransitions\n     */\n    prefersCrossFadeTransitions: function prefersCrossFadeTransitions() {\n      return new Promise(function (resolve, reject) {\n        if (_Platform.default.OS === 'android') {\n          return Promise.resolve(false);\n        } else {\n          if ((_NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState) != null) {\n            _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        }\n      });\n    },\n    /**\n     * Query whether reduced transparency is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when a reduce transparency is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isReduceTransparencyEnabled\n     */\n    isReduceTransparencyEnabled: function isReduceTransparencyEnabled() {\n      if (_Platform.default.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        });\n      }\n    },\n    /**\n     * Query whether a screen reader is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when a screen reader is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isScreenReaderEnabled\n     */\n    isScreenReaderEnabled: function isScreenReaderEnabled() {\n      return new Promise(function (resolve, reject) {\n        if (_Platform.default.OS === 'android') {\n          if (_NativeAccessibilityInfo.default != null) {\n            _NativeAccessibilityInfo.default.isTouchExplorationEnabled(resolve);\n          } else {\n            reject(null);\n          }\n        } else {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        }\n      });\n    },\n    /**\n     * Query whether Accessibility Service is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when any service is enabled and `false` otherwise.\n     *\n     * @platform android\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo/#isaccessibilityserviceenabled-android\n     */\n    isAccessibilityServiceEnabled: function isAccessibilityServiceEnabled() {\n      return new Promise(function (resolve, reject) {\n        if (_Platform.default.OS === 'android') {\n          if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled != null) {\n            _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled(resolve);\n          } else {\n            reject(null);\n          }\n        } else {\n          reject(null);\n        }\n      });\n    },\n    /**\n     * Add an event handler. Supported events:\n     *\n     * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.\n     *   The argument to the event handler is a boolean. The boolean is `true` when a reduce\n     *   motion is enabled (or when \"Transition Animation Scale\" in \"Developer options\" is\n     *   \"Animation off\") and `false` otherwise.\n     * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument\n     *   to the event handler is a boolean. The boolean is `true` when a screen\n     *   reader is enabled and `false` otherwise.\n     *\n     * These events are only supported on iOS:\n     *\n     * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.\n     *   The argument to the event handler is a boolean. The boolean is `true` when a bold text\n     *   is enabled and `false` otherwise.\n     * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.\n     *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale\n     *   is enabled and `false` otherwise.\n     * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle\n     *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert\n     *   colors is enabled and `false` otherwise.\n     * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency\n     *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`\n     *   when a reduce transparency is enabled and `false` otherwise.\n     * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n     *   finished making an announcement. The argument to the event handler is a\n     *   dictionary with these keys:\n     *     - `announcement`: The string announced by the screen reader.\n     *     - `success`: A boolean indicating whether the announcement was\n     *       successfully made.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener\n     */\n    addEventListener: function addEventListener(eventName,\n    // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)\n    handler) {\n      var deviceEventName = EventNames.get(eventName);\n      return deviceEventName == null ? {\n        remove: function remove() {}\n      } :\n      // $FlowFixMe[incompatible-call]\n      _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);\n    },\n    /**\n     * Set accessibility focus to a React component.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#setaccessibilityfocus\n     */\n    setAccessibilityFocus: function setAccessibilityFocus(reactTag) {\n      (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');\n    },\n    /**\n     * Send a named accessibility event to a HostComponent.\n     */\n    sendAccessibilityEvent: function sendAccessibilityEvent(handle, eventType) {\n      // iOS only supports 'focus' event types\n      if (_Platform.default.OS === 'ios' && eventType === 'click') {\n        return;\n      }\n      // route through React renderer to distinguish between Fabric and non-Fabric handles\n      (0, _RendererProxy.sendAccessibilityEvent)(handle, eventType);\n    },\n    /**\n     * Post a string to be announced by the screen reader.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#announceforaccessibility\n     */\n    announceForAccessibility: function announceForAccessibility(announcement) {\n      if (_Platform.default.OS === 'android') {\n        _NativeAccessibilityInfo.default == null ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);\n      } else {\n        _NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);\n      }\n    },\n    /**\n     * Post a string to be announced by the screen reader.\n     * - `announcement`: The string announced by the screen reader.\n     * - `options`: An object that configures the reading options.\n     *   - `queue`: The announcement will be queued behind existing announcements. iOS only.\n     */\n    announceForAccessibilityWithOptions: function announceForAccessibilityWithOptions(announcement, options) {\n      if (_Platform.default.OS === 'android') {\n        _NativeAccessibilityInfo.default == null ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);\n      } else {\n        if (_NativeAccessibilityManager.default != null && _NativeAccessibilityManager.default.announceForAccessibilityWithOptions) {\n          _NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions(announcement, options);\n        } else {\n          _NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);\n        }\n      }\n    },\n    /**\n     * Get the recommended timeout for changes to the UI needed by this user.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#getrecommendedtimeoutmillis\n     */\n    getRecommendedTimeoutMillis: function getRecommendedTimeoutMillis(originalTimeout) {\n      if (_Platform.default.OS === 'android') {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis) {\n            _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis(originalTimeout, resolve);\n          } else {\n            resolve(originalTimeout);\n          }\n        });\n      } else {\n        return Promise.resolve(originalTimeout);\n      }\n    }\n  };\n  var _default = exports.default = AccessibilityInfo;\n});","lineCount":330,"map":[[7,2,15,0],[7,6,15,0,"_RCTDeviceEventEmitter"],[7,28,15,0],[7,31,15,0,"_interopRequireDefault"],[7,53,15,0],[7,54,15,0,"_$$_REQUIRE"],[7,65,15,0],[7,66,15,0,"_dependencyMap"],[7,80,15,0],[8,2,16,0],[8,6,16,0,"_RendererProxy"],[8,20,16,0],[8,23,16,0,"_$$_REQUIRE"],[8,34,16,0],[8,35,16,0,"_dependencyMap"],[8,49,16,0],[9,2,17,0],[9,6,17,0,"_Platform"],[9,15,17,0],[9,18,17,0,"_interopRequireDefault"],[9,40,17,0],[9,41,17,0,"_$$_REQUIRE"],[9,52,17,0],[9,53,17,0,"_dependencyMap"],[9,67,17,0],[10,2,18,0],[10,6,18,0,"_legacySendAccessibilityEvent"],[10,35,18,0],[10,38,18,0,"_interopRequireDefault"],[10,60,18,0],[10,61,18,0,"_$$_REQUIRE"],[10,72,18,0],[10,73,18,0,"_dependencyMap"],[10,87,18,0],[11,2,19,0],[11,6,19,0,"_NativeAccessibilityInfo"],[11,30,19,0],[11,33,19,0,"_interopRequireDefault"],[11,55,19,0],[11,56,19,0,"_$$_REQUIRE"],[11,67,19,0],[11,68,19,0,"_dependencyMap"],[11,82,19,0],[12,2,20,0],[12,6,20,0,"_NativeAccessibilityManager"],[12,33,20,0],[12,36,20,0,"_interopRequireDefault"],[12,58,20,0],[12,59,20,0,"_$$_REQUIRE"],[12,70,20,0],[12,71,20,0,"_dependencyMap"],[12,85,20,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[23,2,22,0],[25,2,27,0],[27,2,46,0],[28,2,47,0],[28,6,47,6,"EventNames"],[28,16,50,1],[28,19,50,4,"Platform"],[28,36,50,12],[28,37,50,13,"OS"],[28,39,50,15],[28,44,50,20],[28,53,50,29],[28,56,51,4],[28,60,51,8,"Map"],[28,63,51,11],[28,64,51,12],[28,65,52,6],[28,66,52,7],[28,74,52,15],[28,76,52,17],[28,103,52,44],[28,104,52,45],[28,106,53,6],[28,107,53,7],[28,128,53,28],[28,130,53,30],[28,153,53,53],[28,154,53,54],[28,156,54,6],[28,157,54,7],[28,178,54,28],[28,180,54,30],[28,207,54,57],[28,208,54,58],[28,210,55,6],[28,211,55,7],[28,240,55,36],[28,242,55,38],[28,273,55,69],[28,274,55,70],[28,275,56,5],[28,276,56,6],[28,279,57,4],[28,283,57,8,"Map"],[28,286,57,11],[28,287,57,12],[28,288,58,6],[28,289,58,7],[28,311,58,29],[28,313,58,31],[28,335,58,53],[28,336,58,54],[28,338,59,6],[28,339,59,7],[28,356,59,24],[28,358,59,26],[28,375,59,43],[28,376,59,44],[28,378,60,6],[28,379,60,7],[28,387,60,15],[28,389,60,17],[28,410,60,38],[28,411,60,39],[28,413,61,6],[28,414,61,7],[28,432,61,25],[28,434,61,27],[28,452,61,45],[28,453,61,46],[28,455,62,6],[28,456,62,7],[28,477,62,28],[28,479,62,30],[28,500,62,51],[28,501,62,52],[28,503,63,6],[28,504,63,7],[28,525,63,28],[28,527,63,30],[28,548,63,51],[28,549,63,52],[28,551,64,6],[28,552,64,7],[28,579,64,34],[28,581,64,36],[28,608,64,63],[28,609,64,64],[28,611,65,6],[28,612,65,7],[28,633,65,28],[28,635,65,30],[28,656,65,51],[28,657,65,52],[28,658,66,5],[28,659,66,6],[30,2,68,0],[31,0,69,0],[32,0,70,0],[33,0,71,0],[34,0,72,0],[35,0,73,0],[36,0,74,0],[37,0,75,0],[38,0,76,0],[39,2,77,0],[39,6,77,6,"AccessibilityInfo"],[39,23,77,23],[39,26,77,26],[40,4,78,2],[41,0,79,0],[42,0,80,0],[43,0,81,0],[44,0,82,0],[45,0,83,0],[46,0,84,0],[47,0,85,0],[48,4,86,2,"isBoldTextEnabled"],[48,21,86,19],[48,32,86,19,"isBoldTextEnabled"],[48,50,86,19],[48,52,86,40],[49,6,87,4],[49,10,87,8,"Platform"],[49,27,87,16],[49,28,87,17,"OS"],[49,30,87,19],[49,35,87,24],[49,44,87,33],[49,46,87,35],[50,8,88,6],[50,15,88,13,"Promise"],[50,22,88,20],[50,23,88,21,"resolve"],[50,30,88,28],[50,31,88,29],[50,36,88,34],[50,37,88,35],[51,6,89,4],[51,7,89,5],[51,13,89,11],[52,8,90,6],[52,15,90,13],[52,19,90,17,"Promise"],[52,26,90,24],[52,27,90,25],[52,37,90,26,"resolve"],[52,44,90,33],[52,46,90,35,"reject"],[52,52,90,41],[52,54,90,46],[53,10,91,8],[53,14,91,12,"NativeAccessibilityManagerIOS"],[53,49,91,41],[53,53,91,45],[53,57,91,49],[53,59,91,51],[54,12,92,10,"NativeAccessibilityManagerIOS"],[54,47,92,39],[54,48,92,40,"getCurrentBoldTextState"],[54,71,92,63],[54,72,93,12,"resolve"],[54,79,93,19],[54,81,94,12,"reject"],[54,87,95,10],[54,88,95,11],[55,10,96,8],[55,11,96,9],[55,17,96,15],[56,12,97,10,"reject"],[56,18,97,16],[56,19,97,17],[56,23,97,21],[56,24,97,22],[57,10,98,8],[58,8,99,6],[58,9,99,7],[58,10,99,8],[59,6,100,4],[60,4,101,2],[60,5,101,3],[61,4,103,2],[62,0,104,0],[63,0,105,0],[64,0,106,0],[65,0,107,0],[66,0,108,0],[67,0,109,0],[68,0,110,0],[69,4,111,2,"isGrayscaleEnabled"],[69,22,111,20],[69,33,111,20,"isGrayscaleEnabled"],[69,52,111,20],[69,54,111,41],[70,6,112,4],[70,10,112,8,"Platform"],[70,27,112,16],[70,28,112,17,"OS"],[70,30,112,19],[70,35,112,24],[70,44,112,33],[70,46,112,35],[71,8,113,6],[71,15,113,13,"Promise"],[71,22,113,20],[71,23,113,21,"resolve"],[71,30,113,28],[71,31,113,29],[71,36,113,34],[71,37,113,35],[72,6,114,4],[72,7,114,5],[72,13,114,11],[73,8,115,6],[73,15,115,13],[73,19,115,17,"Promise"],[73,26,115,24],[73,27,115,25],[73,37,115,26,"resolve"],[73,44,115,33],[73,46,115,35,"reject"],[73,52,115,41],[73,54,115,46],[74,10,116,8],[74,14,116,12,"NativeAccessibilityManagerIOS"],[74,49,116,41],[74,53,116,45],[74,57,116,49],[74,59,116,51],[75,12,117,10,"NativeAccessibilityManagerIOS"],[75,47,117,39],[75,48,117,40,"getCurrentGrayscaleState"],[75,72,117,64],[75,73,118,12,"resolve"],[75,80,118,19],[75,82,119,12,"reject"],[75,88,120,10],[75,89,120,11],[76,10,121,8],[76,11,121,9],[76,17,121,15],[77,12,122,10,"reject"],[77,18,122,16],[77,19,122,17],[77,23,122,21],[77,24,122,22],[78,10,123,8],[79,8,124,6],[79,9,124,7],[79,10,124,8],[80,6,125,4],[81,4,126,2],[81,5,126,3],[82,4,128,2],[83,0,129,0],[84,0,130,0],[85,0,131,0],[86,0,132,0],[87,0,133,0],[88,0,134,0],[89,0,135,0],[90,4,136,2,"isInvertColorsEnabled"],[90,25,136,23],[90,36,136,23,"isInvertColorsEnabled"],[90,58,136,23],[90,60,136,44],[91,6,137,4],[91,10,137,8,"Platform"],[91,27,137,16],[91,28,137,17,"OS"],[91,30,137,19],[91,35,137,24],[91,44,137,33],[91,46,137,35],[92,8,138,6],[92,15,138,13,"Promise"],[92,22,138,20],[92,23,138,21,"resolve"],[92,30,138,28],[92,31,138,29],[92,36,138,34],[92,37,138,35],[93,6,139,4],[93,7,139,5],[93,13,139,11],[94,8,140,6],[94,15,140,13],[94,19,140,17,"Promise"],[94,26,140,24],[94,27,140,25],[94,37,140,26,"resolve"],[94,44,140,33],[94,46,140,35,"reject"],[94,52,140,41],[94,54,140,46],[95,10,141,8],[95,14,141,12,"NativeAccessibilityManagerIOS"],[95,49,141,41],[95,53,141,45],[95,57,141,49],[95,59,141,51],[96,12,142,10,"NativeAccessibilityManagerIOS"],[96,47,142,39],[96,48,142,40,"getCurrentInvertColorsState"],[96,75,142,67],[96,76,143,12,"resolve"],[96,83,143,19],[96,85,144,12,"reject"],[96,91,145,10],[96,92,145,11],[97,10,146,8],[97,11,146,9],[97,17,146,15],[98,12,147,10,"reject"],[98,18,147,16],[98,19,147,17],[98,23,147,21],[98,24,147,22],[99,10,148,8],[100,8,149,6],[100,9,149,7],[100,10,149,8],[101,6,150,4],[102,4,151,2],[102,5,151,3],[103,4,153,2],[104,0,154,0],[105,0,155,0],[106,0,156,0],[107,0,157,0],[108,0,158,0],[109,0,159,0],[110,0,160,0],[111,4,161,2,"isReduceMotionEnabled"],[111,25,161,23],[111,36,161,23,"isReduceMotionEnabled"],[111,58,161,23],[111,60,161,44],[112,6,162,4],[112,13,162,11],[112,17,162,15,"Promise"],[112,24,162,22],[112,25,162,23],[112,35,162,24,"resolve"],[112,42,162,31],[112,44,162,33,"reject"],[112,50,162,39],[112,52,162,44],[113,8,163,6],[113,12,163,10,"Platform"],[113,29,163,18],[113,30,163,19,"OS"],[113,32,163,21],[113,37,163,26],[113,46,163,35],[113,48,163,37],[114,10,164,8],[114,14,164,12,"NativeAccessibilityInfoAndroid"],[114,46,164,42],[114,50,164,46],[114,54,164,50],[114,56,164,52],[115,12,165,10,"NativeAccessibilityInfoAndroid"],[115,44,165,40],[115,45,165,41,"isReduceMotionEnabled"],[115,66,165,62],[115,67,165,63,"resolve"],[115,74,165,70],[115,75,165,71],[116,10,166,8],[116,11,166,9],[116,17,166,15],[117,12,167,10,"reject"],[117,18,167,16],[117,19,167,17],[117,23,167,21],[117,24,167,22],[118,10,168,8],[119,8,169,6],[119,9,169,7],[119,15,169,13],[120,10,170,8],[120,14,170,12,"NativeAccessibilityManagerIOS"],[120,49,170,41],[120,53,170,45],[120,57,170,49],[120,59,170,51],[121,12,171,10,"NativeAccessibilityManagerIOS"],[121,47,171,39],[121,48,171,40,"getCurrentReduceMotionState"],[121,75,171,67],[121,76,172,12,"resolve"],[121,83,172,19],[121,85,173,12,"reject"],[121,91,174,10],[121,92,174,11],[122,10,175,8],[122,11,175,9],[122,17,175,15],[123,12,176,10,"reject"],[123,18,176,16],[123,19,176,17],[123,23,176,21],[123,24,176,22],[124,10,177,8],[125,8,178,6],[126,6,179,4],[126,7,179,5],[126,8,179,6],[127,4,180,2],[127,5,180,3],[128,4,182,2],[129,0,183,0],[130,0,184,0],[131,0,185,0],[132,0,186,0],[133,0,187,0],[134,0,188,0],[135,0,189,0],[136,4,190,2,"prefersCrossFadeTransitions"],[136,31,190,29],[136,42,190,29,"prefersCrossFadeTransitions"],[136,70,190,29],[136,72,190,50],[137,6,191,4],[137,13,191,11],[137,17,191,15,"Promise"],[137,24,191,22],[137,25,191,23],[137,35,191,24,"resolve"],[137,42,191,31],[137,44,191,33,"reject"],[137,50,191,39],[137,52,191,44],[138,8,192,6],[138,12,192,10,"Platform"],[138,29,192,18],[138,30,192,19,"OS"],[138,32,192,21],[138,37,192,26],[138,46,192,35],[138,48,192,37],[139,10,193,8],[139,17,193,15,"Promise"],[139,24,193,22],[139,25,193,23,"resolve"],[139,32,193,30],[139,33,193,31],[139,38,193,36],[139,39,193,37],[140,8,194,6],[140,9,194,7],[140,15,194,13],[141,10,195,8],[141,14,196,10],[141,15,196,10,"NativeAccessibilityManagerIOS"],[141,50,196,39],[141,70,196,10,"NativeAccessibilityManagerIOS"],[141,105,196,39],[141,106,196,41,"getCurrentPrefersCrossFadeTransitionsState"],[141,148,196,83],[141,153,197,10],[141,157,197,14],[141,159,198,10],[142,12,199,10,"NativeAccessibilityManagerIOS"],[142,47,199,39],[142,48,199,40,"getCurrentPrefersCrossFadeTransitionsState"],[142,90,199,82],[142,91,200,12,"resolve"],[142,98,200,19],[142,100,201,12,"reject"],[142,106,202,10],[142,107,202,11],[143,10,203,8],[143,11,203,9],[143,17,203,15],[144,12,204,10,"reject"],[144,18,204,16],[144,19,204,17],[144,23,204,21],[144,24,204,22],[145,10,205,8],[146,8,206,6],[147,6,207,4],[147,7,207,5],[147,8,207,6],[148,4,208,2],[148,5,208,3],[149,4,210,2],[150,0,211,0],[151,0,212,0],[152,0,213,0],[153,0,214,0],[154,0,215,0],[155,0,216,0],[156,0,217,0],[157,4,218,2,"isReduceTransparencyEnabled"],[157,31,218,29],[157,42,218,29,"isReduceTransparencyEnabled"],[157,70,218,29],[157,72,218,50],[158,6,219,4],[158,10,219,8,"Platform"],[158,27,219,16],[158,28,219,17,"OS"],[158,30,219,19],[158,35,219,24],[158,44,219,33],[158,46,219,35],[159,8,220,6],[159,15,220,13,"Promise"],[159,22,220,20],[159,23,220,21,"resolve"],[159,30,220,28],[159,31,220,29],[159,36,220,34],[159,37,220,35],[160,6,221,4],[160,7,221,5],[160,13,221,11],[161,8,222,6],[161,15,222,13],[161,19,222,17,"Promise"],[161,26,222,24],[161,27,222,25],[161,37,222,26,"resolve"],[161,44,222,33],[161,46,222,35,"reject"],[161,52,222,41],[161,54,222,46],[162,10,223,8],[162,14,223,12,"NativeAccessibilityManagerIOS"],[162,49,223,41],[162,53,223,45],[162,57,223,49],[162,59,223,51],[163,12,224,10,"NativeAccessibilityManagerIOS"],[163,47,224,39],[163,48,224,40,"getCurrentReduceTransparencyState"],[163,81,224,73],[163,82,225,12,"resolve"],[163,89,225,19],[163,91,226,12,"reject"],[163,97,227,10],[163,98,227,11],[164,10,228,8],[164,11,228,9],[164,17,228,15],[165,12,229,10,"reject"],[165,18,229,16],[165,19,229,17],[165,23,229,21],[165,24,229,22],[166,10,230,8],[167,8,231,6],[167,9,231,7],[167,10,231,8],[168,6,232,4],[169,4,233,2],[169,5,233,3],[170,4,235,2],[171,0,236,0],[172,0,237,0],[173,0,238,0],[174,0,239,0],[175,0,240,0],[176,0,241,0],[177,0,242,0],[178,4,243,2,"isScreenReaderEnabled"],[178,25,243,23],[178,36,243,23,"isScreenReaderEnabled"],[178,58,243,23],[178,60,243,44],[179,6,244,4],[179,13,244,11],[179,17,244,15,"Promise"],[179,24,244,22],[179,25,244,23],[179,35,244,24,"resolve"],[179,42,244,31],[179,44,244,33,"reject"],[179,50,244,39],[179,52,244,44],[180,8,245,6],[180,12,245,10,"Platform"],[180,29,245,18],[180,30,245,19,"OS"],[180,32,245,21],[180,37,245,26],[180,46,245,35],[180,48,245,37],[181,10,246,8],[181,14,246,12,"NativeAccessibilityInfoAndroid"],[181,46,246,42],[181,50,246,46],[181,54,246,50],[181,56,246,52],[182,12,247,10,"NativeAccessibilityInfoAndroid"],[182,44,247,40],[182,45,247,41,"isTouchExplorationEnabled"],[182,70,247,66],[182,71,247,67,"resolve"],[182,78,247,74],[182,79,247,75],[183,10,248,8],[183,11,248,9],[183,17,248,15],[184,12,249,10,"reject"],[184,18,249,16],[184,19,249,17],[184,23,249,21],[184,24,249,22],[185,10,250,8],[186,8,251,6],[186,9,251,7],[186,15,251,13],[187,10,252,8],[187,14,252,12,"NativeAccessibilityManagerIOS"],[187,49,252,41],[187,53,252,45],[187,57,252,49],[187,59,252,51],[188,12,253,10,"NativeAccessibilityManagerIOS"],[188,47,253,39],[188,48,253,40,"getCurrentVoiceOverState"],[188,72,253,64],[188,73,254,12,"resolve"],[188,80,254,19],[188,82,255,12,"reject"],[188,88,256,10],[188,89,256,11],[189,10,257,8],[189,11,257,9],[189,17,257,15],[190,12,258,10,"reject"],[190,18,258,16],[190,19,258,17],[190,23,258,21],[190,24,258,22],[191,10,259,8],[192,8,260,6],[193,6,261,4],[193,7,261,5],[193,8,261,6],[194,4,262,2],[194,5,262,3],[195,4,264,2],[196,0,265,0],[197,0,266,0],[198,0,267,0],[199,0,268,0],[200,0,269,0],[201,0,270,0],[202,0,271,0],[203,0,272,0],[204,0,273,0],[205,4,274,2,"isAccessibilityServiceEnabled"],[205,33,274,31],[205,44,274,31,"isAccessibilityServiceEnabled"],[205,74,274,31],[205,76,274,52],[206,6,275,4],[206,13,275,11],[206,17,275,15,"Promise"],[206,24,275,22],[206,25,275,23],[206,35,275,24,"resolve"],[206,42,275,31],[206,44,275,33,"reject"],[206,50,275,39],[206,52,275,44],[207,8,276,6],[207,12,276,10,"Platform"],[207,29,276,18],[207,30,276,19,"OS"],[207,32,276,21],[207,37,276,26],[207,46,276,35],[207,48,276,37],[208,10,277,8],[208,14,278,10,"NativeAccessibilityInfoAndroid"],[208,46,278,40],[208,50,278,44],[208,54,278,48],[208,58,279,10,"NativeAccessibilityInfoAndroid"],[208,90,279,40],[208,91,279,41,"isAccessibilityServiceEnabled"],[208,120,279,70],[208,124,279,74],[208,128,279,78],[208,130,280,10],[209,12,281,10,"NativeAccessibilityInfoAndroid"],[209,44,281,40],[209,45,281,41,"isAccessibilityServiceEnabled"],[209,74,281,70],[209,75,281,71,"resolve"],[209,82,281,78],[209,83,281,79],[210,10,282,8],[210,11,282,9],[210,17,282,15],[211,12,283,10,"reject"],[211,18,283,16],[211,19,283,17],[211,23,283,21],[211,24,283,22],[212,10,284,8],[213,8,285,6],[213,9,285,7],[213,15,285,13],[214,10,286,8,"reject"],[214,16,286,14],[214,17,286,15],[214,21,286,19],[214,22,286,20],[215,8,287,6],[216,6,288,4],[216,7,288,5],[216,8,288,6],[217,4,289,2],[217,5,289,3],[218,4,291,2],[219,0,292,0],[220,0,293,0],[221,0,294,0],[222,0,295,0],[223,0,296,0],[224,0,297,0],[225,0,298,0],[226,0,299,0],[227,0,300,0],[228,0,301,0],[229,0,302,0],[230,0,303,0],[231,0,304,0],[232,0,305,0],[233,0,306,0],[234,0,307,0],[235,0,308,0],[236,0,309,0],[237,0,310,0],[238,0,311,0],[239,0,312,0],[240,0,313,0],[241,0,314,0],[242,0,315,0],[243,0,316,0],[244,0,317,0],[245,0,318,0],[246,0,319,0],[247,0,320,0],[248,0,321,0],[249,0,322,0],[250,0,323,0],[251,0,324,0],[252,4,325,2,"addEventListener"],[252,20,325,18],[252,31,325,18,"addEventListener"],[252,48,326,4,"eventName"],[252,57,326,16],[253,4,327,4],[254,4,328,4,"handler"],[254,11,328,72],[254,13,329,23],[255,6,330,4],[255,10,330,10,"deviceEventName"],[255,25,330,25],[255,28,330,28,"EventNames"],[255,38,330,38],[255,39,330,39,"get"],[255,42,330,42],[255,43,330,43,"eventName"],[255,52,330,52],[255,53,330,53],[256,6,331,4],[256,13,331,11,"deviceEventName"],[256,28,331,26],[256,32,331,30],[256,36,331,34],[256,39,332,8],[257,8,332,9,"remove"],[257,14,332,15],[257,25,332,15,"remove"],[257,32,332,15],[257,34,332,24],[257,35,332,25],[258,6,332,26],[258,7,332,27],[259,6,333,8],[260,6,334,8,"RCTDeviceEventEmitter"],[260,36,334,29],[260,37,334,30,"addListener"],[260,48,334,41],[260,49,334,42,"deviceEventName"],[260,64,334,57],[260,66,334,59,"handler"],[260,73,334,66],[260,74,334,67],[261,4,335,2],[261,5,335,3],[262,4,337,2],[263,0,338,0],[264,0,339,0],[265,0,340,0],[266,0,341,0],[267,4,342,2,"setAccessibilityFocus"],[267,25,342,23],[267,36,342,23,"setAccessibilityFocus"],[267,58,342,24,"reactTag"],[267,66,342,40],[267,68,342,48],[268,6,343,4],[268,10,343,4,"legacySendAccessibilityEvent"],[268,47,343,32],[268,49,343,33,"reactTag"],[268,57,343,41],[268,59,343,43],[268,66,343,50],[268,67,343,51],[269,4,344,2],[269,5,344,3],[270,4,346,2],[271,0,347,0],[272,0,348,0],[273,4,349,2,"sendAccessibilityEvent"],[273,26,349,24],[273,37,349,24,"sendAccessibilityEvent"],[273,60,350,4,"handle"],[273,66,350,44],[273,68,351,4,"eventType"],[273,77,351,38],[273,79,352,4],[274,6,353,4],[275,6,354,4],[275,10,354,8,"Platform"],[275,27,354,16],[275,28,354,17,"OS"],[275,30,354,19],[275,35,354,24],[275,40,354,29],[275,44,354,33,"eventType"],[275,53,354,42],[275,58,354,47],[275,65,354,54],[275,67,354,56],[276,8,355,6],[277,6,356,4],[278,6,357,4],[279,6,358,4],[279,10,358,4,"sendAccessibilityEvent"],[279,47,358,26],[279,49,358,27,"handle"],[279,55,358,33],[279,57,358,35,"eventType"],[279,66,358,44],[279,67,358,45],[280,4,359,2],[280,5,359,3],[281,4,361,2],[282,0,362,0],[283,0,363,0],[284,0,364,0],[285,0,365,0],[286,4,366,2,"announceForAccessibility"],[286,28,366,26],[286,39,366,26,"announceForAccessibility"],[286,64,366,27,"announcement"],[286,76,366,47],[286,78,366,55],[287,6,367,4],[287,10,367,8,"Platform"],[287,27,367,16],[287,28,367,17,"OS"],[287,30,367,19],[287,35,367,24],[287,44,367,33],[287,46,367,35],[288,8,368,6,"NativeAccessibilityInfoAndroid"],[288,40,368,36],[288,60,368,6,"NativeAccessibilityInfoAndroid"],[288,92,368,36],[288,93,368,38,"announceForAccessibility"],[288,117,368,62],[288,118,368,63,"announcement"],[288,130,368,75],[288,131,368,76],[289,6,369,4],[289,7,369,5],[289,13,369,11],[290,8,370,6,"NativeAccessibilityManagerIOS"],[290,43,370,35],[290,63,370,6,"NativeAccessibilityManagerIOS"],[290,98,370,35],[290,99,370,37,"announceForAccessibility"],[290,123,370,61],[290,124,370,62,"announcement"],[290,136,370,74],[290,137,370,75],[291,6,371,4],[292,4,372,2],[292,5,372,3],[293,4,374,2],[294,0,375,0],[295,0,376,0],[296,0,377,0],[297,0,378,0],[298,0,379,0],[299,4,380,2,"announceForAccessibilityWithOptions"],[299,39,380,37],[299,50,380,37,"announceForAccessibilityWithOptions"],[299,86,381,4,"announcement"],[299,98,381,24],[299,100,382,4,"options"],[299,107,382,30],[299,109,383,10],[300,6,384,4],[300,10,384,8,"Platform"],[300,27,384,16],[300,28,384,17,"OS"],[300,30,384,19],[300,35,384,24],[300,44,384,33],[300,46,384,35],[301,8,385,6,"NativeAccessibilityInfoAndroid"],[301,40,385,36],[301,60,385,6,"NativeAccessibilityInfoAndroid"],[301,92,385,36],[301,93,385,38,"announceForAccessibility"],[301,117,385,62],[301,118,385,63,"announcement"],[301,130,385,75],[301,131,385,76],[302,6,386,4],[302,7,386,5],[302,13,386,11],[303,8,387,6],[303,12,387,10,"NativeAccessibilityManagerIOS"],[303,47,387,39],[303,59,387,10,"NativeAccessibilityManagerIOS"],[303,94,387,39],[303,95,387,41,"announceForAccessibilityWithOptions"],[303,130,387,76],[303,132,387,78],[304,10,388,8,"NativeAccessibilityManagerIOS"],[304,45,388,37],[304,65,388,8,"NativeAccessibilityManagerIOS"],[304,100,388,37],[304,101,388,39,"announceForAccessibilityWithOptions"],[304,136,388,74],[304,137,389,10,"announcement"],[304,149,389,22],[304,151,390,10,"options"],[304,158,391,8],[304,159,391,9],[305,8,392,6],[305,9,392,7],[305,15,392,13],[306,10,393,8,"NativeAccessibilityManagerIOS"],[306,45,393,37],[306,65,393,8,"NativeAccessibilityManagerIOS"],[306,100,393,37],[306,101,393,39,"announceForAccessibility"],[306,125,393,63],[306,126,393,64,"announcement"],[306,138,393,76],[306,139,393,77],[307,8,394,6],[308,6,395,4],[309,4,396,2],[309,5,396,3],[310,4,398,2],[311,0,399,0],[312,0,400,0],[313,0,401,0],[314,0,402,0],[315,4,403,2,"getRecommendedTimeoutMillis"],[315,31,403,29],[315,42,403,29,"getRecommendedTimeoutMillis"],[315,70,403,30,"originalTimeout"],[315,85,403,53],[315,87,403,72],[316,6,404,4],[316,10,404,8,"Platform"],[316,27,404,16],[316,28,404,17,"OS"],[316,30,404,19],[316,35,404,24],[316,44,404,33],[316,46,404,35],[317,8,405,6],[317,15,405,13],[317,19,405,17,"Promise"],[317,26,405,24],[317,27,405,25],[317,37,405,26,"resolve"],[317,44,405,33],[317,46,405,35,"reject"],[317,52,405,41],[317,54,405,46],[318,10,406,8],[318,14,406,12,"NativeAccessibilityInfoAndroid"],[318,46,406,42],[318,58,406,12,"NativeAccessibilityInfoAndroid"],[318,90,406,42],[318,91,406,44,"getRecommendedTimeoutMillis"],[318,118,406,71],[318,120,406,73],[319,12,407,10,"NativeAccessibilityInfoAndroid"],[319,44,407,40],[319,45,407,41,"getRecommendedTimeoutMillis"],[319,72,407,68],[319,73,408,12,"originalTimeout"],[319,88,408,27],[319,90,409,12,"resolve"],[319,97,410,10],[319,98,410,11],[320,10,411,8],[320,11,411,9],[320,17,411,15],[321,12,412,10,"resolve"],[321,19,412,17],[321,20,412,18,"originalTimeout"],[321,35,412,33],[321,36,412,34],[322,10,413,8],[323,8,414,6],[323,9,414,7],[323,10,414,8],[324,6,415,4],[324,7,415,5],[324,13,415,11],[325,8,416,6],[325,15,416,13,"Promise"],[325,22,416,20],[325,23,416,21,"resolve"],[325,30,416,28],[325,31,416,29,"originalTimeout"],[325,46,416,44],[325,47,416,45],[326,6,417,4],[327,4,418,2],[328,2,419,0],[328,3,419,1],[329,2,419,2],[329,6,419,2,"_default"],[329,14,419,2],[329,17,419,2,"exports"],[329,24,419,2],[329,25,419,2,"default"],[329,32,419,2],[329,35,421,15,"AccessibilityInfo"],[329,52,421,32],[330,0,421,32]],"functionMap":{"names":["<global>","isBoldTextEnabled","Promise$argument_0","isGrayscaleEnabled","isInvertColorsEnabled","isReduceMotionEnabled","prefersCrossFadeTransitions","isReduceTransparencyEnabled","isScreenReaderEnabled","isAccessibilityServiceEnabled","addEventListener","remove","setAccessibilityFocus","sendAccessibilityEvent","announceForAccessibility","announceForAccessibilityWithOptions","getRecommendedTimeoutMillis"],"mappings":"AAA;ECqF;yBCI;ODS;GDE;EGU;yBDI;OCS;GHE;EIU;yBFI;OES;GJE;EKU;uBHC;KGiB;GLC;EMU;uBJC;KIgB;GNC;EOU;yBLI;OKS;GPE;EQU;uBNC;KMiB;GRC;ESY;uBPC;KOa;GTC;EUoC;SCO,iBD;GVG;EYO;GZE;EaK;GbU;EcO;GdM;EeQ;GfgB;EgBO;yBdE;OcS;GhBI"}},"type":"js/module"}]}