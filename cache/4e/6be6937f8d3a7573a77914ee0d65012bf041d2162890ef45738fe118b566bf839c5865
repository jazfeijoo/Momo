{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  // Capturing groups:\n  // 1. function name\n  // 2. is this a native stack frame?\n  // 3. is this a bytecode address or a source location?\n  // 4. source URL (filename)\n  // 5. line number (1 based)\n  // 6. column number (1 based) or virtual offset (0 based)\n  var RE_FRAME = /^ {4}at (.+?)(?: \\((native)\\)?| \\((address at )?(.*?):(\\d+):(\\d+)\\))$/;\n\n  // Capturing groups:\n  // 1. count of skipped frames\n  var RE_SKIPPED = /^ {4}... skipping (\\d+) frames$/;\n  function isInternalBytecodeSourceUrl(sourceUrl) {\n    // See https://github.com/facebook/hermes/blob/3332fa020cae0bab751f648db7c94e1d687eeec7/lib/VM/Runtime.cpp#L1100\n    return sourceUrl === 'InternalBytecode.js';\n  }\n  function parseLine(line) {\n    var asFrame = line.match(RE_FRAME);\n    if (asFrame) {\n      return {\n        type: 'FRAME',\n        functionName: asFrame[1],\n        location: asFrame[2] === 'native' ? {\n          type: 'NATIVE'\n        } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {\n          type: 'INTERNAL_BYTECODE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          virtualOffset0Based: Number.parseInt(asFrame[6], 10)\n        } : {\n          type: 'BYTECODE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          virtualOffset0Based: Number.parseInt(asFrame[6], 10)\n        } : {\n          type: 'SOURCE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          column1Based: Number.parseInt(asFrame[6], 10)\n        }\n      };\n    }\n    var asSkipped = line.match(RE_SKIPPED);\n    if (asSkipped) {\n      return {\n        type: 'SKIPPED',\n        count: Number.parseInt(asSkipped[1], 10)\n      };\n    }\n  }\n  module.exports = function parseHermesStack(stack) {\n    var lines = stack.split(/\\n/);\n    var entries = [];\n    var lastMessageLine = -1;\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n      if (!line) {\n        continue;\n      }\n      var entry = parseLine(line);\n      if (entry) {\n        entries.push(entry);\n        continue;\n      }\n      // No match - we're still in the message\n      lastMessageLine = i;\n      entries = [];\n    }\n    var message = lines.slice(0, lastMessageLine + 1).join('\\n');\n    return {\n      message: message,\n      entries: entries\n    };\n  };\n});","lineCount":88,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,62,0],[15,2,63,0],[16,2,64,0],[17,2,65,0],[18,2,66,0],[19,2,67,0],[20,2,68,0],[21,2,69,0],[21,6,69,6,"RE_FRAME"],[21,14,69,14],[21,17,70,2],[21,88,70,73],[23,2,72,0],[24,2,73,0],[25,2,74,0],[25,6,74,6,"RE_SKIPPED"],[25,16,74,16],[25,19,74,19],[25,52,74,52],[26,2,76,0],[26,11,76,9,"isInternalBytecodeSourceUrl"],[26,38,76,36,"isInternalBytecodeSourceUrl"],[26,39,76,37,"sourceUrl"],[26,48,76,54],[26,50,76,65],[27,4,77,2],[28,4,78,2],[28,11,78,9,"sourceUrl"],[28,20,78,18],[28,25,78,23],[28,46,78,44],[29,2,79,0],[30,2,81,0],[30,11,81,9,"parseLine"],[30,20,81,18,"parseLine"],[30,21,81,19,"line"],[30,25,81,31],[30,27,81,52],[31,4,82,2],[31,8,82,8,"asFrame"],[31,15,82,15],[31,18,82,18,"line"],[31,22,82,22],[31,23,82,23,"match"],[31,28,82,28],[31,29,82,29,"RE_FRAME"],[31,37,82,37],[31,38,82,38],[32,4,83,2],[32,8,83,6,"asFrame"],[32,15,83,13],[32,17,83,15],[33,6,84,4],[33,13,84,11],[34,8,85,6,"type"],[34,12,85,10],[34,14,85,12],[34,21,85,19],[35,8,86,6,"functionName"],[35,20,86,18],[35,22,86,20,"asFrame"],[35,29,86,27],[35,30,86,28],[35,31,86,29],[35,32,86,30],[36,8,87,6,"location"],[36,16,87,14],[36,18,88,8,"asFrame"],[36,25,88,15],[36,26,88,16],[36,27,88,17],[36,28,88,18],[36,33,88,23],[36,41,88,31],[36,44,89,12],[37,10,89,13,"type"],[37,14,89,17],[37,16,89,19],[38,8,89,27],[38,9,89,28],[38,12,90,12,"asFrame"],[38,19,90,19],[38,20,90,20],[38,21,90,21],[38,22,90,22],[38,27,90,27],[38,40,90,40],[38,43,91,12,"isInternalBytecodeSourceUrl"],[38,70,91,39],[38,71,91,40,"asFrame"],[38,78,91,47],[38,79,91,48],[38,80,91,49],[38,81,91,50],[38,82,91,51],[38,85,92,14],[39,10,93,16,"type"],[39,14,93,20],[39,16,93,22],[39,35,93,41],[40,10,94,16,"sourceUrl"],[40,19,94,25],[40,21,94,27,"asFrame"],[40,28,94,34],[40,29,94,35],[40,30,94,36],[40,31,94,37],[41,10,95,16,"line1Based"],[41,20,95,26],[41,22,95,28,"Number"],[41,28,95,34],[41,29,95,35,"parseInt"],[41,37,95,43],[41,38,95,44,"asFrame"],[41,45,95,51],[41,46,95,52],[41,47,95,53],[41,48,95,54],[41,50,95,56],[41,52,95,58],[41,53,95,59],[42,10,96,16,"virtualOffset0Based"],[42,29,96,35],[42,31,96,37,"Number"],[42,37,96,43],[42,38,96,44,"parseInt"],[42,46,96,52],[42,47,96,53,"asFrame"],[42,54,96,60],[42,55,96,61],[42,56,96,62],[42,57,96,63],[42,59,96,65],[42,61,96,67],[43,8,97,14],[43,9,97,15],[43,12,98,14],[44,10,99,16,"type"],[44,14,99,20],[44,16,99,22],[44,26,99,32],[45,10,100,16,"sourceUrl"],[45,19,100,25],[45,21,100,27,"asFrame"],[45,28,100,34],[45,29,100,35],[45,30,100,36],[45,31,100,37],[46,10,101,16,"line1Based"],[46,20,101,26],[46,22,101,28,"Number"],[46,28,101,34],[46,29,101,35,"parseInt"],[46,37,101,43],[46,38,101,44,"asFrame"],[46,45,101,51],[46,46,101,52],[46,47,101,53],[46,48,101,54],[46,50,101,56],[46,52,101,58],[46,53,101,59],[47,10,102,16,"virtualOffset0Based"],[47,29,102,35],[47,31,102,37,"Number"],[47,37,102,43],[47,38,102,44,"parseInt"],[47,46,102,52],[47,47,102,53,"asFrame"],[47,54,102,60],[47,55,102,61],[47,56,102,62],[47,57,102,63],[47,59,102,65],[47,61,102,67],[48,8,103,14],[48,9,103,15],[48,12,104,12],[49,10,105,14,"type"],[49,14,105,18],[49,16,105,20],[49,24,105,28],[50,10,106,14,"sourceUrl"],[50,19,106,23],[50,21,106,25,"asFrame"],[50,28,106,32],[50,29,106,33],[50,30,106,34],[50,31,106,35],[51,10,107,14,"line1Based"],[51,20,107,24],[51,22,107,26,"Number"],[51,28,107,32],[51,29,107,33,"parseInt"],[51,37,107,41],[51,38,107,42,"asFrame"],[51,45,107,49],[51,46,107,50],[51,47,107,51],[51,48,107,52],[51,50,107,54],[51,52,107,56],[51,53,107,57],[52,10,108,14,"column1Based"],[52,22,108,26],[52,24,108,28,"Number"],[52,30,108,34],[52,31,108,35,"parseInt"],[52,39,108,43],[52,40,108,44,"asFrame"],[52,47,108,51],[52,48,108,52],[52,49,108,53],[52,50,108,54],[52,52,108,56],[52,54,108,58],[53,8,109,12],[54,6,110,4],[54,7,110,5],[55,4,111,2],[56,4,112,2],[56,8,112,8,"asSkipped"],[56,17,112,17],[56,20,112,20,"line"],[56,24,112,24],[56,25,112,25,"match"],[56,30,112,30],[56,31,112,31,"RE_SKIPPED"],[56,41,112,41],[56,42,112,42],[57,4,113,2],[57,8,113,6,"asSkipped"],[57,17,113,15],[57,19,113,17],[58,6,114,4],[58,13,114,11],[59,8,115,6,"type"],[59,12,115,10],[59,14,115,12],[59,23,115,21],[60,8,116,6,"count"],[60,13,116,11],[60,15,116,13,"Number"],[60,21,116,19],[60,22,116,20,"parseInt"],[60,30,116,28],[60,31,116,29,"asSkipped"],[60,40,116,38],[60,41,116,39],[60,42,116,40],[60,43,116,41],[60,45,116,43],[60,47,116,45],[61,6,117,4],[61,7,117,5],[62,4,118,2],[63,2,119,0],[64,2,121,0,"module"],[64,8,121,6],[64,9,121,7,"exports"],[64,16,121,14],[64,19,121,17],[64,28,121,26,"parseHermesStack"],[64,44,121,42,"parseHermesStack"],[64,45,121,43,"stack"],[64,50,121,56],[64,52,121,77],[65,4,122,2],[65,8,122,8,"lines"],[65,13,122,13],[65,16,122,16,"stack"],[65,21,122,21],[65,22,122,22,"split"],[65,27,122,27],[65,28,122,28],[65,32,122,32],[65,33,122,33],[66,4,123,2],[66,8,123,6,"entries"],[66,15,123,69],[66,18,123,72],[66,20,123,74],[67,4,124,2],[67,8,124,6,"lastMessageLine"],[67,23,124,21],[67,26,124,24],[67,27,124,25],[67,28,124,26],[68,4,125,2],[68,9,125,7],[68,13,125,11,"i"],[68,14,125,12],[68,17,125,15],[68,18,125,16],[68,20,125,18,"i"],[68,21,125,19],[68,24,125,22,"lines"],[68,29,125,27],[68,30,125,28,"length"],[68,36,125,34],[68,38,125,36],[68,40,125,38,"i"],[68,41,125,39],[68,43,125,41],[69,6,126,4],[69,10,126,10,"line"],[69,14,126,14],[69,17,126,17,"lines"],[69,22,126,22],[69,23,126,23,"i"],[69,24,126,24],[69,25,126,25],[70,6,127,4],[70,10,127,8],[70,11,127,9,"line"],[70,15,127,13],[70,17,127,15],[71,8,128,6],[72,6,129,4],[73,6,130,4],[73,10,130,10,"entry"],[73,15,130,15],[73,18,130,18,"parseLine"],[73,27,130,27],[73,28,130,28,"line"],[73,32,130,32],[73,33,130,33],[74,6,131,4],[74,10,131,8,"entry"],[74,15,131,13],[74,17,131,15],[75,8,132,6,"entries"],[75,15,132,13],[75,16,132,14,"push"],[75,20,132,18],[75,21,132,19,"entry"],[75,26,132,24],[75,27,132,25],[76,8,133,6],[77,6,134,4],[78,6,135,4],[79,6,136,4,"lastMessageLine"],[79,21,136,19],[79,24,136,22,"i"],[79,25,136,23],[80,6,137,4,"entries"],[80,13,137,11],[80,16,137,14],[80,18,137,16],[81,4,138,2],[82,4,139,2],[82,8,139,8,"message"],[82,15,139,15],[82,18,139,18,"lines"],[82,23,139,23],[82,24,139,24,"slice"],[82,29,139,29],[82,30,139,30],[82,31,139,31],[82,33,139,33,"lastMessageLine"],[82,48,139,48],[82,51,139,51],[82,52,139,52],[82,53,139,53],[82,54,139,54,"join"],[82,58,139,58],[82,59,139,59],[82,63,139,63],[82,64,139,64],[83,4,140,2],[83,11,140,9],[84,6,140,10,"message"],[84,13,140,17],[84,15,140,10,"message"],[84,22,140,17],[85,6,140,19,"entries"],[85,13,140,26],[85,15,140,19,"entries"],[86,4,140,26],[86,5,140,27],[87,2,141,0],[87,3,141,1],[88,0,141,2]],"functionMap":{"names":["<global>","isInternalBytecodeSourceUrl","parseLine","parseHermesStack"],"mappings":"AAA;AC2E;CDG;AEE;CFsC;iBGE;CHoB"}},"type":"js/module"}]}