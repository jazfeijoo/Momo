{"dependencies":[{"name":"./useRouteCache","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":57},"end":{"line":3,"column":46,"index":103}}],"key":"0x2Ri1pmPX140KCPHftfgCdnnso="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getFocusedRouteNameFromRoute;\n  var _useRouteCache = _$$_REQUIRE(_dependencyMap[0], \"./useRouteCache\");\n  function getFocusedRouteNameFromRoute(route) {\n    var _route$CHILD_STATE, _state$index;\n    // @ts-expect-error: this isn't in type definitions coz we want this private\n    var state = (_route$CHILD_STATE = route[_useRouteCache.CHILD_STATE]) != null ? _route$CHILD_STATE : route.state;\n    var params = route.params;\n    var routeName = state ?\n    // Get the currently active route name in the nested navigator\n    state.routes[// If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n    // The type property will only exist for rehydrated state and not for state from deep link\n    (_state$index = state.index) != null ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name :\n    // If state doesn't exist, we need to default to `screen` param if available\n    typeof (params == null ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n    return routeName;\n  }\n});","lineCount":21,"map":[[6,2,3,0],[6,6,3,0,"_useRouteCache"],[6,20,3,0],[6,23,3,0,"_$$_REQUIRE"],[6,34,3,0],[6,35,3,0,"_dependencyMap"],[6,49,3,0],[7,2,5,15],[7,11,5,24,"getFocusedRouteNameFromRoute"],[7,39,5,52,"getFocusedRouteNameFromRoute"],[7,40,6,2,"route"],[7,45,6,31],[7,47,7,22],[8,4,7,22],[8,8,7,22,"_route$CHILD_STATE"],[8,26,7,22],[8,28,7,22,"_state$index"],[8,40,7,22],[9,4,8,2],[10,4,9,2],[10,8,9,8,"state"],[10,13,9,13],[10,17,9,13,"_route$CHILD_STATE"],[10,35,9,13],[10,38,9,16,"route"],[10,43,9,21],[10,44,9,22,"CHILD_STATE"],[10,70,9,33],[10,71,9,34],[10,83,9,34,"_route$CHILD_STATE"],[10,101,9,34],[10,104,9,38,"route"],[10,109,9,43],[10,110,9,44,"state"],[10,115,9,49],[11,4,10,2],[11,8,10,8,"params"],[11,14,10,14],[11,17,10,17,"route"],[11,22,10,22],[11,23,10,23,"params"],[11,29,10,65],[12,4,12,2],[12,8,12,8,"routeName"],[12,17,12,17],[12,20,12,20,"state"],[12,25,12,25],[13,4,13,6],[14,4,14,6,"state"],[14,9,14,11],[14,10,14,12,"routes"],[14,16,14,18],[14,17,15,8],[15,4,16,8],[16,4,16,8],[16,5,16,8,"_state$index"],[16,17,16,8],[16,20,17,8,"state"],[16,25,17,13],[16,26,17,14,"index"],[16,31,17,19],[16,43,17,19,"_state$index"],[16,55,17,19],[16,58,18,11],[16,65,18,18,"state"],[16,70,18,23],[16,71,18,24,"type"],[16,75,18,28],[16,80,18,33],[16,88,18,41],[16,92,18,45,"state"],[16,97,18,50],[16,98,18,51,"type"],[16,102,18,55],[16,107,18,60],[16,114,18,67],[16,117,19,14],[16,118,19,15],[16,121,20,14,"state"],[16,126,20,19],[16,127,20,20,"routes"],[16,133,20,26],[16,134,20,27,"length"],[16,140,20,33],[16,143,20,36],[16,144,20,37],[16,145,21,7],[16,146,21,8,"name"],[16,150,21,12],[17,4,22,6],[18,4,23,4],[18,12,23,11,"params"],[18,18,23,17],[18,38,23,11,"params"],[18,44,23,17],[18,45,23,19,"screen"],[18,51,23,25],[18,57,23,30],[18,65,23,38],[18,68,24,6,"params"],[18,74,24,12],[18,75,24,13,"screen"],[18,81,24,19],[18,84,25,6,"undefined"],[18,93,25,15],[19,4,27,2],[19,11,27,9,"routeName"],[19,20,27,18],[20,2,28,0],[21,0,28,1]],"functionMap":{"names":["<global>","getFocusedRouteNameFromRoute"],"mappings":"AAA;eCI;CDuB"}},"type":"js/module"}]}