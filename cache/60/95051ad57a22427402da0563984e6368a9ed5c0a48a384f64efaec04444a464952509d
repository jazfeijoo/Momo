{"dependencies":[{"name":"./util","data":{"asyncType":null,"locs":[{"start":{"line":8,"column":11,"index":219},"end":{"line":8,"column":28,"index":236}}],"key":"DQ+NnsvRW532iS20nr5BN5Yr8jw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* -*- Mode: js; js-indent-level: 2; -*- */\n  /*\n   * Copyright 2014 Mozilla Foundation and contributors\n   * Licensed under the New BSD license. See LICENSE or:\n   * http://opensource.org/licenses/BSD-3-Clause\n   */\n\n  var util = _$$_REQUIRE(_dependencyMap[0], \"./util\");\n\n  /**\n   * Determine whether mappingB is after mappingA with respect to generated\n   * position.\n   */\n  function generatedPositionAfter(mappingA, mappingB) {\n    // Optimized for most common case\n    var lineA = mappingA.generatedLine;\n    var lineB = mappingB.generatedLine;\n    var columnA = mappingA.generatedColumn;\n    var columnB = mappingB.generatedColumn;\n    return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n  }\n\n  /**\n   * A data structure to provide a sorted view of accumulated mappings in a\n   * performance conscious manner. It trades a neglibable overhead in general\n   * case for a large speedup in case of mappings being added in order.\n   */\n  function MappingList() {\n    this._array = [];\n    this._sorted = true;\n    // Serves as infimum\n    this._last = {\n      generatedLine: -1,\n      generatedColumn: 0\n    };\n  }\n\n  /**\n   * Iterate through internal items. This method takes the same arguments that\n   * `Array.prototype.forEach` takes.\n   *\n   * NOTE: The order of the mappings is NOT guaranteed.\n   */\n  MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n  /**\n   * Add the given source mapping.\n   *\n   * @param Object aMapping\n   */\n  MappingList.prototype.add = function MappingList_add(aMapping) {\n    if (generatedPositionAfter(this._last, aMapping)) {\n      this._last = aMapping;\n      this._array.push(aMapping);\n    } else {\n      this._sorted = false;\n      this._array.push(aMapping);\n    }\n  };\n\n  /**\n   * Returns the flat, sorted array of mappings. The mappings are sorted by\n   * generated position.\n   *\n   * WARNING: This method returns internal data without copying, for\n   * performance. The return value must NOT be mutated, and should be treated as\n   * an immutable borrow. If you want to take ownership, you must make your own\n   * copy.\n   */\n  MappingList.prototype.toArray = function MappingList_toArray() {\n    if (!this._sorted) {\n      this._array.sort(util.compareByGeneratedPositionsInflated);\n      this._sorted = true;\n    }\n    return this._array;\n  };\n  exports.MappingList = MappingList;\n});","lineCount":81,"map":[[2,2,1,0],[3,2,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[9,2,8,0],[9,6,8,4,"util"],[9,10,8,8],[9,13,8,11,"require"],[9,24,8,18],[9,25,8,18,"_dependencyMap"],[9,39,8,18],[9,52,8,27],[9,53,8,28],[11,2,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,2,14,0],[15,11,14,9,"generatedPositionAfter"],[15,33,14,31,"generatedPositionAfter"],[15,34,14,32,"mappingA"],[15,42,14,40],[15,44,14,42,"mappingB"],[15,52,14,50],[15,54,14,52],[16,4,15,2],[17,4,16,2],[17,8,16,6,"lineA"],[17,13,16,11],[17,16,16,14,"mappingA"],[17,24,16,22],[17,25,16,23,"generatedLine"],[17,38,16,36],[18,4,17,2],[18,8,17,6,"lineB"],[18,13,17,11],[18,16,17,14,"mappingB"],[18,24,17,22],[18,25,17,23,"generatedLine"],[18,38,17,36],[19,4,18,2],[19,8,18,6,"columnA"],[19,15,18,13],[19,18,18,16,"mappingA"],[19,26,18,24],[19,27,18,25,"generatedColumn"],[19,42,18,40],[20,4,19,2],[20,8,19,6,"columnB"],[20,15,19,13],[20,18,19,16,"mappingB"],[20,26,19,24],[20,27,19,25,"generatedColumn"],[20,42,19,40],[21,4,20,2],[21,11,20,9,"lineB"],[21,16,20,14],[21,19,20,17,"lineA"],[21,24,20,22],[21,28,20,26,"lineB"],[21,33,20,31],[21,37,20,35,"lineA"],[21,42,20,40],[21,46,20,44,"columnB"],[21,53,20,51],[21,57,20,55,"columnA"],[21,64,20,62],[21,68,21,9,"util"],[21,72,21,13],[21,73,21,14,"compareByGeneratedPositionsInflated"],[21,108,21,49],[21,109,21,50,"mappingA"],[21,117,21,58],[21,119,21,60,"mappingB"],[21,127,21,68],[21,128,21,69],[21,132,21,73],[21,133,21,74],[22,2,22,0],[24,2,24,0],[25,0,25,0],[26,0,26,0],[27,0,27,0],[28,0,28,0],[29,2,29,0],[29,11,29,9,"MappingList"],[29,22,29,20,"MappingList"],[29,23,29,20],[29,25,29,23],[30,4,30,2],[30,8,30,6],[30,9,30,7,"_array"],[30,15,30,13],[30,18,30,16],[30,20,30,18],[31,4,31,2],[31,8,31,6],[31,9,31,7,"_sorted"],[31,16,31,14],[31,19,31,17],[31,23,31,21],[32,4,32,2],[33,4,33,2],[33,8,33,6],[33,9,33,7,"_last"],[33,14,33,12],[33,17,33,15],[34,6,33,16,"generatedLine"],[34,19,33,29],[34,21,33,31],[34,22,33,32],[34,23,33,33],[35,6,33,35,"generatedColumn"],[35,21,33,50],[35,23,33,52],[36,4,33,53],[36,5,33,54],[37,2,34,0],[39,2,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,2,42,0,"MappingList"],[45,13,42,11],[45,14,42,12,"prototype"],[45,23,42,21],[45,24,42,22,"unsortedForEach"],[45,39,42,37],[45,42,43,2],[45,51,43,11,"MappingList_forEach"],[45,70,43,30,"MappingList_forEach"],[45,71,43,31,"aCallback"],[45,80,43,40],[45,82,43,42,"aThisArg"],[45,90,43,50],[45,92,43,52],[46,4,44,4],[46,8,44,8],[46,9,44,9,"_array"],[46,15,44,15],[46,16,44,16,"forEach"],[46,23,44,23],[46,24,44,24,"aCallback"],[46,33,44,33],[46,35,44,35,"aThisArg"],[46,43,44,43],[46,44,44,44],[47,2,45,2],[47,3,45,3],[49,2,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,0,51,0],[54,2,52,0,"MappingList"],[54,13,52,11],[54,14,52,12,"prototype"],[54,23,52,21],[54,24,52,22,"add"],[54,27,52,25],[54,30,52,28],[54,39,52,37,"MappingList_add"],[54,54,52,52,"MappingList_add"],[54,55,52,53,"aMapping"],[54,63,52,61],[54,65,52,63],[55,4,53,2],[55,8,53,6,"generatedPositionAfter"],[55,30,53,28],[55,31,53,29],[55,35,53,33],[55,36,53,34,"_last"],[55,41,53,39],[55,43,53,41,"aMapping"],[55,51,53,49],[55,52,53,50],[55,54,53,52],[56,6,54,4],[56,10,54,8],[56,11,54,9,"_last"],[56,16,54,14],[56,19,54,17,"aMapping"],[56,27,54,25],[57,6,55,4],[57,10,55,8],[57,11,55,9,"_array"],[57,17,55,15],[57,18,55,16,"push"],[57,22,55,20],[57,23,55,21,"aMapping"],[57,31,55,29],[57,32,55,30],[58,4,56,2],[58,5,56,3],[58,11,56,9],[59,6,57,4],[59,10,57,8],[59,11,57,9,"_sorted"],[59,18,57,16],[59,21,57,19],[59,26,57,24],[60,6,58,4],[60,10,58,8],[60,11,58,9,"_array"],[60,17,58,15],[60,18,58,16,"push"],[60,22,58,20],[60,23,58,21,"aMapping"],[60,31,58,29],[60,32,58,30],[61,4,59,2],[62,2,60,0],[62,3,60,1],[64,2,62,0],[65,0,63,0],[66,0,64,0],[67,0,65,0],[68,0,66,0],[69,0,67,0],[70,0,68,0],[71,0,69,0],[72,0,70,0],[73,2,71,0,"MappingList"],[73,13,71,11],[73,14,71,12,"prototype"],[73,23,71,21],[73,24,71,22,"toArray"],[73,31,71,29],[73,34,71,32],[73,43,71,41,"MappingList_toArray"],[73,62,71,60,"MappingList_toArray"],[73,63,71,60],[73,65,71,63],[74,4,72,2],[74,8,72,6],[74,9,72,7],[74,13,72,11],[74,14,72,12,"_sorted"],[74,21,72,19],[74,23,72,21],[75,6,73,4],[75,10,73,8],[75,11,73,9,"_array"],[75,17,73,15],[75,18,73,16,"sort"],[75,22,73,20],[75,23,73,21,"util"],[75,27,73,25],[75,28,73,26,"compareByGeneratedPositionsInflated"],[75,63,73,61],[75,64,73,62],[76,6,74,4],[76,10,74,8],[76,11,74,9,"_sorted"],[76,18,74,16],[76,21,74,19],[76,25,74,23],[77,4,75,2],[78,4,76,2],[78,11,76,9],[78,15,76,13],[78,16,76,14,"_array"],[78,22,76,20],[79,2,77,0],[79,3,77,1],[80,2,79,0,"exports"],[80,9,79,7],[80,10,79,8,"MappingList"],[80,21,79,19],[80,24,79,22,"MappingList"],[80,35,79,33],[81,0,79,34]],"functionMap":{"names":["<global>","generatedPositionAfter","MappingList","MappingList_forEach","MappingList_add","MappingList_toArray"],"mappings":"AAA;ACa;CDQ;AEO;CFK;EGS;GHE;4BIO;CJQ;gCKW;CLM"}},"type":"js/module"}]}