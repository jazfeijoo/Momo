{"dependencies":[{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"RY2z4+Bdq4bpTD/1b+1jGPWZdgA="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../Utilities/infoLog","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}}],"key":"te7FMDljSHoh4Ptoq0ebhkaWbSA="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":18,"index":304},"end":{"line":14,"column":38,"index":324}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var _defineProperty = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/defineProperty\");\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n  var infoLog = _$$_REQUIRE(_dependencyMap[3], \"../Utilities/infoLog\");\n  var invariant = _$$_REQUIRE(_dependencyMap[4], \"invariant\");\n  var DEBUG = false;\n\n  /**\n   * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n   * trees of dependent tasks based on Promises. No tasks are executed unless\n   * `processNext` is called.\n   *\n   * `enqueue` takes a Task object with either a simple `run` callback, or a\n   * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n   * function is supplied, then the promise it returns will block execution of\n   * tasks already in the queue until it resolves. This can be used to make sure\n   * the first task is fully resolved (including asynchronous dependencies that\n   * also schedule more tasks via `enqueue`) before starting on the next task.\n   * The `onMoreTasks` constructor argument is used to inform the owner that an\n   * async task has resolved and that the queue should be processed again.\n   *\n   * Note: Tasks are only actually executed with explicit calls to `processNext`.\n   */\n  var TaskQueue = /*#__PURE__*/function () {\n    /**\n     * TaskQueue instances are self contained and independent, so multiple tasks\n     * of varying semantics and priority can operate together.\n     *\n     * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n     * tasks to process.\n     */\n    function TaskQueue(_ref) {\n      var onMoreTasks = _ref.onMoreTasks;\n      _classCallCheck(this, TaskQueue);\n      this._onMoreTasks = onMoreTasks;\n      this._queueStack = [{\n        tasks: [],\n        popable: false\n      }];\n    }\n\n    /**\n     * Add a task to the queue.  It is recommended to name your tasks for easier\n     * async debugging. Tasks will not be executed until `processNext` is called\n     * explicitly.\n     */\n    _createClass(TaskQueue, [{\n      key: \"enqueue\",\n      value: function enqueue(task) {\n        this._getCurrentQueue().push(task);\n      }\n    }, {\n      key: \"enqueueTasks\",\n      value: function enqueueTasks(tasks) {\n        var _this = this;\n        tasks.forEach(function (task) {\n          return _this.enqueue(task);\n        });\n      }\n    }, {\n      key: \"cancelTasks\",\n      value: function cancelTasks(tasksToCancel) {\n        // search through all tasks and remove them.\n        this._queueStack = this._queueStack.map(function (queue) {\n          return _objectSpread(_objectSpread({}, queue), {}, {\n            tasks: queue.tasks.filter(function (task) {\n              return tasksToCancel.indexOf(task) === -1;\n            })\n          });\n        }).filter(function (queue, idx) {\n          return queue.tasks.length > 0 || idx === 0;\n        });\n      }\n\n      /**\n       * Check to see if `processNext` should be called.\n       *\n       * @returns {boolean} Returns true if there are tasks that are ready to be\n       * processed with `processNext`, or returns false if there are no more tasks\n       * to be processed right now, although there may be tasks in the queue that\n       * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n       * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n       * tasks ready to run at that point.\n       */\n    }, {\n      key: \"hasTasksToProcess\",\n      value: function hasTasksToProcess() {\n        return this._getCurrentQueue().length > 0;\n      }\n\n      /**\n       * Executes the next task in the queue.\n       */\n    }, {\n      key: \"processNext\",\n      value: function processNext() {\n        var queue = this._getCurrentQueue();\n        if (queue.length) {\n          var task = queue.shift();\n          try {\n            if (typeof task === 'object' && task.gen) {\n              DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n              this._genPromise(task);\n            } else if (typeof task === 'object' && task.run) {\n              DEBUG && infoLog('TaskQueue: run task ' + task.name);\n              task.run();\n            } else {\n              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n              DEBUG && infoLog('TaskQueue: run anonymous task');\n              task();\n            }\n          } catch (e) {\n            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n            throw e;\n          }\n        }\n      }\n    }, {\n      key: \"_getCurrentQueue\",\n      value: function _getCurrentQueue() {\n        var stackIdx = this._queueStack.length - 1;\n        var queue = this._queueStack[stackIdx];\n        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n          this._queueStack.pop();\n          DEBUG && infoLog('TaskQueue: popped queue: ', {\n            stackIdx: stackIdx,\n            queueStackSize: this._queueStack.length\n          });\n          return this._getCurrentQueue();\n        } else {\n          return queue.tasks;\n        }\n      }\n    }, {\n      key: \"_genPromise\",\n      value: function _genPromise(task) {\n        var _this2 = this;\n        // Each async task pushes it's own queue onto the queue stack. This\n        // effectively defers execution of previously queued tasks until the promise\n        // resolves, at which point we allow the new queue to be popped, which\n        // happens once it is fully processed.\n        this._queueStack.push({\n          tasks: [],\n          popable: false\n        });\n        var stackIdx = this._queueStack.length - 1;\n        var stackItem = this._queueStack[stackIdx];\n        DEBUG && infoLog('TaskQueue: push new queue: ', {\n          stackIdx: stackIdx\n        });\n        DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n        task.gen().then(function () {\n          DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx: stackIdx,\n            queueStackSize: _this2._queueStack.length\n          });\n          stackItem.popable = true;\n          _this2.hasTasksToProcess() && _this2._onMoreTasks();\n        }).catch(function (ex) {\n          setTimeout(function () {\n            ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n            throw ex;\n          }, 0);\n        });\n      }\n    }]);\n    return TaskQueue;\n  }();\n  module.exports = TaskQueue;\n});","lineCount":185,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_defineProperty"],[14,21,11,13],[14,24,11,13,"_$$_REQUIRE"],[14,35,11,13],[14,36,11,13,"_dependencyMap"],[14,50,11,13],[15,2,11,13],[15,6,11,13,"_classCallCheck"],[15,21,11,13],[15,24,11,13,"_$$_REQUIRE"],[15,35,11,13],[15,36,11,13,"_dependencyMap"],[15,50,11,13],[16,2,11,13],[16,6,11,13,"_createClass"],[16,18,11,13],[16,21,11,13,"_$$_REQUIRE"],[16,32,11,13],[16,33,11,13,"_dependencyMap"],[16,47,11,13],[17,2,11,13],[17,11,11,13,"ownKeys"],[17,19,11,13,"e"],[17,20,11,13],[17,22,11,13,"r"],[17,23,11,13],[17,31,11,13,"t"],[17,32,11,13],[17,35,11,13,"Object"],[17,41,11,13],[17,42,11,13,"keys"],[17,46,11,13],[17,47,11,13,"e"],[17,48,11,13],[17,55,11,13,"Object"],[17,61,11,13],[17,62,11,13,"getOwnPropertySymbols"],[17,83,11,13],[17,91,11,13,"o"],[17,92,11,13],[17,95,11,13,"Object"],[17,101,11,13],[17,102,11,13,"getOwnPropertySymbols"],[17,123,11,13],[17,124,11,13,"e"],[17,125,11,13],[17,128,11,13,"r"],[17,129,11,13],[17,134,11,13,"o"],[17,135,11,13],[17,138,11,13,"o"],[17,139,11,13],[17,140,11,13,"filter"],[17,146,11,13],[17,157,11,13,"r"],[17,158,11,13],[17,169,11,13,"Object"],[17,175,11,13],[17,176,11,13,"getOwnPropertyDescriptor"],[17,200,11,13],[17,201,11,13,"e"],[17,202,11,13],[17,204,11,13,"r"],[17,205,11,13],[17,207,11,13,"enumerable"],[17,217,11,13],[17,224,11,13,"t"],[17,225,11,13],[17,226,11,13,"push"],[17,230,11,13],[17,231,11,13,"apply"],[17,236,11,13],[17,237,11,13,"t"],[17,238,11,13],[17,240,11,13,"o"],[17,241,11,13],[17,253,11,13,"t"],[17,254,11,13],[18,2,11,13],[18,11,11,13,"_objectSpread"],[18,25,11,13,"e"],[18,26,11,13],[18,39,11,13,"r"],[18,40,11,13],[18,46,11,13,"r"],[18,47,11,13],[18,50,11,13,"arguments"],[18,59,11,13],[18,60,11,13,"length"],[18,66,11,13],[18,68,11,13,"r"],[18,69,11,13],[18,79,11,13,"t"],[18,80,11,13],[18,91,11,13,"arguments"],[18,100,11,13],[18,101,11,13,"r"],[18,102,11,13],[18,106,11,13,"arguments"],[18,115,11,13],[18,116,11,13,"r"],[18,117,11,13],[18,125,11,13,"r"],[18,126,11,13],[18,133,11,13,"ownKeys"],[18,140,11,13],[18,141,11,13,"Object"],[18,147,11,13],[18,148,11,13,"t"],[18,149,11,13],[18,156,11,13,"forEach"],[18,163,11,13],[18,174,11,13,"r"],[18,175,11,13],[18,179,11,13,"_defineProperty"],[18,194,11,13],[18,195,11,13,"e"],[18,196,11,13],[18,198,11,13,"r"],[18,199,11,13],[18,201,11,13,"t"],[18,202,11,13],[18,203,11,13,"r"],[18,204,11,13],[18,213,11,13,"Object"],[18,219,11,13],[18,220,11,13,"getOwnPropertyDescriptors"],[18,245,11,13],[18,248,11,13,"Object"],[18,254,11,13],[18,255,11,13,"defineProperties"],[18,271,11,13],[18,272,11,13,"e"],[18,273,11,13],[18,275,11,13,"Object"],[18,281,11,13],[18,282,11,13,"getOwnPropertyDescriptors"],[18,307,11,13],[18,308,11,13,"t"],[18,309,11,13],[18,314,11,13,"ownKeys"],[18,321,11,13],[18,322,11,13,"Object"],[18,328,11,13],[18,329,11,13,"t"],[18,330,11,13],[18,333,11,13,"forEach"],[18,340,11,13],[18,351,11,13,"r"],[18,352,11,13],[18,356,11,13,"Object"],[18,362,11,13],[18,363,11,13,"defineProperty"],[18,377,11,13],[18,378,11,13,"e"],[18,379,11,13],[18,381,11,13,"r"],[18,382,11,13],[18,384,11,13,"Object"],[18,390,11,13],[18,391,11,13,"getOwnPropertyDescriptor"],[18,415,11,13],[18,416,11,13,"t"],[18,417,11,13],[18,419,11,13,"r"],[18,420,11,13],[18,437,11,13,"e"],[18,438,11,13],[19,2,13,0],[19,6,13,6,"infoLog"],[19,13,13,13],[19,16,13,16,"require"],[19,27,13,23],[19,28,13,23,"_dependencyMap"],[19,42,13,23],[19,69,13,46],[19,70,13,47],[20,2,14,0],[20,6,14,6,"invariant"],[20,15,14,15],[20,18,14,18,"require"],[20,29,14,25],[20,30,14,25,"_dependencyMap"],[20,44,14,25],[20,60,14,37],[20,61,14,38],[21,2,26,0],[21,6,26,6,"DEBUG"],[21,11,26,18],[21,14,26,21],[21,19,26,26],[23,2,28,0],[24,0,29,0],[25,0,30,0],[26,0,31,0],[27,0,32,0],[28,0,33,0],[29,0,34,0],[30,0,35,0],[31,0,36,0],[32,0,37,0],[33,0,38,0],[34,0,39,0],[35,0,40,0],[36,0,41,0],[37,0,42,0],[38,0,43,0],[39,2,28,0],[39,6,44,6,"TaskQueue"],[39,15,44,15],[40,4,45,2],[41,0,46,0],[42,0,47,0],[43,0,48,0],[44,0,49,0],[45,0,50,0],[46,0,51,0],[47,4,52,2],[47,13,52,2,"TaskQueue"],[47,23,52,2,"_ref"],[47,27,52,2],[47,29,52,61],[48,6,52,61],[48,10,52,15,"onMoreTasks"],[48,21,52,26],[48,24,52,26,"_ref"],[48,28,52,26],[48,29,52,15,"onMoreTasks"],[48,40,52,26],[49,6,52,26,"_classCallCheck"],[49,21,52,26],[49,28,52,26,"TaskQueue"],[49,37,52,26],[50,6,53,4],[50,10,53,8],[50,11,53,9,"_onMoreTasks"],[50,23,53,21],[50,26,53,24,"onMoreTasks"],[50,37,53,35],[51,6,54,4],[51,10,54,8],[51,11,54,9,"_queueStack"],[51,22,54,20],[51,25,54,23],[51,26,54,24],[52,8,54,25,"tasks"],[52,13,54,30],[52,15,54,32],[52,17,54,34],[53,8,54,36,"popable"],[53,15,54,43],[53,17,54,45],[54,6,54,50],[54,7,54,51],[54,8,54,52],[55,4,55,2],[57,4,57,2],[58,0,58,0],[59,0,59,0],[60,0,60,0],[61,0,61,0],[62,4,57,2,"_createClass"],[62,16,57,2],[62,17,57,2,"TaskQueue"],[62,26,57,2],[63,6,57,2,"key"],[63,9,57,2],[64,6,57,2,"value"],[64,11,57,2],[64,13,62,2],[64,22,62,2,"enqueue"],[64,30,62,10,"task"],[64,34,62,20],[64,36,62,28],[65,8,63,4],[65,12,63,8],[65,13,63,9,"_getCurrentQueue"],[65,29,63,25],[65,30,63,26],[65,31,63,27],[65,32,63,28,"push"],[65,36,63,32],[65,37,63,33,"task"],[65,41,63,37],[65,42,63,38],[66,6,64,2],[67,4,64,3],[68,6,64,3,"key"],[68,9,64,3],[69,6,64,3,"value"],[69,11,64,3],[69,13,66,2],[69,22,66,2,"enqueueTasks"],[69,35,66,15,"tasks"],[69,40,66,33],[69,42,66,41],[70,8,66,41],[70,12,66,41,"_this"],[70,17,66,41],[71,8,67,4,"tasks"],[71,13,67,9],[71,14,67,10,"forEach"],[71,21,67,17],[71,22,67,18],[71,32,67,18,"task"],[71,36,67,22],[72,10,67,22],[72,17,67,26,"_this"],[72,22,67,30],[72,23,67,31,"enqueue"],[72,30,67,38],[72,31,67,39,"task"],[72,35,67,43],[72,36,67,44],[73,8,67,44],[73,10,67,45],[74,6,68,2],[75,4,68,3],[76,6,68,3,"key"],[76,9,68,3],[77,6,68,3,"value"],[77,11,68,3],[77,13,70,2],[77,22,70,2,"cancelTasks"],[77,34,70,14,"tasksToCancel"],[77,47,70,40],[77,49,70,48],[78,8,71,4],[79,8,72,4],[79,12,72,8],[79,13,72,9,"_queueStack"],[79,24,72,20],[79,27,72,23],[79,31,72,27],[79,32,72,28,"_queueStack"],[79,43,72,39],[79,44,73,7,"map"],[79,47,73,10],[79,48,73,11],[79,58,73,11,"queue"],[79,63,73,16],[80,10,73,16],[80,17,73,16,"_objectSpread"],[80,30,73,16],[80,31,73,16,"_objectSpread"],[80,44,73,16],[80,49,74,11,"queue"],[80,54,74,16],[81,12,75,8,"tasks"],[81,17,75,13],[81,19,75,15,"queue"],[81,24,75,20],[81,25,75,21,"tasks"],[81,30,75,26],[81,31,75,27,"filter"],[81,37,75,33],[81,38,75,34],[81,48,75,34,"task"],[81,52,75,38],[82,14,75,38],[82,21,75,42,"tasksToCancel"],[82,34,75,55],[82,35,75,56,"indexOf"],[82,42,75,63],[82,43,75,64,"task"],[82,47,75,68],[82,48,75,69],[82,53,75,74],[82,54,75,75],[82,55,75,76],[83,12,75,76],[84,10,75,77],[85,8,75,77],[85,9,76,8],[85,10,76,9],[85,11,77,7,"filter"],[85,17,77,13],[85,18,77,14],[85,28,77,15,"queue"],[85,33,77,20],[85,35,77,22,"idx"],[85,38,77,25],[86,10,77,25],[86,17,77,30,"queue"],[86,22,77,35],[86,23,77,36,"tasks"],[86,28,77,41],[86,29,77,42,"length"],[86,35,77,48],[86,38,77,51],[86,39,77,52],[86,43,77,56,"idx"],[86,46,77,59],[86,51,77,64],[86,52,77,65],[87,8,77,65],[87,10,77,66],[88,6,78,2],[90,6,80,2],[91,0,81,0],[92,0,82,0],[93,0,83,0],[94,0,84,0],[95,0,85,0],[96,0,86,0],[97,0,87,0],[98,0,88,0],[99,0,89,0],[100,4,80,2],[101,6,80,2,"key"],[101,9,80,2],[102,6,80,2,"value"],[102,11,80,2],[102,13,90,2],[102,22,90,2,"hasTasksToProcess"],[102,40,90,2],[102,42,90,31],[103,8,91,4],[103,15,91,11],[103,19,91,15],[103,20,91,16,"_getCurrentQueue"],[103,36,91,32],[103,37,91,33],[103,38,91,34],[103,39,91,35,"length"],[103,45,91,41],[103,48,91,44],[103,49,91,45],[104,6,92,2],[106,6,94,2],[107,0,95,0],[108,0,96,0],[109,4,94,2],[110,6,94,2,"key"],[110,9,94,2],[111,6,94,2,"value"],[111,11,94,2],[111,13,97,2],[111,22,97,2,"processNext"],[111,34,97,2],[111,36,97,22],[112,8,98,4],[112,12,98,10,"queue"],[112,17,98,15],[112,20,98,18],[112,24,98,22],[112,25,98,23,"_getCurrentQueue"],[112,41,98,39],[112,42,98,40],[112,43,98,41],[113,8,99,4],[113,12,99,8,"queue"],[113,17,99,13],[113,18,99,14,"length"],[113,24,99,20],[113,26,99,22],[114,10,100,6],[114,14,100,12,"task"],[114,18,100,16],[114,21,100,19,"queue"],[114,26,100,24],[114,27,100,25,"shift"],[114,32,100,30],[114,33,100,31],[114,34,100,32],[115,10,101,6],[115,14,101,10],[116,12,102,8],[116,16,102,12],[116,23,102,19,"task"],[116,27,102,23],[116,32,102,28],[116,40,102,36],[116,44,102,40,"task"],[116,48,102,44],[116,49,102,45,"gen"],[116,52,102,48],[116,54,102,50],[117,14,103,10,"DEBUG"],[117,19,103,15],[117,23,103,19,"infoLog"],[117,30,103,26],[117,31,103,27],[117,64,103,60],[117,67,103,63,"task"],[117,71,103,67],[117,72,103,68,"name"],[117,76,103,72],[117,77,103,73],[118,14,104,10],[118,18,104,14],[118,19,104,15,"_genPromise"],[118,30,104,26],[118,31,104,27,"task"],[118,35,104,31],[118,36,104,32],[119,12,105,8],[119,13,105,9],[119,19,105,15],[119,23,105,19],[119,30,105,26,"task"],[119,34,105,30],[119,39,105,35],[119,47,105,43],[119,51,105,47,"task"],[119,55,105,51],[119,56,105,52,"run"],[119,59,105,55],[119,61,105,57],[120,14,106,10,"DEBUG"],[120,19,106,15],[120,23,106,19,"infoLog"],[120,30,106,26],[120,31,106,27],[120,53,106,49],[120,56,106,52,"task"],[120,60,106,56],[120,61,106,57,"name"],[120,65,106,61],[120,66,106,62],[121,14,107,10,"task"],[121,18,107,14],[121,19,107,15,"run"],[121,22,107,18],[121,23,107,19],[121,24,107,20],[122,12,108,8],[122,13,108,9],[122,19,108,15],[123,14,109,10,"invariant"],[123,23,109,19],[123,24,110,12],[123,31,110,19,"task"],[123,35,110,23],[123,40,110,28],[123,50,110,38],[123,52,111,12],[123,111,111,71],[123,114,112,14,"JSON"],[123,118,112,18],[123,119,112,19,"stringify"],[123,128,112,28],[123,129,112,29,"task"],[123,133,112,33],[123,135,112,35],[123,139,112,39],[123,141,112,41],[123,142,112,42],[123,143,113,10],[123,144,113,11],[124,14,114,10,"DEBUG"],[124,19,114,15],[124,23,114,19,"infoLog"],[124,30,114,26],[124,31,114,27],[124,62,114,58],[124,63,114,59],[125,14,115,10,"task"],[125,18,115,14],[125,19,115,15],[125,20,115,16],[126,12,116,8],[127,10,117,6],[127,11,117,7],[127,12,117,8],[127,19,117,15,"e"],[127,20,117,16],[127,22,117,18],[128,12,118,8,"e"],[128,13,118,9],[128,14,118,10,"message"],[128,21,118,17],[128,24,119,10],[128,53,119,39],[128,57,119,43,"task"],[128,61,119,47],[128,62,119,48,"name"],[128,66,119,52],[128,70,119,56],[128,72,119,58],[128,73,119,59],[128,76,119,62],[128,80,119,66],[128,83,119,69,"e"],[128,84,119,70],[128,85,119,71,"message"],[128,92,119,78],[129,12,120,8],[129,18,120,14,"e"],[129,19,120,15],[130,10,121,6],[131,8,122,4],[132,6,123,2],[133,4,123,3],[134,6,123,3,"key"],[134,9,123,3],[135,6,123,3,"value"],[135,11,123,3],[135,13,132,2],[135,22,132,2,"_getCurrentQueue"],[135,39,132,2],[135,41,132,34],[136,8,133,4],[136,12,133,10,"stackIdx"],[136,20,133,18],[136,23,133,21],[136,27,133,25],[136,28,133,26,"_queueStack"],[136,39,133,37],[136,40,133,38,"length"],[136,46,133,44],[136,49,133,47],[136,50,133,48],[137,8,134,4],[137,12,134,10,"queue"],[137,17,134,15],[137,20,134,18],[137,24,134,22],[137,25,134,23,"_queueStack"],[137,36,134,34],[137,37,134,35,"stackIdx"],[137,45,134,43],[137,46,134,44],[138,8,135,4],[138,12,136,6,"queue"],[138,17,136,11],[138,18,136,12,"popable"],[138,25,136,19],[138,29,137,6,"queue"],[138,34,137,11],[138,35,137,12,"tasks"],[138,40,137,17],[138,41,137,18,"length"],[138,47,137,24],[138,52,137,29],[138,53,137,30],[138,57,138,6],[138,61,138,10],[138,62,138,11,"_queueStack"],[138,73,138,22],[138,74,138,23,"length"],[138,80,138,29],[138,83,138,32],[138,84,138,33],[138,86,139,6],[139,10,140,6],[139,14,140,10],[139,15,140,11,"_queueStack"],[139,26,140,22],[139,27,140,23,"pop"],[139,30,140,26],[139,31,140,27],[139,32,140,28],[140,10,141,6,"DEBUG"],[140,15,141,11],[140,19,142,8,"infoLog"],[140,26,142,15],[140,27,142,16],[140,54,142,43],[140,56,142,45],[141,12,143,10,"stackIdx"],[141,20,143,18],[141,22,143,10,"stackIdx"],[141,30,143,18],[142,12,144,10,"queueStackSize"],[142,26,144,24],[142,28,144,26],[142,32,144,30],[142,33,144,31,"_queueStack"],[142,44,144,42],[142,45,144,43,"length"],[143,10,145,8],[143,11,145,9],[143,12,145,10],[144,10,146,6],[144,17,146,13],[144,21,146,17],[144,22,146,18,"_getCurrentQueue"],[144,38,146,34],[144,39,146,35],[144,40,146,36],[145,8,147,4],[145,9,147,5],[145,15,147,11],[146,10,148,6],[146,17,148,13,"queue"],[146,22,148,18],[146,23,148,19,"tasks"],[146,28,148,24],[147,8,149,4],[148,6,150,2],[149,4,150,3],[150,6,150,3,"key"],[150,9,150,3],[151,6,150,3,"value"],[151,11,150,3],[151,13,152,2],[151,22,152,2,"_genPromise"],[151,34,152,14,"task"],[151,38,152,31],[151,40,152,33],[152,8,152,33],[152,12,152,33,"_this2"],[152,18,152,33],[153,8,153,4],[154,8,154,4],[155,8,155,4],[156,8,156,4],[157,8,157,4],[157,12,157,8],[157,13,157,9,"_queueStack"],[157,24,157,20],[157,25,157,21,"push"],[157,29,157,25],[157,30,157,26],[158,10,157,27,"tasks"],[158,15,157,32],[158,17,157,34],[158,19,157,36],[159,10,157,38,"popable"],[159,17,157,45],[159,19,157,47],[160,8,157,52],[160,9,157,53],[160,10,157,54],[161,8,158,4],[161,12,158,10,"stackIdx"],[161,20,158,18],[161,23,158,21],[161,27,158,25],[161,28,158,26,"_queueStack"],[161,39,158,37],[161,40,158,38,"length"],[161,46,158,44],[161,49,158,47],[161,50,158,48],[162,8,159,4],[162,12,159,10,"stackItem"],[162,21,159,19],[162,24,159,22],[162,28,159,26],[162,29,159,27,"_queueStack"],[162,40,159,38],[162,41,159,39,"stackIdx"],[162,49,159,47],[162,50,159,48],[163,8,160,4,"DEBUG"],[163,13,160,9],[163,17,160,13,"infoLog"],[163,24,160,20],[163,25,160,21],[163,54,160,50],[163,56,160,52],[164,10,160,53,"stackIdx"],[164,18,160,61],[164,20,160,53,"stackIdx"],[165,8,160,61],[165,9,160,62],[165,10,160,63],[166,8,161,4,"DEBUG"],[166,13,161,9],[166,17,161,13,"infoLog"],[166,24,161,20],[166,25,161,21],[166,52,161,48],[166,55,161,51,"task"],[166,59,161,55],[166,60,161,56,"name"],[166,64,161,60],[166,65,161,61],[167,8,162,4,"task"],[167,12,162,8],[167,13,163,7,"gen"],[167,16,163,10],[167,17,163,11],[167,18,163,12],[167,19,164,7,"then"],[167,23,164,11],[167,24,164,12],[167,36,164,18],[168,10,165,8,"DEBUG"],[168,15,165,13],[168,19,166,10,"infoLog"],[168,26,166,17],[168,27,166,18],[168,60,166,51],[168,63,166,54,"task"],[168,67,166,58],[168,68,166,59,"name"],[168,72,166,63],[168,74,166,65],[169,12,167,12,"stackIdx"],[169,20,167,20],[169,22,167,12,"stackIdx"],[169,30,167,20],[170,12,168,12,"queueStackSize"],[170,26,168,26],[170,28,168,28,"_this2"],[170,34,168,32],[170,35,168,33,"_queueStack"],[170,46,168,44],[170,47,168,45,"length"],[171,10,169,10],[171,11,169,11],[171,12,169,12],[172,10,170,8,"stackItem"],[172,19,170,17],[172,20,170,18,"popable"],[172,27,170,25],[172,30,170,28],[172,34,170,32],[173,10,171,8,"_this2"],[173,16,171,12],[173,17,171,13,"hasTasksToProcess"],[173,34,171,30],[173,35,171,31],[173,36,171,32],[173,40,171,36,"_this2"],[173,46,171,40],[173,47,171,41,"_onMoreTasks"],[173,59,171,53],[173,60,171,54],[173,61,171,55],[174,8,172,6],[174,9,172,7],[174,10,172,8],[174,11,173,7,"catch"],[174,16,173,12],[174,17,173,13],[174,27,173,13,"ex"],[174,29,173,15],[174,31,173,19],[175,10,174,8,"setTimeout"],[175,20,174,18],[175,21,174,19],[175,33,174,25],[176,12,175,10,"ex"],[176,14,175,12],[176,15,175,13,"message"],[176,22,175,20],[176,25,175,24],[176,71,175,69,"task"],[176,75,175,73],[176,76,175,74,"name"],[176,80,175,79],[176,85,175,83,"ex"],[176,87,175,85],[176,88,175,86,"message"],[176,95,175,94],[176,97,175,95],[177,12,176,10],[177,18,176,16,"ex"],[177,20,176,18],[178,10,177,8],[178,11,177,9],[178,13,177,11],[178,14,177,12],[178,15,177,13],[179,8,178,6],[179,9,178,7],[179,10,178,8],[180,6,179,2],[181,4,179,3],[182,4,179,3],[182,11,179,3,"TaskQueue"],[182,20,179,3],[183,2,179,3],[184,2,182,0,"module"],[184,8,182,6],[184,9,182,7,"exports"],[184,16,182,14],[184,19,182,17,"TaskQueue"],[184,28,182,26],[185,0,182,27]],"functionMap":{"names":["<global>","TaskQueue","constructor","enqueue","enqueueTasks","tasks.forEach$argument_0","cancelTasks","_queueStack.map$argument_0","queue.tasks.filter$argument_0","_queueStack.map.filter$argument_0","hasTasksToProcess","processNext","_getCurrentQueue","_genPromise","task.gen.then$argument_0","task.gen.then._catch$argument_0","setTimeout$argument_0"],"mappings":"AAA;AC2C;ECQ;GDG;EEO;GFE;EGE;kBCC,0BD;GHC;EKE;WCG;kCCE,0CD;QDC;cGC,mDH;GLC;ESY;GTE;EUK;GV0B;EWS;GXkB;EYE;YCY;ODQ;aEC;mBCC;SDG;OFC;GZC;CDC"}},"type":"js/module"}]}