{"dependencies":[{"name":"../../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":37,"index":37}}],"key":"llq4nuOBKCCL4A7IFpRswh14toM="}},{"name":"./Raw","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":14,"index":58},"end":{"line":2,"column":30,"index":74}}],"key":"CRtWRCAsJqkolcO7tw5z7Pwo7Vw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var TYPE = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE;\n  var rawMode = _$$_REQUIRE(_dependencyMap[1], \"./Raw\").mode;\n  var ATKEYWORD = TYPE.AtKeyword;\n  var SEMICOLON = TYPE.Semicolon;\n  var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n  var RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\n  function consumeRaw(startToken) {\n    return this.Raw(startToken, rawMode.leftCurlyBracketOrSemicolon, true);\n  }\n  function isDeclarationBlockAtrule() {\n    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {\n      if (type === RIGHTCURLYBRACKET) {\n        return true;\n      }\n      if (type === LEFTCURLYBRACKET || type === ATKEYWORD) {\n        return false;\n      }\n    }\n    return false;\n  }\n  module.exports = {\n    name: 'Atrule',\n    structure: {\n      name: String,\n      prelude: ['AtrulePrelude', 'Raw', null],\n      block: ['Block', null]\n    },\n    parse: function parse() {\n      var start = this.scanner.tokenStart;\n      var name;\n      var nameLowerCase;\n      var prelude = null;\n      var block = null;\n      this.eat(ATKEYWORD);\n      name = this.scanner.substrToCursor(start + 1);\n      nameLowerCase = name.toLowerCase();\n      this.scanner.skipSC();\n\n      // parse prelude\n      if (this.scanner.eof === false && this.scanner.tokenType !== LEFTCURLYBRACKET && this.scanner.tokenType !== SEMICOLON) {\n        if (this.parseAtrulePrelude) {\n          prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name), consumeRaw);\n\n          // turn empty AtrulePrelude into null\n          if (prelude.type === 'AtrulePrelude' && prelude.children.head === null) {\n            prelude = null;\n          }\n        } else {\n          prelude = consumeRaw.call(this, this.scanner.tokenIndex);\n        }\n        this.scanner.skipSC();\n      }\n      switch (this.scanner.tokenType) {\n        case SEMICOLON:\n          this.scanner.next();\n          break;\n        case LEFTCURLYBRACKET:\n          if (this.atrule.hasOwnProperty(nameLowerCase) && typeof this.atrule[nameLowerCase].block === 'function') {\n            block = this.atrule[nameLowerCase].block.call(this);\n          } else {\n            // TODO: should consume block content as Raw?\n            block = this.Block(isDeclarationBlockAtrule.call(this));\n          }\n          break;\n      }\n      return {\n        type: 'Atrule',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        name: name,\n        prelude: prelude,\n        block: block\n      };\n    },\n    generate: function generate(node) {\n      this.chunk('@');\n      this.chunk(node.name);\n      if (node.prelude !== null) {\n        this.chunk(' ');\n        this.node(node.prelude);\n      }\n      if (node.block) {\n        this.node(node.block);\n      } else {\n        this.chunk(';');\n      }\n    },\n    walkContext: 'atrule'\n  };\n});","lineCount":90,"map":[[2,2,1,0],[2,6,1,4,"TYPE"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,25,1,18,"_dependencyMap"],[2,39,1,18],[2,61,1,36],[2,62,1,37],[2,63,1,38,"TYPE"],[2,67,1,42],[3,2,2,0],[3,6,2,4,"rawMode"],[3,13,2,11],[3,16,2,14,"require"],[3,27,2,21],[3,28,2,21,"_dependencyMap"],[3,42,2,21],[3,54,2,29],[3,55,2,30],[3,56,2,31,"mode"],[3,60,2,35],[4,2,4,0],[4,6,4,4,"ATKEYWORD"],[4,15,4,13],[4,18,4,16,"TYPE"],[4,22,4,20],[4,23,4,21,"AtKeyword"],[4,32,4,30],[5,2,5,0],[5,6,5,4,"SEMICOLON"],[5,15,5,13],[5,18,5,16,"TYPE"],[5,22,5,20],[5,23,5,21,"Semicolon"],[5,32,5,30],[6,2,6,0],[6,6,6,4,"LEFTCURLYBRACKET"],[6,22,6,20],[6,25,6,23,"TYPE"],[6,29,6,27],[6,30,6,28,"LeftCurlyBracket"],[6,46,6,44],[7,2,7,0],[7,6,7,4,"RIGHTCURLYBRACKET"],[7,23,7,21],[7,26,7,24,"TYPE"],[7,30,7,28],[7,31,7,29,"RightCurlyBracket"],[7,48,7,46],[8,2,9,0],[8,11,9,9,"consumeRaw"],[8,21,9,19,"consumeRaw"],[8,22,9,20,"startToken"],[8,32,9,30],[8,34,9,32],[9,4,10,4],[9,11,10,11],[9,15,10,15],[9,16,10,16,"Raw"],[9,19,10,19],[9,20,10,20,"startToken"],[9,30,10,30],[9,32,10,32,"rawMode"],[9,39,10,39],[9,40,10,40,"leftCurlyBracketOrSemicolon"],[9,67,10,67],[9,69,10,69],[9,73,10,73],[9,74,10,74],[10,2,11,0],[11,2,13,0],[11,11,13,9,"isDeclarationBlockAtrule"],[11,35,13,33,"isDeclarationBlockAtrule"],[11,36,13,33],[11,38,13,36],[12,4,14,4],[12,9,14,9],[12,13,14,13,"offset"],[12,19,14,19],[12,22,14,22],[12,23,14,23],[12,25,14,25,"type"],[12,29,14,29],[12,31,14,31,"type"],[12,35,14,35],[12,38,14,38],[12,42,14,42],[12,43,14,43,"scanner"],[12,50,14,50],[12,51,14,51,"lookupType"],[12,61,14,61],[12,62,14,62,"offset"],[12,68,14,68],[12,69,14,69],[12,71,14,71,"offset"],[12,77,14,77],[12,79,14,79],[12,81,14,81],[13,6,15,8],[13,10,15,12,"type"],[13,14,15,16],[13,19,15,21,"RIGHTCURLYBRACKET"],[13,36,15,38],[13,38,15,40],[14,8,16,12],[14,15,16,19],[14,19,16,23],[15,6,17,8],[16,6,19,8],[16,10,19,12,"type"],[16,14,19,16],[16,19,19,21,"LEFTCURLYBRACKET"],[16,35,19,37],[16,39,20,12,"type"],[16,43,20,16],[16,48,20,21,"ATKEYWORD"],[16,57,20,30],[16,59,20,32],[17,8,21,12],[17,15,21,19],[17,20,21,24],[18,6,22,8],[19,4,23,4],[20,4,25,4],[20,11,25,11],[20,16,25,16],[21,2,26,0],[22,2,28,0,"module"],[22,8,28,6],[22,9,28,7,"exports"],[22,16,28,14],[22,19,28,17],[23,4,29,4,"name"],[23,8,29,8],[23,10,29,10],[23,18,29,18],[24,4,30,4,"structure"],[24,13,30,13],[24,15,30,15],[25,6,31,8,"name"],[25,10,31,12],[25,12,31,14,"String"],[25,18,31,20],[26,6,32,8,"prelude"],[26,13,32,15],[26,15,32,17],[26,16,32,18],[26,31,32,33],[26,33,32,35],[26,38,32,40],[26,40,32,42],[26,44,32,46],[26,45,32,47],[27,6,33,8,"block"],[27,11,33,13],[27,13,33,15],[27,14,33,16],[27,21,33,23],[27,23,33,25],[27,27,33,29],[28,4,34,4],[28,5,34,5],[29,4,35,4,"parse"],[29,9,35,9],[29,11,35,11],[29,20,35,11,"parse"],[29,26,35,11],[29,28,35,22],[30,6,36,8],[30,10,36,12,"start"],[30,15,36,17],[30,18,36,20],[30,22,36,24],[30,23,36,25,"scanner"],[30,30,36,32],[30,31,36,33,"tokenStart"],[30,41,36,43],[31,6,37,8],[31,10,37,12,"name"],[31,14,37,16],[32,6,38,8],[32,10,38,12,"nameLowerCase"],[32,23,38,25],[33,6,39,8],[33,10,39,12,"prelude"],[33,17,39,19],[33,20,39,22],[33,24,39,26],[34,6,40,8],[34,10,40,12,"block"],[34,15,40,17],[34,18,40,20],[34,22,40,24],[35,6,42,8],[35,10,42,12],[35,11,42,13,"eat"],[35,14,42,16],[35,15,42,17,"ATKEYWORD"],[35,24,42,26],[35,25,42,27],[36,6,44,8,"name"],[36,10,44,12],[36,13,44,15],[36,17,44,19],[36,18,44,20,"scanner"],[36,25,44,27],[36,26,44,28,"substrToCursor"],[36,40,44,42],[36,41,44,43,"start"],[36,46,44,48],[36,49,44,51],[36,50,44,52],[36,51,44,53],[37,6,45,8,"nameLowerCase"],[37,19,45,21],[37,22,45,24,"name"],[37,26,45,28],[37,27,45,29,"toLowerCase"],[37,38,45,40],[37,39,45,41],[37,40,45,42],[38,6,46,8],[38,10,46,12],[38,11,46,13,"scanner"],[38,18,46,20],[38,19,46,21,"skipSC"],[38,25,46,27],[38,26,46,28],[38,27,46,29],[40,6,48,8],[41,6,49,8],[41,10,49,12],[41,14,49,16],[41,15,49,17,"scanner"],[41,22,49,24],[41,23,49,25,"eof"],[41,26,49,28],[41,31,49,33],[41,36,49,38],[41,40,50,12],[41,44,50,16],[41,45,50,17,"scanner"],[41,52,50,24],[41,53,50,25,"tokenType"],[41,62,50,34],[41,67,50,39,"LEFTCURLYBRACKET"],[41,83,50,55],[41,87,51,12],[41,91,51,16],[41,92,51,17,"scanner"],[41,99,51,24],[41,100,51,25,"tokenType"],[41,109,51,34],[41,114,51,39,"SEMICOLON"],[41,123,51,48],[41,125,51,50],[42,8,52,12],[42,12,52,16],[42,16,52,20],[42,17,52,21,"parseAtrulePrelude"],[42,35,52,39],[42,37,52,41],[43,10,53,16,"prelude"],[43,17,53,23],[43,20,53,26],[43,24,53,30],[43,25,53,31,"parseWithFallback"],[43,42,53,48],[43,43,53,49],[43,47,53,53],[43,48,53,54,"AtrulePrelude"],[43,61,53,67],[43,62,53,68,"bind"],[43,66,53,72],[43,67,53,73],[43,71,53,77],[43,73,53,79,"name"],[43,77,53,83],[43,78,53,84],[43,80,53,86,"consumeRaw"],[43,90,53,96],[43,91,53,97],[45,10,55,16],[46,10,56,16],[46,14,56,20,"prelude"],[46,21,56,27],[46,22,56,28,"type"],[46,26,56,32],[46,31,56,37],[46,46,56,52],[46,50,56,56,"prelude"],[46,57,56,63],[46,58,56,64,"children"],[46,66,56,72],[46,67,56,73,"head"],[46,71,56,77],[46,76,56,82],[46,80,56,86],[46,82,56,88],[47,12,57,20,"prelude"],[47,19,57,27],[47,22,57,30],[47,26,57,34],[48,10,58,16],[49,8,59,12],[49,9,59,13],[49,15,59,19],[50,10,60,16,"prelude"],[50,17,60,23],[50,20,60,26,"consumeRaw"],[50,30,60,36],[50,31,60,37,"call"],[50,35,60,41],[50,36,60,42],[50,40,60,46],[50,42,60,48],[50,46,60,52],[50,47,60,53,"scanner"],[50,54,60,60],[50,55,60,61,"tokenIndex"],[50,65,60,71],[50,66,60,72],[51,8,61,12],[52,8,63,12],[52,12,63,16],[52,13,63,17,"scanner"],[52,20,63,24],[52,21,63,25,"skipSC"],[52,27,63,31],[52,28,63,32],[52,29,63,33],[53,6,64,8],[54,6,66,8],[54,14,66,16],[54,18,66,20],[54,19,66,21,"scanner"],[54,26,66,28],[54,27,66,29,"tokenType"],[54,36,66,38],[55,8,67,12],[55,13,67,17,"SEMICOLON"],[55,22,67,26],[56,10,68,16],[56,14,68,20],[56,15,68,21,"scanner"],[56,22,68,28],[56,23,68,29,"next"],[56,27,68,33],[56,28,68,34],[56,29,68,35],[57,10,69,16],[58,8,71,12],[58,13,71,17,"LEFTCURLYBRACKET"],[58,29,71,33],[59,10,72,16],[59,14,72,20],[59,18,72,24],[59,19,72,25,"atrule"],[59,25,72,31],[59,26,72,32,"hasOwnProperty"],[59,40,72,46],[59,41,72,47,"nameLowerCase"],[59,54,72,60],[59,55,72,61],[59,59,73,20],[59,66,73,27],[59,70,73,31],[59,71,73,32,"atrule"],[59,77,73,38],[59,78,73,39,"nameLowerCase"],[59,91,73,52],[59,92,73,53],[59,93,73,54,"block"],[59,98,73,59],[59,103,73,64],[59,113,73,74],[59,115,73,76],[60,12,74,20,"block"],[60,17,74,25],[60,20,74,28],[60,24,74,32],[60,25,74,33,"atrule"],[60,31,74,39],[60,32,74,40,"nameLowerCase"],[60,45,74,53],[60,46,74,54],[60,47,74,55,"block"],[60,52,74,60],[60,53,74,61,"call"],[60,57,74,65],[60,58,74,66],[60,62,74,70],[60,63,74,71],[61,10,75,16],[61,11,75,17],[61,17,75,23],[62,12,76,20],[63,12,77,20,"block"],[63,17,77,25],[63,20,77,28],[63,24,77,32],[63,25,77,33,"Block"],[63,30,77,38],[63,31,77,39,"isDeclarationBlockAtrule"],[63,55,77,63],[63,56,77,64,"call"],[63,60,77,68],[63,61,77,69],[63,65,77,73],[63,66,77,74],[63,67,77,75],[64,10,78,16],[65,10,80,16],[66,6,81,8],[67,6,83,8],[67,13,83,15],[68,8,84,12,"type"],[68,12,84,16],[68,14,84,18],[68,22,84,26],[69,8,85,12,"loc"],[69,11,85,15],[69,13,85,17],[69,17,85,21],[69,18,85,22,"getLocation"],[69,29,85,33],[69,30,85,34,"start"],[69,35,85,39],[69,37,85,41],[69,41,85,45],[69,42,85,46,"scanner"],[69,49,85,53],[69,50,85,54,"tokenStart"],[69,60,85,64],[69,61,85,65],[70,8,86,12,"name"],[70,12,86,16],[70,14,86,18,"name"],[70,18,86,22],[71,8,87,12,"prelude"],[71,15,87,19],[71,17,87,21,"prelude"],[71,24,87,28],[72,8,88,12,"block"],[72,13,88,17],[72,15,88,19,"block"],[73,6,89,8],[73,7,89,9],[74,4,90,4],[74,5,90,5],[75,4,91,4,"generate"],[75,12,91,12],[75,14,91,14],[75,23,91,14,"generate"],[75,32,91,23,"node"],[75,36,91,27],[75,38,91,29],[76,6,92,8],[76,10,92,12],[76,11,92,13,"chunk"],[76,16,92,18],[76,17,92,19],[76,20,92,22],[76,21,92,23],[77,6,93,8],[77,10,93,12],[77,11,93,13,"chunk"],[77,16,93,18],[77,17,93,19,"node"],[77,21,93,23],[77,22,93,24,"name"],[77,26,93,28],[77,27,93,29],[78,6,95,8],[78,10,95,12,"node"],[78,14,95,16],[78,15,95,17,"prelude"],[78,22,95,24],[78,27,95,29],[78,31,95,33],[78,33,95,35],[79,8,96,12],[79,12,96,16],[79,13,96,17,"chunk"],[79,18,96,22],[79,19,96,23],[79,22,96,26],[79,23,96,27],[80,8,97,12],[80,12,97,16],[80,13,97,17,"node"],[80,17,97,21],[80,18,97,22,"node"],[80,22,97,26],[80,23,97,27,"prelude"],[80,30,97,34],[80,31,97,35],[81,6,98,8],[82,6,100,8],[82,10,100,12,"node"],[82,14,100,16],[82,15,100,17,"block"],[82,20,100,22],[82,22,100,24],[83,8,101,12],[83,12,101,16],[83,13,101,17,"node"],[83,17,101,21],[83,18,101,22,"node"],[83,22,101,26],[83,23,101,27,"block"],[83,28,101,32],[83,29,101,33],[84,6,102,8],[84,7,102,9],[84,13,102,15],[85,8,103,12],[85,12,103,16],[85,13,103,17,"chunk"],[85,18,103,22],[85,19,103,23],[85,22,103,26],[85,23,103,27],[86,6,104,8],[87,4,105,4],[87,5,105,5],[88,4,106,4,"walkContext"],[88,15,106,15],[88,17,106,17],[89,2,107,0],[89,3,107,1],[90,0,107,2]],"functionMap":{"names":["<global>","consumeRaw","isDeclarationBlockAtrule","module.exports.parse","module.exports.generate"],"mappings":"AAA;ACQ;CDE;AEE;CFa;WGS;KHuD;cIC;KJc"}},"type":"js/module"}]}