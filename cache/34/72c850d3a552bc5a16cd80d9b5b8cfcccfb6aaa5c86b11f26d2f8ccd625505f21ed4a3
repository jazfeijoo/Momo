{"dependencies":[{"name":"../../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":16,"index":16},"end":{"line":1,"column":42,"index":42}}],"key":"llq4nuOBKCCL4A7IFpRswh14toM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var tokenizer = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\");\n  var TYPE = tokenizer.TYPE;\n  var WhiteSpace = TYPE.WhiteSpace;\n  var Semicolon = TYPE.Semicolon;\n  var LeftCurlyBracket = TYPE.LeftCurlyBracket;\n  var Delim = TYPE.Delim;\n  var EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)\n\n  function getOffsetExcludeWS() {\n    if (this.scanner.tokenIndex > 0) {\n      if (this.scanner.lookupType(-1) === WhiteSpace) {\n        return this.scanner.tokenIndex > 1 ? this.scanner.getTokenStart(this.scanner.tokenIndex - 1) : this.scanner.firstCharOffset;\n      }\n    }\n    return this.scanner.tokenStart;\n  }\n\n  // 0, 0, false\n  function balanceEnd() {\n    return 0;\n  }\n\n  // LEFTCURLYBRACKET, 0, false\n  function leftCurlyBracket(tokenType) {\n    return tokenType === LeftCurlyBracket ? 1 : 0;\n  }\n\n  // LEFTCURLYBRACKET, SEMICOLON, false\n  function leftCurlyBracketOrSemicolon(tokenType) {\n    return tokenType === LeftCurlyBracket || tokenType === Semicolon ? 1 : 0;\n  }\n\n  // EXCLAMATIONMARK, SEMICOLON, false\n  function exclamationMarkOrSemicolon(tokenType, source, offset) {\n    if (tokenType === Delim && source.charCodeAt(offset) === EXCLAMATIONMARK) {\n      return 1;\n    }\n    return tokenType === Semicolon ? 1 : 0;\n  }\n\n  // 0, SEMICOLON, true\n  function semicolonIncluded(tokenType) {\n    return tokenType === Semicolon ? 2 : 0;\n  }\n  module.exports = {\n    name: 'Raw',\n    structure: {\n      value: String\n    },\n    parse: function parse(startToken, mode, excludeWhiteSpace) {\n      var startOffset = this.scanner.getTokenStart(startToken);\n      var endOffset;\n      this.scanner.skip(this.scanner.getRawLength(startToken, mode || balanceEnd));\n      if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {\n        endOffset = getOffsetExcludeWS.call(this);\n      } else {\n        endOffset = this.scanner.tokenStart;\n      }\n      return {\n        type: 'Raw',\n        loc: this.getLocation(startOffset, endOffset),\n        value: this.scanner.source.substring(startOffset, endOffset)\n      };\n    },\n    generate: function generate(node) {\n      this.chunk(node.value);\n    },\n    mode: {\n      default: balanceEnd,\n      leftCurlyBracket: leftCurlyBracket,\n      leftCurlyBracketOrSemicolon: leftCurlyBracketOrSemicolon,\n      exclamationMarkOrSemicolon: exclamationMarkOrSemicolon,\n      semicolonIncluded: semicolonIncluded\n    }\n  };\n});","lineCount":77,"map":[[2,2,1,0],[2,6,1,4,"tokenizer"],[2,15,1,13],[2,18,1,16,"require"],[2,29,1,23],[2,30,1,23,"_dependencyMap"],[2,44,1,23],[2,66,1,41],[2,67,1,42],[3,2,2,0],[3,6,2,4,"TYPE"],[3,10,2,8],[3,13,2,11,"tokenizer"],[3,22,2,20],[3,23,2,21,"TYPE"],[3,27,2,25],[4,2,4,0],[4,6,4,4,"WhiteSpace"],[4,16,4,14],[4,19,4,17,"TYPE"],[4,23,4,21],[4,24,4,22,"WhiteSpace"],[4,34,4,32],[5,2,5,0],[5,6,5,4,"Semicolon"],[5,15,5,13],[5,18,5,16,"TYPE"],[5,22,5,20],[5,23,5,21,"Semicolon"],[5,32,5,30],[6,2,6,0],[6,6,6,4,"LeftCurlyBracket"],[6,22,6,20],[6,25,6,23,"TYPE"],[6,29,6,27],[6,30,6,28,"LeftCurlyBracket"],[6,46,6,44],[7,2,7,0],[7,6,7,4,"Delim"],[7,11,7,9],[7,14,7,12,"TYPE"],[7,18,7,16],[7,19,7,17,"Delim"],[7,24,7,22],[8,2,8,0],[8,6,8,4,"EXCLAMATIONMARK"],[8,21,8,19],[8,24,8,22],[8,30,8,28],[8,31,8,29],[8,32,8,30],[10,2,10,0],[10,11,10,9,"getOffsetExcludeWS"],[10,29,10,27,"getOffsetExcludeWS"],[10,30,10,27],[10,32,10,30],[11,4,11,4],[11,8,11,8],[11,12,11,12],[11,13,11,13,"scanner"],[11,20,11,20],[11,21,11,21,"tokenIndex"],[11,31,11,31],[11,34,11,34],[11,35,11,35],[11,37,11,37],[12,6,12,8],[12,10,12,12],[12,14,12,16],[12,15,12,17,"scanner"],[12,22,12,24],[12,23,12,25,"lookupType"],[12,33,12,35],[12,34,12,36],[12,35,12,37],[12,36,12,38],[12,37,12,39],[12,42,12,44,"WhiteSpace"],[12,52,12,54],[12,54,12,56],[13,8,13,12],[13,15,13,19],[13,19,13,23],[13,20,13,24,"scanner"],[13,27,13,31],[13,28,13,32,"tokenIndex"],[13,38,13,42],[13,41,13,45],[13,42,13,46],[13,45,14,18],[13,49,14,22],[13,50,14,23,"scanner"],[13,57,14,30],[13,58,14,31,"getTokenStart"],[13,71,14,44],[13,72,14,45],[13,76,14,49],[13,77,14,50,"scanner"],[13,84,14,57],[13,85,14,58,"tokenIndex"],[13,95,14,68],[13,98,14,71],[13,99,14,72],[13,100,14,73],[13,103,15,18],[13,107,15,22],[13,108,15,23,"scanner"],[13,115,15,30],[13,116,15,31,"firstCharOffset"],[13,131,15,46],[14,6,16,8],[15,4,17,4],[16,4,19,4],[16,11,19,11],[16,15,19,15],[16,16,19,16,"scanner"],[16,23,19,23],[16,24,19,24,"tokenStart"],[16,34,19,34],[17,2,20,0],[19,2,22,0],[20,2,23,0],[20,11,23,9,"balanceEnd"],[20,21,23,19,"balanceEnd"],[20,22,23,19],[20,24,23,22],[21,4,24,4],[21,11,24,11],[21,12,24,12],[22,2,25,0],[24,2,27,0],[25,2,28,0],[25,11,28,9,"leftCurlyBracket"],[25,27,28,25,"leftCurlyBracket"],[25,28,28,26,"tokenType"],[25,37,28,35],[25,39,28,37],[26,4,29,4],[26,11,29,11,"tokenType"],[26,20,29,20],[26,25,29,25,"LeftCurlyBracket"],[26,41,29,41],[26,44,29,44],[26,45,29,45],[26,48,29,48],[26,49,29,49],[27,2,30,0],[29,2,32,0],[30,2,33,0],[30,11,33,9,"leftCurlyBracketOrSemicolon"],[30,38,33,36,"leftCurlyBracketOrSemicolon"],[30,39,33,37,"tokenType"],[30,48,33,46],[30,50,33,48],[31,4,34,4],[31,11,34,11,"tokenType"],[31,20,34,20],[31,25,34,25,"LeftCurlyBracket"],[31,41,34,41],[31,45,34,45,"tokenType"],[31,54,34,54],[31,59,34,59,"Semicolon"],[31,68,34,68],[31,71,34,71],[31,72,34,72],[31,75,34,75],[31,76,34,76],[32,2,35,0],[34,2,37,0],[35,2,38,0],[35,11,38,9,"exclamationMarkOrSemicolon"],[35,37,38,35,"exclamationMarkOrSemicolon"],[35,38,38,36,"tokenType"],[35,47,38,45],[35,49,38,47,"source"],[35,55,38,53],[35,57,38,55,"offset"],[35,63,38,61],[35,65,38,63],[36,4,39,4],[36,8,39,8,"tokenType"],[36,17,39,17],[36,22,39,22,"Delim"],[36,27,39,27],[36,31,39,31,"source"],[36,37,39,37],[36,38,39,38,"charCodeAt"],[36,48,39,48],[36,49,39,49,"offset"],[36,55,39,55],[36,56,39,56],[36,61,39,61,"EXCLAMATIONMARK"],[36,76,39,76],[36,78,39,78],[37,6,40,8],[37,13,40,15],[37,14,40,16],[38,4,41,4],[39,4,43,4],[39,11,43,11,"tokenType"],[39,20,43,20],[39,25,43,25,"Semicolon"],[39,34,43,34],[39,37,43,37],[39,38,43,38],[39,41,43,41],[39,42,43,42],[40,2,44,0],[42,2,46,0],[43,2,47,0],[43,11,47,9,"semicolonIncluded"],[43,28,47,26,"semicolonIncluded"],[43,29,47,27,"tokenType"],[43,38,47,36],[43,40,47,38],[44,4,48,4],[44,11,48,11,"tokenType"],[44,20,48,20],[44,25,48,25,"Semicolon"],[44,34,48,34],[44,37,48,37],[44,38,48,38],[44,41,48,41],[44,42,48,42],[45,2,49,0],[46,2,51,0,"module"],[46,8,51,6],[46,9,51,7,"exports"],[46,16,51,14],[46,19,51,17],[47,4,52,4,"name"],[47,8,52,8],[47,10,52,10],[47,15,52,15],[48,4,53,4,"structure"],[48,13,53,13],[48,15,53,15],[49,6,54,8,"value"],[49,11,54,13],[49,13,54,15,"String"],[50,4,55,4],[50,5,55,5],[51,4,56,4,"parse"],[51,9,56,9],[51,11,56,11],[51,20,56,11,"parse"],[51,26,56,20,"startToken"],[51,36,56,30],[51,38,56,32,"mode"],[51,42,56,36],[51,44,56,38,"excludeWhiteSpace"],[51,61,56,55],[51,63,56,57],[52,6,57,8],[52,10,57,12,"startOffset"],[52,21,57,23],[52,24,57,26],[52,28,57,30],[52,29,57,31,"scanner"],[52,36,57,38],[52,37,57,39,"getTokenStart"],[52,50,57,52],[52,51,57,53,"startToken"],[52,61,57,63],[52,62,57,64],[53,6,58,8],[53,10,58,12,"endOffset"],[53,19,58,21],[54,6,60,8],[54,10,60,12],[54,11,60,13,"scanner"],[54,18,60,20],[54,19,60,21,"skip"],[54,23,60,25],[54,24,61,12],[54,28,61,16],[54,29,61,17,"scanner"],[54,36,61,24],[54,37,61,25,"getRawLength"],[54,49,61,37],[54,50,61,38,"startToken"],[54,60,61,48],[54,62,61,50,"mode"],[54,66,61,54],[54,70,61,58,"balanceEnd"],[54,80,61,68],[54,81,62,8],[54,82,62,9],[55,6,64,8],[55,10,64,12,"excludeWhiteSpace"],[55,27,64,29],[55,31,64,33],[55,35,64,37],[55,36,64,38,"scanner"],[55,43,64,45],[55,44,64,46,"tokenStart"],[55,54,64,56],[55,57,64,59,"startOffset"],[55,68,64,70],[55,70,64,72],[56,8,65,12,"endOffset"],[56,17,65,21],[56,20,65,24,"getOffsetExcludeWS"],[56,38,65,42],[56,39,65,43,"call"],[56,43,65,47],[56,44,65,48],[56,48,65,52],[56,49,65,53],[57,6,66,8],[57,7,66,9],[57,13,66,15],[58,8,67,12,"endOffset"],[58,17,67,21],[58,20,67,24],[58,24,67,28],[58,25,67,29,"scanner"],[58,32,67,36],[58,33,67,37,"tokenStart"],[58,43,67,47],[59,6,68,8],[60,6,70,8],[60,13,70,15],[61,8,71,12,"type"],[61,12,71,16],[61,14,71,18],[61,19,71,23],[62,8,72,12,"loc"],[62,11,72,15],[62,13,72,17],[62,17,72,21],[62,18,72,22,"getLocation"],[62,29,72,33],[62,30,72,34,"startOffset"],[62,41,72,45],[62,43,72,47,"endOffset"],[62,52,72,56],[62,53,72,57],[63,8,73,12,"value"],[63,13,73,17],[63,15,73,19],[63,19,73,23],[63,20,73,24,"scanner"],[63,27,73,31],[63,28,73,32,"source"],[63,34,73,38],[63,35,73,39,"substring"],[63,44,73,48],[63,45,73,49,"startOffset"],[63,56,73,60],[63,58,73,62,"endOffset"],[63,67,73,71],[64,6,74,8],[64,7,74,9],[65,4,75,4],[65,5,75,5],[66,4,76,4,"generate"],[66,12,76,12],[66,14,76,14],[66,23,76,14,"generate"],[66,32,76,23,"node"],[66,36,76,27],[66,38,76,29],[67,6,77,8],[67,10,77,12],[67,11,77,13,"chunk"],[67,16,77,18],[67,17,77,19,"node"],[67,21,77,23],[67,22,77,24,"value"],[67,27,77,29],[67,28,77,30],[68,4,78,4],[68,5,78,5],[69,4,80,4,"mode"],[69,8,80,8],[69,10,80,10],[70,6,81,8,"default"],[70,13,81,15],[70,15,81,17,"balanceEnd"],[70,25,81,27],[71,6,82,8,"leftCurlyBracket"],[71,22,82,24],[71,24,82,26,"leftCurlyBracket"],[71,40,82,42],[72,6,83,8,"leftCurlyBracketOrSemicolon"],[72,33,83,35],[72,35,83,37,"leftCurlyBracketOrSemicolon"],[72,62,83,64],[73,6,84,8,"exclamationMarkOrSemicolon"],[73,32,84,34],[73,34,84,36,"exclamationMarkOrSemicolon"],[73,60,84,62],[74,6,85,8,"semicolonIncluded"],[74,23,85,25],[74,25,85,27,"semicolonIncluded"],[75,4,86,4],[76,2,87,0],[76,3,87,1],[77,0,87,2]],"functionMap":{"names":["<global>","getOffsetExcludeWS","balanceEnd","leftCurlyBracket","leftCurlyBracketOrSemicolon","exclamationMarkOrSemicolon","semicolonIncluded","module.exports.parse","module.exports.generate"],"mappings":"AAA;ACS;CDU;AEG;CFE;AGG;CHE;AIG;CJE;AKG;CLM;AMG;CNE;WOO;KPmB;cQC;KRE"}},"type":"js/module"}]}