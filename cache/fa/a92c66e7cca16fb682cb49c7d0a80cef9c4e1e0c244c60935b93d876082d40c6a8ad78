{"dependencies":[{"name":"../common/List","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}}],"key":"s8REEucKQH/rRdxXA/HW1Z+K46E="}},{"name":"../common/SyntaxError","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":18,"index":56},"end":{"line":2,"column":50,"index":88}}],"key":"ryf3pqhqmrfcskKMPBduP7uiLlI="}},{"name":"../common/TokenStream","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":18,"index":108},"end":{"line":3,"column":50,"index":140}}],"key":"ENdWRVnyjrd3VEfJJi1X+aaQbZI="}},{"name":"../lexer/Lexer","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":12,"index":154},"end":{"line":4,"column":37,"index":179}}],"key":"5P6daDeBjd00/PdZOY3szW7dM00="}},{"name":"../definition-syntax","data":{"asyncType":null,"locs":[{"start":{"line":5,"column":23,"index":204},"end":{"line":5,"column":54,"index":235}}],"key":"qJ/nb6BLtX/oVd9vD3rsePtU+lQ="}},{"name":"../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":15,"index":252},"end":{"line":6,"column":38,"index":275}}],"key":"jdHcfLp+ZWoVoG/X76x8Q2Emsc0="}},{"name":"../parser/create","data":{"asyncType":null,"locs":[{"start":{"line":7,"column":19,"index":296},"end":{"line":7,"column":46,"index":323}}],"key":"LDHRcY5PF22+zHwQ6L4soqvG4RU="}},{"name":"../generator/create","data":{"asyncType":null,"locs":[{"start":{"line":8,"column":22,"index":347},"end":{"line":8,"column":52,"index":377}}],"key":"bQNlac48p/V2gV+HBpeTsE8cMJE="}},{"name":"../convertor/create","data":{"asyncType":null,"locs":[{"start":{"line":9,"column":22,"index":401},"end":{"line":9,"column":52,"index":431}}],"key":"qpNgoITBFA9MpC1DL/LaV5hNV/8="}},{"name":"../walker/create","data":{"asyncType":null,"locs":[{"start":{"line":10,"column":19,"index":452},"end":{"line":10,"column":46,"index":479}}],"key":"FAps8G0nJLi+Fp/EgUFxQvlCd/0="}},{"name":"../utils/clone","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":12,"index":493},"end":{"line":11,"column":37,"index":518}}],"key":"TjwBUcNxWkT0+2eMDgy1xS2DqbQ="}},{"name":"../utils/names","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":12,"index":532},"end":{"line":12,"column":37,"index":557}}],"key":"oneuHndJHh8CfKiMCm3A44zGG4Y="}},{"name":"./config/mix","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":10,"index":569},"end":{"line":13,"column":33,"index":592}}],"key":"WaeR8q1x0GD3ySuunVvCQvpKVWE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var List = _$$_REQUIRE(_dependencyMap[0], \"../common/List\");\n  var SyntaxError = _$$_REQUIRE(_dependencyMap[1], \"../common/SyntaxError\");\n  var TokenStream = _$$_REQUIRE(_dependencyMap[2], \"../common/TokenStream\");\n  var Lexer = _$$_REQUIRE(_dependencyMap[3], \"../lexer/Lexer\");\n  var definitionSyntax = _$$_REQUIRE(_dependencyMap[4], \"../definition-syntax\");\n  var tokenize = _$$_REQUIRE(_dependencyMap[5], \"../tokenizer\");\n  var createParser = _$$_REQUIRE(_dependencyMap[6], \"../parser/create\");\n  var createGenerator = _$$_REQUIRE(_dependencyMap[7], \"../generator/create\");\n  var createConvertor = _$$_REQUIRE(_dependencyMap[8], \"../convertor/create\");\n  var createWalker = _$$_REQUIRE(_dependencyMap[9], \"../walker/create\");\n  var clone = _$$_REQUIRE(_dependencyMap[10], \"../utils/clone\");\n  var names = _$$_REQUIRE(_dependencyMap[11], \"../utils/names\");\n  var mix = _$$_REQUIRE(_dependencyMap[12], \"./config/mix\");\n  function _createSyntax(config) {\n    var parse = createParser(config);\n    var walk = createWalker(config);\n    var generate = createGenerator(config);\n    var convert = createConvertor(walk);\n    var syntax = {\n      List: List,\n      SyntaxError: SyntaxError,\n      TokenStream: TokenStream,\n      Lexer: Lexer,\n      vendorPrefix: names.vendorPrefix,\n      keyword: names.keyword,\n      property: names.property,\n      isCustomProperty: names.isCustomProperty,\n      definitionSyntax: definitionSyntax,\n      lexer: null,\n      createLexer: function createLexer(config) {\n        return new Lexer(config, syntax, syntax.lexer.structure);\n      },\n      tokenize: tokenize,\n      parse: parse,\n      walk: walk,\n      generate: generate,\n      find: walk.find,\n      findLast: walk.findLast,\n      findAll: walk.findAll,\n      clone: clone,\n      fromPlainObject: convert.fromPlainObject,\n      toPlainObject: convert.toPlainObject,\n      createSyntax: function createSyntax(config) {\n        return _createSyntax(mix({}, config));\n      },\n      fork: function fork(extension) {\n        var base = mix({}, config); // copy of config\n        return _createSyntax(typeof extension === 'function' ? extension(base, Object.assign) : mix(base, extension));\n      }\n    };\n    syntax.lexer = new Lexer({\n      generic: true,\n      types: config.types,\n      atrules: config.atrules,\n      properties: config.properties,\n      node: config.node\n    }, syntax);\n    return syntax;\n  }\n  ;\n  exports.create = function (config) {\n    return _createSyntax(mix({}, config));\n  };\n});","lineCount":65,"map":[[2,2,1,0],[2,6,1,4,"List"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,25,1,18,"_dependencyMap"],[2,39,1,18],[2,60,1,35],[2,61,1,36],[3,2,2,0],[3,6,2,4,"SyntaxError"],[3,17,2,15],[3,20,2,18,"require"],[3,31,2,25],[3,32,2,25,"_dependencyMap"],[3,46,2,25],[3,74,2,49],[3,75,2,50],[4,2,3,0],[4,6,3,4,"TokenStream"],[4,17,3,15],[4,20,3,18,"require"],[4,31,3,25],[4,32,3,25,"_dependencyMap"],[4,46,3,25],[4,74,3,49],[4,75,3,50],[5,2,4,0],[5,6,4,4,"Lexer"],[5,11,4,9],[5,14,4,12,"require"],[5,25,4,19],[5,26,4,19,"_dependencyMap"],[5,40,4,19],[5,61,4,36],[5,62,4,37],[6,2,5,0],[6,6,5,4,"definitionSyntax"],[6,22,5,20],[6,25,5,23,"require"],[6,36,5,30],[6,37,5,30,"_dependencyMap"],[6,51,5,30],[6,78,5,53],[6,79,5,54],[7,2,6,0],[7,6,6,4,"tokenize"],[7,14,6,12],[7,17,6,15,"require"],[7,28,6,22],[7,29,6,22,"_dependencyMap"],[7,43,6,22],[7,62,6,37],[7,63,6,38],[8,2,7,0],[8,6,7,4,"createParser"],[8,18,7,16],[8,21,7,19,"require"],[8,32,7,26],[8,33,7,26,"_dependencyMap"],[8,47,7,26],[8,70,7,45],[8,71,7,46],[9,2,8,0],[9,6,8,4,"createGenerator"],[9,21,8,19],[9,24,8,22,"require"],[9,35,8,29],[9,36,8,29,"_dependencyMap"],[9,50,8,29],[9,76,8,51],[9,77,8,52],[10,2,9,0],[10,6,9,4,"createConvertor"],[10,21,9,19],[10,24,9,22,"require"],[10,35,9,29],[10,36,9,29,"_dependencyMap"],[10,50,9,29],[10,76,9,51],[10,77,9,52],[11,2,10,0],[11,6,10,4,"createWalker"],[11,18,10,16],[11,21,10,19,"require"],[11,32,10,26],[11,33,10,26,"_dependencyMap"],[11,47,10,26],[11,70,10,45],[11,71,10,46],[12,2,11,0],[12,6,11,4,"clone"],[12,11,11,9],[12,14,11,12,"require"],[12,25,11,19],[12,26,11,19,"_dependencyMap"],[12,40,11,19],[12,62,11,36],[12,63,11,37],[13,2,12,0],[13,6,12,4,"names"],[13,11,12,9],[13,14,12,12,"require"],[13,25,12,19],[13,26,12,19,"_dependencyMap"],[13,40,12,19],[13,62,12,36],[13,63,12,37],[14,2,13,0],[14,6,13,4,"mix"],[14,9,13,7],[14,12,13,10,"require"],[14,23,13,17],[14,24,13,17,"_dependencyMap"],[14,38,13,17],[14,58,13,32],[14,59,13,33],[15,2,15,0],[15,11,15,9,"createSyntax"],[15,24,15,21,"createSyntax"],[15,25,15,22,"config"],[15,31,15,28],[15,33,15,30],[16,4,16,4],[16,8,16,8,"parse"],[16,13,16,13],[16,16,16,16,"createParser"],[16,28,16,28],[16,29,16,29,"config"],[16,35,16,35],[16,36,16,36],[17,4,17,4],[17,8,17,8,"walk"],[17,12,17,12],[17,15,17,15,"createWalker"],[17,27,17,27],[17,28,17,28,"config"],[17,34,17,34],[17,35,17,35],[18,4,18,4],[18,8,18,8,"generate"],[18,16,18,16],[18,19,18,19,"createGenerator"],[18,34,18,34],[18,35,18,35,"config"],[18,41,18,41],[18,42,18,42],[19,4,19,4],[19,8,19,8,"convert"],[19,15,19,15],[19,18,19,18,"createConvertor"],[19,33,19,33],[19,34,19,34,"walk"],[19,38,19,38],[19,39,19,39],[20,4,21,4],[20,8,21,8,"syntax"],[20,14,21,14],[20,17,21,17],[21,6,22,8,"List"],[21,10,22,12],[21,12,22,14,"List"],[21,16,22,18],[22,6,23,8,"SyntaxError"],[22,17,23,19],[22,19,23,21,"SyntaxError"],[22,30,23,32],[23,6,24,8,"TokenStream"],[23,17,24,19],[23,19,24,21,"TokenStream"],[23,30,24,32],[24,6,25,8,"Lexer"],[24,11,25,13],[24,13,25,15,"Lexer"],[24,18,25,20],[25,6,27,8,"vendorPrefix"],[25,18,27,20],[25,20,27,22,"names"],[25,25,27,27],[25,26,27,28,"vendorPrefix"],[25,38,27,40],[26,6,28,8,"keyword"],[26,13,28,15],[26,15,28,17,"names"],[26,20,28,22],[26,21,28,23,"keyword"],[26,28,28,30],[27,6,29,8,"property"],[27,14,29,16],[27,16,29,18,"names"],[27,21,29,23],[27,22,29,24,"property"],[27,30,29,32],[28,6,30,8,"isCustomProperty"],[28,22,30,24],[28,24,30,26,"names"],[28,29,30,31],[28,30,30,32,"isCustomProperty"],[28,46,30,48],[29,6,32,8,"definitionSyntax"],[29,22,32,24],[29,24,32,26,"definitionSyntax"],[29,40,32,42],[30,6,33,8,"lexer"],[30,11,33,13],[30,13,33,15],[30,17,33,19],[31,6,34,8,"createLexer"],[31,17,34,19],[31,19,34,21],[31,28,34,21,"createLexer"],[31,40,34,30,"config"],[31,46,34,36],[31,48,34,38],[32,8,35,12],[32,15,35,19],[32,19,35,23,"Lexer"],[32,24,35,28],[32,25,35,29,"config"],[32,31,35,35],[32,33,35,37,"syntax"],[32,39,35,43],[32,41,35,45,"syntax"],[32,47,35,51],[32,48,35,52,"lexer"],[32,53,35,57],[32,54,35,58,"structure"],[32,63,35,67],[32,64,35,68],[33,6,36,8],[33,7,36,9],[34,6,38,8,"tokenize"],[34,14,38,16],[34,16,38,18,"tokenize"],[34,24,38,26],[35,6,39,8,"parse"],[35,11,39,13],[35,13,39,15,"parse"],[35,18,39,20],[36,6,40,8,"walk"],[36,10,40,12],[36,12,40,14,"walk"],[36,16,40,18],[37,6,41,8,"generate"],[37,14,41,16],[37,16,41,18,"generate"],[37,24,41,26],[38,6,43,8,"find"],[38,10,43,12],[38,12,43,14,"walk"],[38,16,43,18],[38,17,43,19,"find"],[38,21,43,23],[39,6,44,8,"findLast"],[39,14,44,16],[39,16,44,18,"walk"],[39,20,44,22],[39,21,44,23,"findLast"],[39,29,44,31],[40,6,45,8,"findAll"],[40,13,45,15],[40,15,45,17,"walk"],[40,19,45,21],[40,20,45,22,"findAll"],[40,27,45,29],[41,6,47,8,"clone"],[41,11,47,13],[41,13,47,15,"clone"],[41,18,47,20],[42,6,48,8,"fromPlainObject"],[42,21,48,23],[42,23,48,25,"convert"],[42,30,48,32],[42,31,48,33,"fromPlainObject"],[42,46,48,48],[43,6,49,8,"toPlainObject"],[43,19,49,21],[43,21,49,23,"convert"],[43,28,49,30],[43,29,49,31,"toPlainObject"],[43,42,49,44],[44,6,51,8,"createSyntax"],[44,18,51,20],[44,20,51,22],[44,29,51,22,"createSyntax"],[44,42,51,31,"config"],[44,48,51,37],[44,50,51,39],[45,8,52,12],[45,15,52,19,"createSyntax"],[45,28,52,31],[45,29,52,32,"mix"],[45,32,52,35],[45,33,52,36],[45,34,52,37],[45,35,52,38],[45,37,52,40,"config"],[45,43,52,46],[45,44,52,47],[45,45,52,48],[46,6,53,8],[46,7,53,9],[47,6,54,8,"fork"],[47,10,54,12],[47,12,54,14],[47,21,54,14,"fork"],[47,26,54,23,"extension"],[47,35,54,32],[47,37,54,34],[48,8,55,12],[48,12,55,16,"base"],[48,16,55,20],[48,19,55,23,"mix"],[48,22,55,26],[48,23,55,27],[48,24,55,28],[48,25,55,29],[48,27,55,31,"config"],[48,33,55,37],[48,34,55,38],[48,35,55,39],[48,36,55,40],[49,8,56,12],[49,15,56,19,"createSyntax"],[49,28,56,31],[49,29,57,16],[49,36,57,23,"extension"],[49,45,57,32],[49,50,57,37],[49,60,57,47],[49,63,58,22,"extension"],[49,72,58,31],[49,73,58,32,"base"],[49,77,58,36],[49,79,58,38,"Object"],[49,85,58,44],[49,86,58,45,"assign"],[49,92,58,51],[49,93,58,52],[49,96,59,22,"mix"],[49,99,59,25],[49,100,59,26,"base"],[49,104,59,30],[49,106,59,32,"extension"],[49,115,59,41],[49,116,60,12],[49,117,60,13],[50,6,61,8],[51,4,62,4],[51,5,62,5],[52,4,64,4,"syntax"],[52,10,64,10],[52,11,64,11,"lexer"],[52,16,64,16],[52,19,64,19],[52,23,64,23,"Lexer"],[52,28,64,28],[52,29,64,29],[53,6,65,8,"generic"],[53,13,65,15],[53,15,65,17],[53,19,65,21],[54,6,66,8,"types"],[54,11,66,13],[54,13,66,15,"config"],[54,19,66,21],[54,20,66,22,"types"],[54,25,66,27],[55,6,67,8,"atrules"],[55,13,67,15],[55,15,67,17,"config"],[55,21,67,23],[55,22,67,24,"atrules"],[55,29,67,31],[56,6,68,8,"properties"],[56,16,68,18],[56,18,68,20,"config"],[56,24,68,26],[56,25,68,27,"properties"],[56,35,68,37],[57,6,69,8,"node"],[57,10,69,12],[57,12,69,14,"config"],[57,18,69,20],[57,19,69,21,"node"],[58,4,70,4],[58,5,70,5],[58,7,70,7,"syntax"],[58,13,70,13],[58,14,70,14],[59,4,72,4],[59,11,72,11,"syntax"],[59,17,72,17],[60,2,73,0],[61,2,73,1],[62,2,75,0,"exports"],[62,9,75,7],[62,10,75,8,"create"],[62,16,75,14],[62,19,75,17],[62,29,75,26,"config"],[62,35,75,32],[62,37,75,34],[63,4,76,4],[63,11,76,11,"createSyntax"],[63,24,76,23],[63,25,76,24,"mix"],[63,28,76,27],[63,29,76,28],[63,30,76,29],[63,31,76,30],[63,33,76,32,"config"],[63,39,76,38],[63,40,76,39],[63,41,76,40],[64,2,77,0],[64,3,77,1],[65,0,77,2]],"functionMap":{"names":["<global>","createSyntax","syntax.createLexer","syntax.createSyntax","syntax.fork","exports.create"],"mappings":"AAA;ACc;qBCmB;SDE;sBEe;SFE;cGC;SHO;CDY;iBKE;CLE"}},"type":"js/module"}]}