{"dependencies":[{"name":"../common/List","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}}],"key":"s8REEucKQH/rRdxXA/HW1Z+K46E="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var List = _$$_REQUIRE(_dependencyMap[0], \"../common/List\");\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  function isValidNumber(value) {\n    // Number.isInteger(value) && value >= 0\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value && value >= 0;\n  }\n  function isValidLocation(loc) {\n    return Boolean(loc) && isValidNumber(loc.offset) && isValidNumber(loc.line) && isValidNumber(loc.column);\n  }\n  function createNodeStructureChecker(type, fields) {\n    return function checkNode(node, warn) {\n      if (!node || node.constructor !== Object) {\n        return warn(node, 'Type of node should be an Object');\n      }\n      for (var key in node) {\n        var valid = true;\n        if (hasOwnProperty.call(node, key) === false) {\n          continue;\n        }\n        if (key === 'type') {\n          if (node.type !== type) {\n            warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');\n          }\n        } else if (key === 'loc') {\n          if (node.loc === null) {\n            continue;\n          } else if (node.loc && node.loc.constructor === Object) {\n            if (typeof node.loc.source !== 'string') {\n              key += '.source';\n            } else if (!isValidLocation(node.loc.start)) {\n              key += '.start';\n            } else if (!isValidLocation(node.loc.end)) {\n              key += '.end';\n            } else {\n              continue;\n            }\n          }\n          valid = false;\n        } else if (fields.hasOwnProperty(key)) {\n          for (var i = 0, valid = false; !valid && i < fields[key].length; i++) {\n            var fieldType = fields[key][i];\n            switch (fieldType) {\n              case String:\n                valid = typeof node[key] === 'string';\n                break;\n              case Boolean:\n                valid = typeof node[key] === 'boolean';\n                break;\n              case null:\n                valid = node[key] === null;\n                break;\n              default:\n                if (typeof fieldType === 'string') {\n                  valid = node[key] && node[key].type === fieldType;\n                } else if (Array.isArray(fieldType)) {\n                  valid = node[key] instanceof List;\n                }\n            }\n          }\n        } else {\n          warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');\n        }\n        if (!valid) {\n          warn(node, 'Bad value for `' + type + '.' + key + '`');\n        }\n      }\n      for (var key in fields) {\n        if (hasOwnProperty.call(fields, key) && hasOwnProperty.call(node, key) === false) {\n          warn(node, 'Field `' + type + '.' + key + '` is missed');\n        }\n      }\n    };\n  }\n  function processStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var fields = {\n      type: String,\n      loc: true\n    };\n    var docs = {\n      type: '\"' + name + '\"'\n    };\n    for (var key in structure) {\n      if (hasOwnProperty.call(structure, key) === false) {\n        continue;\n      }\n      var docsTypes = [];\n      var fieldTypes = fields[key] = Array.isArray(structure[key]) ? structure[key].slice() : [structure[key]];\n      for (var i = 0; i < fieldTypes.length; i++) {\n        var fieldType = fieldTypes[i];\n        if (fieldType === String || fieldType === Boolean) {\n          docsTypes.push(fieldType.name);\n        } else if (fieldType === null) {\n          docsTypes.push('null');\n        } else if (typeof fieldType === 'string') {\n          docsTypes.push('<' + fieldType + '>');\n        } else if (Array.isArray(fieldType)) {\n          docsTypes.push('List'); // TODO: use type enum\n        } else {\n          throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');\n        }\n      }\n      docs[key] = docsTypes.join(' | ');\n    }\n    return {\n      docs: docs,\n      check: createNodeStructureChecker(name, fields)\n    };\n  }\n  module.exports = {\n    getStructureFromConfig: function getStructureFromConfig(config) {\n      var structure = {};\n      if (config.node) {\n        for (var name in config.node) {\n          if (hasOwnProperty.call(config.node, name)) {\n            var nodeType = config.node[name];\n            if (nodeType.structure) {\n              structure[name] = processStructure(name, nodeType);\n            } else {\n              throw new Error('Missed `structure` field in `' + name + '` node type definition');\n            }\n          }\n        }\n      }\n      return structure;\n    }\n  };\n});","lineCount":129,"map":[[2,2,1,0],[2,6,1,4,"List"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,25,1,18,"_dependencyMap"],[2,39,1,18],[2,60,1,35],[2,61,1,36],[3,2,2,0],[3,6,2,4,"hasOwnProperty"],[3,20,2,18],[3,23,2,21,"Object"],[3,29,2,27],[3,30,2,28,"prototype"],[3,39,2,37],[3,40,2,38,"hasOwnProperty"],[3,54,2,52],[4,2,4,0],[4,11,4,9,"isValidNumber"],[4,24,4,22,"isValidNumber"],[4,25,4,23,"value"],[4,30,4,28],[4,32,4,30],[5,4,5,4],[6,4,6,4],[6,11,7,8],[6,18,7,15,"value"],[6,23,7,20],[6,28,7,25],[6,36,7,33],[6,40,8,8,"isFinite"],[6,48,8,16],[6,49,8,17,"value"],[6,54,8,22],[6,55,8,23],[6,59,9,8,"Math"],[6,63,9,12],[6,64,9,13,"floor"],[6,69,9,18],[6,70,9,19,"value"],[6,75,9,24],[6,76,9,25],[6,81,9,30,"value"],[6,86,9,35],[6,90,10,8,"value"],[6,95,10,13],[6,99,10,17],[6,100,10,18],[7,2,12,0],[8,2,14,0],[8,11,14,9,"isValidLocation"],[8,26,14,24,"isValidLocation"],[8,27,14,25,"loc"],[8,30,14,28],[8,32,14,30],[9,4,15,4],[9,11,16,8,"Boolean"],[9,18,16,15],[9,19,16,16,"loc"],[9,22,16,19],[9,23,16,20],[9,27,17,8,"isValidNumber"],[9,40,17,21],[9,41,17,22,"loc"],[9,44,17,25],[9,45,17,26,"offset"],[9,51,17,32],[9,52,17,33],[9,56,18,8,"isValidNumber"],[9,69,18,21],[9,70,18,22,"loc"],[9,73,18,25],[9,74,18,26,"line"],[9,78,18,30],[9,79,18,31],[9,83,19,8,"isValidNumber"],[9,96,19,21],[9,97,19,22,"loc"],[9,100,19,25],[9,101,19,26,"column"],[9,107,19,32],[9,108,19,33],[10,2,21,0],[11,2,23,0],[11,11,23,9,"createNodeStructureChecker"],[11,37,23,35,"createNodeStructureChecker"],[11,38,23,36,"type"],[11,42,23,40],[11,44,23,42,"fields"],[11,50,23,48],[11,52,23,50],[12,4,24,4],[12,11,24,11],[12,20,24,20,"checkNode"],[12,29,24,29,"checkNode"],[12,30,24,30,"node"],[12,34,24,34],[12,36,24,36,"warn"],[12,40,24,40],[12,42,24,42],[13,6,25,8],[13,10,25,12],[13,11,25,13,"node"],[13,15,25,17],[13,19,25,21,"node"],[13,23,25,25],[13,24,25,26,"constructor"],[13,35,25,37],[13,40,25,42,"Object"],[13,46,25,48],[13,48,25,50],[14,8,26,12],[14,15,26,19,"warn"],[14,19,26,23],[14,20,26,24,"node"],[14,24,26,28],[14,26,26,30],[14,60,26,64],[14,61,26,65],[15,6,27,8],[16,6,29,8],[16,11,29,13],[16,15,29,17,"key"],[16,18,29,20],[16,22,29,24,"node"],[16,26,29,28],[16,28,29,30],[17,8,30,12],[17,12,30,16,"valid"],[17,17,30,21],[17,20,30,24],[17,24,30,28],[18,8,32,12],[18,12,32,16,"hasOwnProperty"],[18,26,32,30],[18,27,32,31,"call"],[18,31,32,35],[18,32,32,36,"node"],[18,36,32,40],[18,38,32,42,"key"],[18,41,32,45],[18,42,32,46],[18,47,32,51],[18,52,32,56],[18,54,32,58],[19,10,33,16],[20,8,34,12],[21,8,36,12],[21,12,36,16,"key"],[21,15,36,19],[21,20,36,24],[21,26,36,30],[21,28,36,32],[22,10,37,16],[22,14,37,20,"node"],[22,18,37,24],[22,19,37,25,"type"],[22,23,37,29],[22,28,37,34,"type"],[22,32,37,38],[22,34,37,40],[23,12,38,20,"warn"],[23,16,38,24],[23,17,38,25,"node"],[23,21,38,29],[23,23,38,31],[23,42,38,50],[23,45,38,53,"node"],[23,49,38,57],[23,50,38,58,"type"],[23,54,38,62],[23,57,38,65],[23,72,38,80],[23,75,38,83,"type"],[23,79,38,87],[23,82,38,90],[23,85,38,93],[23,86,38,94],[24,10,39,16],[25,8,40,12],[25,9,40,13],[25,15,40,19],[25,19,40,23,"key"],[25,22,40,26],[25,27,40,31],[25,32,40,36],[25,34,40,38],[26,10,41,16],[26,14,41,20,"node"],[26,18,41,24],[26,19,41,25,"loc"],[26,22,41,28],[26,27,41,33],[26,31,41,37],[26,33,41,39],[27,12,42,20],[28,10,43,16],[28,11,43,17],[28,17,43,23],[28,21,43,27,"node"],[28,25,43,31],[28,26,43,32,"loc"],[28,29,43,35],[28,33,43,39,"node"],[28,37,43,43],[28,38,43,44,"loc"],[28,41,43,47],[28,42,43,48,"constructor"],[28,53,43,59],[28,58,43,64,"Object"],[28,64,43,70],[28,66,43,72],[29,12,44,20],[29,16,44,24],[29,23,44,31,"node"],[29,27,44,35],[29,28,44,36,"loc"],[29,31,44,39],[29,32,44,40,"source"],[29,38,44,46],[29,43,44,51],[29,51,44,59],[29,53,44,61],[30,14,45,24,"key"],[30,17,45,27],[30,21,45,31],[30,30,45,40],[31,12,46,20],[31,13,46,21],[31,19,46,27],[31,23,46,31],[31,24,46,32,"isValidLocation"],[31,39,46,47],[31,40,46,48,"node"],[31,44,46,52],[31,45,46,53,"loc"],[31,48,46,56],[31,49,46,57,"start"],[31,54,46,62],[31,55,46,63],[31,57,46,65],[32,14,47,24,"key"],[32,17,47,27],[32,21,47,31],[32,29,47,39],[33,12,48,20],[33,13,48,21],[33,19,48,27],[33,23,48,31],[33,24,48,32,"isValidLocation"],[33,39,48,47],[33,40,48,48,"node"],[33,44,48,52],[33,45,48,53,"loc"],[33,48,48,56],[33,49,48,57,"end"],[33,52,48,60],[33,53,48,61],[33,55,48,63],[34,14,49,24,"key"],[34,17,49,27],[34,21,49,31],[34,27,49,37],[35,12,50,20],[35,13,50,21],[35,19,50,27],[36,14,51,24],[37,12,52,20],[38,10,53,16],[39,10,55,16,"valid"],[39,15,55,21],[39,18,55,24],[39,23,55,29],[40,8,56,12],[40,9,56,13],[40,15,56,19],[40,19,56,23,"fields"],[40,25,56,29],[40,26,56,30,"hasOwnProperty"],[40,40,56,44],[40,41,56,45,"key"],[40,44,56,48],[40,45,56,49],[40,47,56,51],[41,10,57,16],[41,15,57,21],[41,19,57,25,"i"],[41,20,57,26],[41,23,57,29],[41,24,57,30],[41,26,57,32,"valid"],[41,31,57,37],[41,34,57,40],[41,39,57,45],[41,41,57,47],[41,42,57,48,"valid"],[41,47,57,53],[41,51,57,57,"i"],[41,52,57,58],[41,55,57,61,"fields"],[41,61,57,67],[41,62,57,68,"key"],[41,65,57,71],[41,66,57,72],[41,67,57,73,"length"],[41,73,57,79],[41,75,57,81,"i"],[41,76,57,82],[41,78,57,84],[41,80,57,86],[42,12,58,20],[42,16,58,24,"fieldType"],[42,25,58,33],[42,28,58,36,"fields"],[42,34,58,42],[42,35,58,43,"key"],[42,38,58,46],[42,39,58,47],[42,40,58,48,"i"],[42,41,58,49],[42,42,58,50],[43,12,60,20],[43,20,60,28,"fieldType"],[43,29,60,37],[44,14,61,24],[44,19,61,29,"String"],[44,25,61,35],[45,16,62,28,"valid"],[45,21,62,33],[45,24,62,36],[45,31,62,43,"node"],[45,35,62,47],[45,36,62,48,"key"],[45,39,62,51],[45,40,62,52],[45,45,62,57],[45,53,62,65],[46,16,63,28],[47,14,65,24],[47,19,65,29,"Boolean"],[47,26,65,36],[48,16,66,28,"valid"],[48,21,66,33],[48,24,66,36],[48,31,66,43,"node"],[48,35,66,47],[48,36,66,48,"key"],[48,39,66,51],[48,40,66,52],[48,45,66,57],[48,54,66,66],[49,16,67,28],[50,14,69,24],[50,19,69,29],[50,23,69,33],[51,16,70,28,"valid"],[51,21,70,33],[51,24,70,36,"node"],[51,28,70,40],[51,29,70,41,"key"],[51,32,70,44],[51,33,70,45],[51,38,70,50],[51,42,70,54],[52,16,71,28],[53,14,73,24],[54,16,74,28],[54,20,74,32],[54,27,74,39,"fieldType"],[54,36,74,48],[54,41,74,53],[54,49,74,61],[54,51,74,63],[55,18,75,32,"valid"],[55,23,75,37],[55,26,75,40,"node"],[55,30,75,44],[55,31,75,45,"key"],[55,34,75,48],[55,35,75,49],[55,39,75,53,"node"],[55,43,75,57],[55,44,75,58,"key"],[55,47,75,61],[55,48,75,62],[55,49,75,63,"type"],[55,53,75,67],[55,58,75,72,"fieldType"],[55,67,75,81],[56,16,76,28],[56,17,76,29],[56,23,76,35],[56,27,76,39,"Array"],[56,32,76,44],[56,33,76,45,"isArray"],[56,40,76,52],[56,41,76,53,"fieldType"],[56,50,76,62],[56,51,76,63],[56,53,76,65],[57,18,77,32,"valid"],[57,23,77,37],[57,26,77,40,"node"],[57,30,77,44],[57,31,77,45,"key"],[57,34,77,48],[57,35,77,49],[57,47,77,61,"List"],[57,51,77,65],[58,16,78,28],[59,12,79,20],[60,10,80,16],[61,8,81,12],[61,9,81,13],[61,15,81,19],[62,10,82,16,"warn"],[62,14,82,20],[62,15,82,21,"node"],[62,19,82,25],[62,21,82,27],[62,38,82,44],[62,41,82,47,"key"],[62,44,82,50],[62,47,82,53],[62,55,82,61],[62,58,82,64,"type"],[62,62,82,68],[62,65,82,71],[62,77,82,83],[62,78,82,84],[63,8,83,12],[64,8,85,12],[64,12,85,16],[64,13,85,17,"valid"],[64,18,85,22],[64,20,85,24],[65,10,86,16,"warn"],[65,14,86,20],[65,15,86,21,"node"],[65,19,86,25],[65,21,86,27],[65,38,86,44],[65,41,86,47,"type"],[65,45,86,51],[65,48,86,54],[65,51,86,57],[65,54,86,60,"key"],[65,57,86,63],[65,60,86,66],[65,63,86,69],[65,64,86,70],[66,8,87,12],[67,6,88,8],[68,6,90,8],[68,11,90,13],[68,15,90,17,"key"],[68,18,90,20],[68,22,90,24,"fields"],[68,28,90,30],[68,30,90,32],[69,8,91,12],[69,12,91,16,"hasOwnProperty"],[69,26,91,30],[69,27,91,31,"call"],[69,31,91,35],[69,32,91,36,"fields"],[69,38,91,42],[69,40,91,44,"key"],[69,43,91,47],[69,44,91,48],[69,48,92,16,"hasOwnProperty"],[69,62,92,30],[69,63,92,31,"call"],[69,67,92,35],[69,68,92,36,"node"],[69,72,92,40],[69,74,92,42,"key"],[69,77,92,45],[69,78,92,46],[69,83,92,51],[69,88,92,56],[69,90,92,58],[70,10,93,16,"warn"],[70,14,93,20],[70,15,93,21,"node"],[70,19,93,25],[70,21,93,27],[70,30,93,36],[70,33,93,39,"type"],[70,37,93,43],[70,40,93,46],[70,43,93,49],[70,46,93,52,"key"],[70,49,93,55],[70,52,93,58],[70,65,93,71],[70,66,93,72],[71,8,94,12],[72,6,95,8],[73,4,96,4],[73,5,96,5],[74,2,97,0],[75,2,99,0],[75,11,99,9,"processStructure"],[75,27,99,25,"processStructure"],[75,28,99,26,"name"],[75,32,99,30],[75,34,99,32,"nodeType"],[75,42,99,40],[75,44,99,42],[76,4,100,4],[76,8,100,8,"structure"],[76,17,100,17],[76,20,100,20,"nodeType"],[76,28,100,28],[76,29,100,29,"structure"],[76,38,100,38],[77,4,101,4],[77,8,101,8,"fields"],[77,14,101,14],[77,17,101,17],[78,6,102,8,"type"],[78,10,102,12],[78,12,102,14,"String"],[78,18,102,20],[79,6,103,8,"loc"],[79,9,103,11],[79,11,103,13],[80,4,104,4],[80,5,104,5],[81,4,105,4],[81,8,105,8,"docs"],[81,12,105,12],[81,15,105,15],[82,6,106,8,"type"],[82,10,106,12],[82,12,106,14],[82,15,106,17],[82,18,106,20,"name"],[82,22,106,24],[82,25,106,27],[83,4,107,4],[83,5,107,5],[84,4,109,4],[84,9,109,9],[84,13,109,13,"key"],[84,16,109,16],[84,20,109,20,"structure"],[84,29,109,29],[84,31,109,31],[85,6,110,8],[85,10,110,12,"hasOwnProperty"],[85,24,110,26],[85,25,110,27,"call"],[85,29,110,31],[85,30,110,32,"structure"],[85,39,110,41],[85,41,110,43,"key"],[85,44,110,46],[85,45,110,47],[85,50,110,52],[85,55,110,57],[85,57,110,59],[86,8,111,12],[87,6,112,8],[88,6,114,8],[88,10,114,12,"docsTypes"],[88,19,114,21],[88,22,114,24],[88,24,114,26],[89,6,115,8],[89,10,115,12,"fieldTypes"],[89,20,115,22],[89,23,115,25,"fields"],[89,29,115,31],[89,30,115,32,"key"],[89,33,115,35],[89,34,115,36],[89,37,115,39,"Array"],[89,42,115,44],[89,43,115,45,"isArray"],[89,50,115,52],[89,51,115,53,"structure"],[89,60,115,62],[89,61,115,63,"key"],[89,64,115,66],[89,65,115,67],[89,66,115,68],[89,69,116,14,"structure"],[89,78,116,23],[89,79,116,24,"key"],[89,82,116,27],[89,83,116,28],[89,84,116,29,"slice"],[89,89,116,34],[89,90,116,35],[89,91,116,36],[89,94,117,14],[89,95,117,15,"structure"],[89,104,117,24],[89,105,117,25,"key"],[89,108,117,28],[89,109,117,29],[89,110,117,30],[90,6,119,8],[90,11,119,13],[90,15,119,17,"i"],[90,16,119,18],[90,19,119,21],[90,20,119,22],[90,22,119,24,"i"],[90,23,119,25],[90,26,119,28,"fieldTypes"],[90,36,119,38],[90,37,119,39,"length"],[90,43,119,45],[90,45,119,47,"i"],[90,46,119,48],[90,48,119,50],[90,50,119,52],[91,8,120,12],[91,12,120,16,"fieldType"],[91,21,120,25],[91,24,120,28,"fieldTypes"],[91,34,120,38],[91,35,120,39,"i"],[91,36,120,40],[91,37,120,41],[92,8,121,12],[92,12,121,16,"fieldType"],[92,21,121,25],[92,26,121,30,"String"],[92,32,121,36],[92,36,121,40,"fieldType"],[92,45,121,49],[92,50,121,54,"Boolean"],[92,57,121,61],[92,59,121,63],[93,10,122,16,"docsTypes"],[93,19,122,25],[93,20,122,26,"push"],[93,24,122,30],[93,25,122,31,"fieldType"],[93,34,122,40],[93,35,122,41,"name"],[93,39,122,45],[93,40,122,46],[94,8,123,12],[94,9,123,13],[94,15,123,19],[94,19,123,23,"fieldType"],[94,28,123,32],[94,33,123,37],[94,37,123,41],[94,39,123,43],[95,10,124,16,"docsTypes"],[95,19,124,25],[95,20,124,26,"push"],[95,24,124,30],[95,25,124,31],[95,31,124,37],[95,32,124,38],[96,8,125,12],[96,9,125,13],[96,15,125,19],[96,19,125,23],[96,26,125,30,"fieldType"],[96,35,125,39],[96,40,125,44],[96,48,125,52],[96,50,125,54],[97,10,126,16,"docsTypes"],[97,19,126,25],[97,20,126,26,"push"],[97,24,126,30],[97,25,126,31],[97,28,126,34],[97,31,126,37,"fieldType"],[97,40,126,46],[97,43,126,49],[97,46,126,52],[97,47,126,53],[98,8,127,12],[98,9,127,13],[98,15,127,19],[98,19,127,23,"Array"],[98,24,127,28],[98,25,127,29,"isArray"],[98,32,127,36],[98,33,127,37,"fieldType"],[98,42,127,46],[98,43,127,47],[98,45,127,49],[99,10,128,16,"docsTypes"],[99,19,128,25],[99,20,128,26,"push"],[99,24,128,30],[99,25,128,31],[99,31,128,37],[99,32,128,38],[99,33,128,39],[99,34,128,40],[100,8,129,12],[100,9,129,13],[100,15,129,19],[101,10,130,16],[101,16,130,22],[101,20,130,26,"Error"],[101,25,130,31],[101,26,130,32],[101,41,130,47],[101,44,130,50,"fieldType"],[101,53,130,59],[101,56,130,62],[101,64,130,70],[101,67,130,73,"name"],[101,71,130,77],[101,74,130,80],[101,77,130,83],[101,80,130,86,"key"],[101,83,130,89],[101,86,130,92],[101,110,130,116],[101,111,130,117],[102,8,131,12],[103,6,132,8],[104,6,134,8,"docs"],[104,10,134,12],[104,11,134,13,"key"],[104,14,134,16],[104,15,134,17],[104,18,134,20,"docsTypes"],[104,27,134,29],[104,28,134,30,"join"],[104,32,134,34],[104,33,134,35],[104,38,134,40],[104,39,134,41],[105,4,135,4],[106,4,137,4],[106,11,137,11],[107,6,138,8,"docs"],[107,10,138,12],[107,12,138,14,"docs"],[107,16,138,18],[108,6,139,8,"check"],[108,11,139,13],[108,13,139,15,"createNodeStructureChecker"],[108,39,139,41],[108,40,139,42,"name"],[108,44,139,46],[108,46,139,48,"fields"],[108,52,139,54],[109,4,140,4],[109,5,140,5],[110,2,141,0],[111,2,143,0,"module"],[111,8,143,6],[111,9,143,7,"exports"],[111,16,143,14],[111,19,143,17],[112,4,144,4,"getStructureFromConfig"],[112,26,144,26],[112,28,144,28],[112,37,144,28,"getStructureFromConfig"],[112,60,144,37,"config"],[112,66,144,43],[112,68,144,45],[113,6,145,8],[113,10,145,12,"structure"],[113,19,145,21],[113,22,145,24],[113,23,145,25],[113,24,145,26],[114,6,147,8],[114,10,147,12,"config"],[114,16,147,18],[114,17,147,19,"node"],[114,21,147,23],[114,23,147,25],[115,8,148,12],[115,13,148,17],[115,17,148,21,"name"],[115,21,148,25],[115,25,148,29,"config"],[115,31,148,35],[115,32,148,36,"node"],[115,36,148,40],[115,38,148,42],[116,10,149,16],[116,14,149,20,"hasOwnProperty"],[116,28,149,34],[116,29,149,35,"call"],[116,33,149,39],[116,34,149,40,"config"],[116,40,149,46],[116,41,149,47,"node"],[116,45,149,51],[116,47,149,53,"name"],[116,51,149,57],[116,52,149,58],[116,54,149,60],[117,12,150,20],[117,16,150,24,"nodeType"],[117,24,150,32],[117,27,150,35,"config"],[117,33,150,41],[117,34,150,42,"node"],[117,38,150,46],[117,39,150,47,"name"],[117,43,150,51],[117,44,150,52],[118,12,152,20],[118,16,152,24,"nodeType"],[118,24,152,32],[118,25,152,33,"structure"],[118,34,152,42],[118,36,152,44],[119,14,153,24,"structure"],[119,23,153,33],[119,24,153,34,"name"],[119,28,153,38],[119,29,153,39],[119,32,153,42,"processStructure"],[119,48,153,58],[119,49,153,59,"name"],[119,53,153,63],[119,55,153,65,"nodeType"],[119,63,153,73],[119,64,153,74],[120,12,154,20],[120,13,154,21],[120,19,154,27],[121,14,155,24],[121,20,155,30],[121,24,155,34,"Error"],[121,29,155,39],[121,30,155,40],[121,61,155,71],[121,64,155,74,"name"],[121,68,155,78],[121,71,155,81],[121,95,155,105],[121,96,155,106],[122,12,156,20],[123,10,157,16],[124,8,158,12],[125,6,159,8],[126,6,161,8],[126,13,161,15,"structure"],[126,22,161,24],[127,4,162,4],[128,2,163,0],[128,3,163,1],[129,0,163,2]],"functionMap":{"names":["<global>","isValidNumber","isValidLocation","createNodeStructureChecker","checkNode","processStructure","module.exports.getStructureFromConfig"],"mappings":"AAA;ACG;CDQ;AEE;CFO;AGE;WCC;KDwE;CHC;AKE;CL0C;4BMG;KNkB"}},"type":"js/module"}]}