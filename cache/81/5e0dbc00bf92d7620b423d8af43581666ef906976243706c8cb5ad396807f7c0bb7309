{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"RY2z4+Bdq4bpTD/1b+1jGPWZdgA="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":34,"index":256}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CellRenderMask = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/defineProperty\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/slicedToArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/createClass\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"invariant\"));\n  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * Copyright (c) Meta Platforms, Inc. and affiliates.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * \n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * @format\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         */\n  var CellRenderMask = exports.CellRenderMask = /*#__PURE__*/function () {\n    function CellRenderMask(numCells) {\n      (0, _classCallCheck2.default)(this, CellRenderMask);\n      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    (0, _createClass2.default)(CellRenderMask, [{\n      key: \"enumerateRegions\",\n      value: function enumerateRegions() {\n        return this._regions;\n      }\n    }, {\n      key: \"addCells\",\n      value: function addCells(cells) {\n        var _this$_regions;\n        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n        // VirtualizedList uses inclusive ranges, where zero-count states are\n        // possible. E.g. [0, -1] for no cells, starting at 0.\n        if (cells.last < cells.first) {\n          return;\n        }\n        var _this$_findRegion = this._findRegion(cells.first),\n          _this$_findRegion2 = (0, _slicedToArray2.default)(_this$_findRegion, 2),\n          firstIntersect = _this$_findRegion2[0],\n          firstIntersectIdx = _this$_findRegion2[1];\n        var _this$_findRegion3 = this._findRegion(cells.last),\n          _this$_findRegion4 = (0, _slicedToArray2.default)(_this$_findRegion3, 2),\n          lastIntersect = _this$_findRegion4[0],\n          lastIntersectIdx = _this$_findRegion4[1];\n\n        // Fast-path if the cells to add are already all present in the mask. We\n        // will otherwise need to do some mutation.\n        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n          return;\n        }\n\n        // We need to replace the existing covered regions with 1-3 new regions\n        // depending whether we need to split spacers out of overlapping regions.\n        var newLeadRegion = [];\n        var newTailRegion = [];\n        var newMainRegion = _objectSpread(_objectSpread({}, cells), {}, {\n          isSpacer: false\n        });\n        if (firstIntersect.first < newMainRegion.first) {\n          if (firstIntersect.isSpacer) {\n            newLeadRegion.push({\n              first: firstIntersect.first,\n              last: newMainRegion.first - 1,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.first = firstIntersect.first;\n          }\n        }\n        if (lastIntersect.last > newMainRegion.last) {\n          if (lastIntersect.isSpacer) {\n            newTailRegion.push({\n              first: newMainRegion.last + 1,\n              last: lastIntersect.last,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.last = lastIntersect.last;\n          }\n        }\n        var replacementRegions = [].concat(newLeadRegion, [newMainRegion], newTailRegion);\n        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n        (_this$_regions = this._regions).splice.apply(_this$_regions, [firstIntersectIdx, numRegionsToDelete].concat((0, _toConsumableArray2.default)(replacementRegions)));\n      }\n    }, {\n      key: \"numCells\",\n      value: function numCells() {\n        return this._numCells;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every(function (region, i) {\n          return region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer;\n        });\n      }\n    }, {\n      key: \"_findRegion\",\n      value: function _findRegion(cellIdx) {\n        var firstIdx = 0;\n        var lastIdx = this._regions.length - 1;\n        while (firstIdx <= lastIdx) {\n          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n          var middleRegion = this._regions[middleIdx];\n          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n            return [middleRegion, middleIdx];\n          } else if (cellIdx < middleRegion.first) {\n            lastIdx = middleIdx - 1;\n          } else if (cellIdx > middleRegion.last) {\n            firstIdx = middleIdx + 1;\n          }\n        }\n        (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);\n      }\n    }]);\n    return CellRenderMask;\n  }();\n});","lineCount":135,"map":[[12,2,11,0],[12,6,11,0,"_invariant"],[12,16,11,0],[12,19,11,0,"_interopRequireDefault"],[12,41,11,0],[12,42,11,0,"_$$_REQUIRE"],[12,53,11,0],[12,54,11,0,"_dependencyMap"],[12,68,11,0],[13,2,11,34],[13,11,11,34,"ownKeys"],[13,19,11,34,"e"],[13,20,11,34],[13,22,11,34,"r"],[13,23,11,34],[13,31,11,34,"t"],[13,32,11,34],[13,35,11,34,"Object"],[13,41,11,34],[13,42,11,34,"keys"],[13,46,11,34],[13,47,11,34,"e"],[13,48,11,34],[13,55,11,34,"Object"],[13,61,11,34],[13,62,11,34,"getOwnPropertySymbols"],[13,83,11,34],[13,91,11,34,"o"],[13,92,11,34],[13,95,11,34,"Object"],[13,101,11,34],[13,102,11,34,"getOwnPropertySymbols"],[13,123,11,34],[13,124,11,34,"e"],[13,125,11,34],[13,128,11,34,"r"],[13,129,11,34],[13,134,11,34,"o"],[13,135,11,34],[13,138,11,34,"o"],[13,139,11,34],[13,140,11,34,"filter"],[13,146,11,34],[13,157,11,34,"r"],[13,158,11,34],[13,169,11,34,"Object"],[13,175,11,34],[13,176,11,34,"getOwnPropertyDescriptor"],[13,200,11,34],[13,201,11,34,"e"],[13,202,11,34],[13,204,11,34,"r"],[13,205,11,34],[13,207,11,34,"enumerable"],[13,217,11,34],[13,224,11,34,"t"],[13,225,11,34],[13,226,11,34,"push"],[13,230,11,34],[13,231,11,34,"apply"],[13,236,11,34],[13,237,11,34,"t"],[13,238,11,34],[13,240,11,34,"o"],[13,241,11,34],[13,253,11,34,"t"],[13,254,11,34],[14,2,11,34],[14,11,11,34,"_objectSpread"],[14,25,11,34,"e"],[14,26,11,34],[14,39,11,34,"r"],[14,40,11,34],[14,46,11,34,"r"],[14,47,11,34],[14,50,11,34,"arguments"],[14,59,11,34],[14,60,11,34,"length"],[14,66,11,34],[14,68,11,34,"r"],[14,69,11,34],[14,79,11,34,"t"],[14,80,11,34],[14,91,11,34,"arguments"],[14,100,11,34],[14,101,11,34,"r"],[14,102,11,34],[14,106,11,34,"arguments"],[14,115,11,34],[14,116,11,34,"r"],[14,117,11,34],[14,125,11,34,"r"],[14,126,11,34],[14,133,11,34,"ownKeys"],[14,140,11,34],[14,141,11,34,"Object"],[14,147,11,34],[14,148,11,34,"t"],[14,149,11,34],[14,156,11,34,"forEach"],[14,163,11,34],[14,174,11,34,"r"],[14,175,11,34],[14,183,11,34,"_defineProperty2"],[14,199,11,34],[14,200,11,34,"default"],[14,207,11,34],[14,209,11,34,"e"],[14,210,11,34],[14,212,11,34,"r"],[14,213,11,34],[14,215,11,34,"t"],[14,216,11,34],[14,217,11,34,"r"],[14,218,11,34],[14,227,11,34,"Object"],[14,233,11,34],[14,234,11,34,"getOwnPropertyDescriptors"],[14,259,11,34],[14,262,11,34,"Object"],[14,268,11,34],[14,269,11,34,"defineProperties"],[14,285,11,34],[14,286,11,34,"e"],[14,287,11,34],[14,289,11,34,"Object"],[14,295,11,34],[14,296,11,34,"getOwnPropertyDescriptors"],[14,321,11,34],[14,322,11,34,"t"],[14,323,11,34],[14,328,11,34,"ownKeys"],[14,335,11,34],[14,336,11,34,"Object"],[14,342,11,34],[14,343,11,34,"t"],[14,344,11,34],[14,347,11,34,"forEach"],[14,354,11,34],[14,365,11,34,"r"],[14,366,11,34],[14,370,11,34,"Object"],[14,376,11,34],[14,377,11,34,"defineProperty"],[14,391,11,34],[14,392,11,34,"e"],[14,393,11,34],[14,395,11,34,"r"],[14,396,11,34],[14,398,11,34,"Object"],[14,404,11,34],[14,405,11,34,"getOwnPropertyDescriptor"],[14,429,11,34],[14,430,11,34,"t"],[14,431,11,34],[14,433,11,34,"r"],[14,434,11,34],[14,451,11,34,"e"],[14,452,11,34],[14,456,1,0],[15,0,2,0],[16,0,3,0],[17,0,4,0],[18,0,5,0],[19,0,6,0],[20,0,7,0],[21,0,8,0],[22,0,9,0],[23,2,1,0],[23,6,19,13,"CellRenderMask"],[23,20,19,27],[23,23,19,27,"exports"],[23,30,19,27],[23,31,19,27,"CellRenderMask"],[23,45,19,27],[24,4,23,2],[24,13,23,2,"CellRenderMask"],[24,28,23,14,"numCells"],[24,36,23,30],[24,38,23,32],[25,6,23,32],[25,10,23,32,"_classCallCheck2"],[25,26,23,32],[25,27,23,32,"default"],[25,34,23,32],[25,42,23,32,"CellRenderMask"],[25,56,23,32],[26,6,24,4],[26,10,24,4,"invariant"],[26,28,24,13],[26,30,25,6,"numCells"],[26,38,25,14],[26,42,25,18],[26,43,25,19],[26,45,26,6],[26,105,27,4],[26,106,27,5],[27,6,29,4],[27,10,29,8],[27,11,29,9,"_numCells"],[27,20,29,18],[27,23,29,21,"numCells"],[27,31,29,29],[28,6,31,4],[28,10,31,8,"numCells"],[28,18,31,16],[28,23,31,21],[28,24,31,22],[28,26,31,24],[29,8,32,6],[29,12,32,10],[29,13,32,11,"_regions"],[29,21,32,19],[29,24,32,22],[29,26,32,24],[30,6,33,4],[30,7,33,5],[30,13,33,11],[31,8,34,6],[31,12,34,10],[31,13,34,11,"_regions"],[31,21,34,19],[31,24,34,22],[31,25,35,8],[32,10,36,10,"first"],[32,15,36,15],[32,17,36,17],[32,18,36,18],[33,10,37,10,"last"],[33,14,37,14],[33,16,37,16,"numCells"],[33,24,37,24],[33,27,37,27],[33,28,37,28],[34,10,38,10,"isSpacer"],[34,18,38,18],[34,20,38,20],[35,8,39,8],[35,9,39,9],[35,10,40,7],[36,6,41,4],[37,4,42,2],[38,4,42,3],[38,8,42,3,"_createClass2"],[38,21,42,3],[38,22,42,3,"default"],[38,29,42,3],[38,31,42,3,"CellRenderMask"],[38,45,42,3],[39,6,42,3,"key"],[39,9,42,3],[40,6,42,3,"value"],[40,11,42,3],[40,13,44,2],[40,22,44,2,"enumerateRegions"],[40,39,44,2],[40,41,44,49],[41,8,45,4],[41,15,45,11],[41,19,45,15],[41,20,45,16,"_regions"],[41,28,45,24],[42,6,46,2],[43,4,46,3],[44,6,46,3,"key"],[44,9,46,3],[45,6,46,3,"value"],[45,11,46,3],[45,13,48,2],[45,22,48,2,"addCells"],[45,31,48,11,"cells"],[45,36,48,47],[45,38,48,55],[46,8,48,55],[46,12,48,55,"_this$_regions"],[46,26,48,55],[47,8,49,4],[47,12,49,4,"invariant"],[47,30,49,13],[47,32,50,6,"cells"],[47,37,50,11],[47,38,50,12,"first"],[47,43,50,17],[47,47,50,21],[47,48,50,22],[47,52,51,8,"cells"],[47,57,51,13],[47,58,51,14,"first"],[47,63,51,19],[47,66,51,22],[47,70,51,26],[47,71,51,27,"_numCells"],[47,80,51,36],[47,84,52,8,"cells"],[47,89,52,13],[47,90,52,14,"last"],[47,94,52,18],[47,98,52,22],[47,99,52,23],[47,100,52,24],[47,104,53,8,"cells"],[47,109,53,13],[47,110,53,14,"last"],[47,114,53,18],[47,117,53,21],[47,121,53,25],[47,122,53,26,"_numCells"],[47,131,53,35],[47,135,54,8,"cells"],[47,140,54,13],[47,141,54,14,"last"],[47,145,54,18],[47,149,54,22,"cells"],[47,154,54,27],[47,155,54,28,"first"],[47,160,54,33],[47,163,54,36],[47,164,54,37],[47,166,55,6],[47,222,56,4],[47,223,56,5],[49,8,58,4],[50,8,59,4],[51,8,60,4],[51,12,60,8,"cells"],[51,17,60,13],[51,18,60,14,"last"],[51,22,60,18],[51,25,60,21,"cells"],[51,30,60,26],[51,31,60,27,"first"],[51,36,60,32],[51,38,60,34],[52,10,61,6],[53,8,62,4],[54,8,64,4],[54,12,64,4,"_this$_findRegion"],[54,29,64,4],[54,32,64,48],[54,36,64,52],[54,37,64,53,"_findRegion"],[54,48,64,64],[54,49,64,65,"cells"],[54,54,64,70],[54,55,64,71,"first"],[54,60,64,76],[54,61,64,77],[55,10,64,77,"_this$_findRegion2"],[55,28,64,77],[55,35,64,77,"_slicedToArray2"],[55,50,64,77],[55,51,64,77,"default"],[55,58,64,77],[55,60,64,77,"_this$_findRegion"],[55,77,64,77],[56,10,64,11,"firstIntersect"],[56,24,64,25],[56,27,64,25,"_this$_findRegion2"],[56,45,64,25],[57,10,64,27,"firstIntersectIdx"],[57,27,64,44],[57,30,64,44,"_this$_findRegion2"],[57,48,64,44],[58,8,65,4],[58,12,65,4,"_this$_findRegion3"],[58,30,65,4],[58,33,65,46],[58,37,65,50],[58,38,65,51,"_findRegion"],[58,49,65,62],[58,50,65,63,"cells"],[58,55,65,68],[58,56,65,69,"last"],[58,60,65,73],[58,61,65,74],[59,10,65,74,"_this$_findRegion4"],[59,28,65,74],[59,35,65,74,"_slicedToArray2"],[59,50,65,74],[59,51,65,74,"default"],[59,58,65,74],[59,60,65,74,"_this$_findRegion3"],[59,78,65,74],[60,10,65,11,"lastIntersect"],[60,23,65,24],[60,26,65,24,"_this$_findRegion4"],[60,44,65,24],[61,10,65,26,"lastIntersectIdx"],[61,26,65,42],[61,29,65,42,"_this$_findRegion4"],[61,47,65,42],[63,8,67,4],[64,8,68,4],[65,8,69,4],[65,12,69,8,"firstIntersectIdx"],[65,29,69,25],[65,34,69,30,"lastIntersectIdx"],[65,50,69,46],[65,54,69,50],[65,55,69,51,"firstIntersect"],[65,69,69,65],[65,70,69,66,"isSpacer"],[65,78,69,74],[65,80,69,76],[66,10,70,6],[67,8,71,4],[69,8,73,4],[70,8,74,4],[71,8,75,4],[71,12,75,10,"newLeadRegion"],[71,25,75,42],[71,28,75,45],[71,30,75,47],[72,8,76,4],[72,12,76,10,"newTailRegion"],[72,25,76,42],[72,28,76,45],[72,30,76,47],[73,8,77,4],[73,12,77,10,"newMainRegion"],[73,25,77,35],[73,28,77,35,"_objectSpread"],[73,41,77,35],[73,42,77,35,"_objectSpread"],[73,55,77,35],[73,60,78,9,"cells"],[73,65,78,14],[74,10,79,6,"isSpacer"],[74,18,79,14],[74,20,79,16],[75,8,79,21],[75,10,80,5],[76,8,82,4],[76,12,82,8,"firstIntersect"],[76,26,82,22],[76,27,82,23,"first"],[76,32,82,28],[76,35,82,31,"newMainRegion"],[76,48,82,44],[76,49,82,45,"first"],[76,54,82,50],[76,56,82,52],[77,10,83,6],[77,14,83,10,"firstIntersect"],[77,28,83,24],[77,29,83,25,"isSpacer"],[77,37,83,33],[77,39,83,35],[78,12,84,8,"newLeadRegion"],[78,25,84,21],[78,26,84,22,"push"],[78,30,84,26],[78,31,84,27],[79,14,85,10,"first"],[79,19,85,15],[79,21,85,17,"firstIntersect"],[79,35,85,31],[79,36,85,32,"first"],[79,41,85,37],[80,14,86,10,"last"],[80,18,86,14],[80,20,86,16,"newMainRegion"],[80,33,86,29],[80,34,86,30,"first"],[80,39,86,35],[80,42,86,38],[80,43,86,39],[81,14,87,10,"isSpacer"],[81,22,87,18],[81,24,87,20],[82,12,88,8],[82,13,88,9],[82,14,88,10],[83,10,89,6],[83,11,89,7],[83,17,89,13],[84,12,90,8,"newMainRegion"],[84,25,90,21],[84,26,90,22,"first"],[84,31,90,27],[84,34,90,30,"firstIntersect"],[84,48,90,44],[84,49,90,45,"first"],[84,54,90,50],[85,10,91,6],[86,8,92,4],[87,8,94,4],[87,12,94,8,"lastIntersect"],[87,25,94,21],[87,26,94,22,"last"],[87,30,94,26],[87,33,94,29,"newMainRegion"],[87,46,94,42],[87,47,94,43,"last"],[87,51,94,47],[87,53,94,49],[88,10,95,6],[88,14,95,10,"lastIntersect"],[88,27,95,23],[88,28,95,24,"isSpacer"],[88,36,95,32],[88,38,95,34],[89,12,96,8,"newTailRegion"],[89,25,96,21],[89,26,96,22,"push"],[89,30,96,26],[89,31,96,27],[90,14,97,10,"first"],[90,19,97,15],[90,21,97,17,"newMainRegion"],[90,34,97,30],[90,35,97,31,"last"],[90,39,97,35],[90,42,97,38],[90,43,97,39],[91,14,98,10,"last"],[91,18,98,14],[91,20,98,16,"lastIntersect"],[91,33,98,29],[91,34,98,30,"last"],[91,38,98,34],[92,14,99,10,"isSpacer"],[92,22,99,18],[92,24,99,20],[93,12,100,8],[93,13,100,9],[93,14,100,10],[94,10,101,6],[94,11,101,7],[94,17,101,13],[95,12,102,8,"newMainRegion"],[95,25,102,21],[95,26,102,22,"last"],[95,30,102,26],[95,33,102,29,"lastIntersect"],[95,46,102,42],[95,47,102,43,"last"],[95,51,102,47],[96,10,103,6],[97,8,104,4],[98,8,106,4],[98,12,106,10,"replacementRegions"],[98,30,106,47],[98,36,106,47,"concat"],[98,42,106,47],[98,43,107,9,"newLeadRegion"],[98,56,107,22],[98,59,108,6,"newMainRegion"],[98,72,108,19],[98,75,109,9,"newTailRegion"],[98,88,109,22],[98,89,110,5],[99,8,111,4],[99,12,111,10,"numRegionsToDelete"],[99,30,111,28],[99,33,111,31,"lastIntersectIdx"],[99,49,111,47],[99,52,111,50,"firstIntersectIdx"],[99,69,111,67],[99,72,111,70],[99,73,111,71],[100,8,112,4],[100,9,112,4,"_this$_regions"],[100,23,112,4],[100,30,112,8],[100,31,112,9,"_regions"],[100,39,112,17],[100,41,112,18,"splice"],[100,47,112,24],[100,48,112,24,"apply"],[100,53,112,24],[100,54,112,24,"_this$_regions"],[100,68,112,24],[100,71,113,6,"firstIntersectIdx"],[100,88,113,23],[100,90,114,6,"numRegionsToDelete"],[100,108,114,24],[100,110,114,24,"concat"],[100,116,114,24],[100,121,114,24,"_toConsumableArray2"],[100,140,114,24],[100,141,114,24,"default"],[100,148,114,24],[100,150,115,9,"replacementRegions"],[100,168,115,27],[100,170,116,4],[100,171,116,5],[101,6,117,2],[102,4,117,3],[103,6,117,3,"key"],[103,9,117,3],[104,6,117,3,"value"],[104,11,117,3],[104,13,119,2],[104,22,119,2,"numCells"],[104,31,119,2],[104,33,119,21],[105,8,120,4],[105,15,120,11],[105,19,120,15],[105,20,120,16,"_numCells"],[105,29,120,25],[106,6,121,2],[107,4,121,3],[108,6,121,3,"key"],[108,9,121,3],[109,6,121,3,"value"],[109,11,121,3],[109,13,123,2],[109,22,123,2,"equals"],[109,29,123,9,"other"],[109,34,123,30],[109,36,123,41],[110,8,124,4],[110,15,125,6],[110,19,125,10],[110,20,125,11,"_numCells"],[110,29,125,20],[110,34,125,25,"other"],[110,39,125,30],[110,40,125,31,"_numCells"],[110,49,125,40],[110,53,126,6],[110,57,126,10],[110,58,126,11,"_regions"],[110,66,126,19],[110,67,126,20,"length"],[110,73,126,26],[110,78,126,31,"other"],[110,83,126,36],[110,84,126,37,"_regions"],[110,92,126,45],[110,93,126,46,"length"],[110,99,126,52],[110,103,127,6],[110,107,127,10],[110,108,127,11,"_regions"],[110,116,127,19],[110,117,127,20,"every"],[110,122,127,25],[110,123,128,8],[110,133,128,9,"region"],[110,139,128,15],[110,141,128,17,"i"],[110,142,128,18],[111,10,128,18],[111,17,129,10,"region"],[111,23,129,16],[111,24,129,17,"first"],[111,29,129,22],[111,34,129,27,"other"],[111,39,129,32],[111,40,129,33,"_regions"],[111,48,129,41],[111,49,129,42,"i"],[111,50,129,43],[111,51,129,44],[111,52,129,45,"first"],[111,57,129,50],[111,61,130,10,"region"],[111,67,130,16],[111,68,130,17,"last"],[111,72,130,21],[111,77,130,26,"other"],[111,82,130,31],[111,83,130,32,"_regions"],[111,91,130,40],[111,92,130,41,"i"],[111,93,130,42],[111,94,130,43],[111,95,130,44,"last"],[111,99,130,48],[111,103,131,10,"region"],[111,109,131,16],[111,110,131,17,"isSpacer"],[111,118,131,25],[111,123,131,30,"other"],[111,128,131,35],[111,129,131,36,"_regions"],[111,137,131,44],[111,138,131,45,"i"],[111,139,131,46],[111,140,131,47],[111,141,131,48,"isSpacer"],[111,149,131,56],[112,8,131,56],[112,9,132,6],[112,10,132,7],[113,6,134,2],[114,4,134,3],[115,6,134,3,"key"],[115,9,134,3],[116,6,134,3,"value"],[116,11,134,3],[116,13,136,2],[116,22,136,2,"_findRegion"],[116,34,136,14,"cellIdx"],[116,41,136,29],[116,43,136,53],[117,8,137,4],[117,12,137,8,"firstIdx"],[117,20,137,16],[117,23,137,19],[117,24,137,20],[118,8,138,4],[118,12,138,8,"lastIdx"],[118,19,138,15],[118,22,138,18],[118,26,138,22],[118,27,138,23,"_regions"],[118,35,138,31],[118,36,138,32,"length"],[118,42,138,38],[118,45,138,41],[118,46,138,42],[119,8,140,4],[119,15,140,11,"firstIdx"],[119,23,140,19],[119,27,140,23,"lastIdx"],[119,34,140,30],[119,36,140,32],[120,10,141,6],[120,14,141,12,"middleIdx"],[120,23,141,21],[120,26,141,24,"Math"],[120,30,141,28],[120,31,141,29,"floor"],[120,36,141,34],[120,37,141,35],[120,38,141,36,"firstIdx"],[120,46,141,44],[120,49,141,47,"lastIdx"],[120,56,141,54],[120,60,141,58],[120,61,141,59],[120,62,141,60],[121,10,142,6],[121,14,142,12,"middleRegion"],[121,26,142,24],[121,29,142,27],[121,33,142,31],[121,34,142,32,"_regions"],[121,42,142,40],[121,43,142,41,"middleIdx"],[121,52,142,50],[121,53,142,51],[122,10,144,6],[122,14,144,10,"cellIdx"],[122,21,144,17],[122,25,144,21,"middleRegion"],[122,37,144,33],[122,38,144,34,"first"],[122,43,144,39],[122,47,144,43,"cellIdx"],[122,54,144,50],[122,58,144,54,"middleRegion"],[122,70,144,66],[122,71,144,67,"last"],[122,75,144,71],[122,77,144,73],[123,12,145,8],[123,19,145,15],[123,20,145,16,"middleRegion"],[123,32,145,28],[123,34,145,30,"middleIdx"],[123,43,145,39],[123,44,145,40],[124,10,146,6],[124,11,146,7],[124,17,146,13],[124,21,146,17,"cellIdx"],[124,28,146,24],[124,31,146,27,"middleRegion"],[124,43,146,39],[124,44,146,40,"first"],[124,49,146,45],[124,51,146,47],[125,12,147,8,"lastIdx"],[125,19,147,15],[125,22,147,18,"middleIdx"],[125,31,147,27],[125,34,147,30],[125,35,147,31],[126,10,148,6],[126,11,148,7],[126,17,148,13],[126,21,148,17,"cellIdx"],[126,28,148,24],[126,31,148,27,"middleRegion"],[126,43,148,39],[126,44,148,40,"last"],[126,48,148,44],[126,50,148,46],[127,12,149,8,"firstIdx"],[127,20,149,16],[127,23,149,19,"middleIdx"],[127,32,149,28],[127,35,149,31],[127,36,149,32],[128,10,150,6],[129,8,151,4],[130,8,153,4],[130,12,153,4,"invariant"],[130,30,153,13],[130,32,153,14],[130,37,153,19],[130,39,153,22],[130,84,153,66,"cellIdx"],[130,91,153,74],[130,93,153,75],[130,94,153,76],[131,6,154,2],[132,4,154,3],[133,4,154,3],[133,11,154,3,"CellRenderMask"],[133,25,154,3],[134,2,154,3],[135,0,154,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;OCkB;ECI;GDmB;EEE;GFE;EGE;GHqE;EIE;GJE;EKE;QCK;wDDG;GLG;EOE;GPkB;CDC"}},"type":"js/module"}]}