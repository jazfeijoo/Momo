{"dependencies":[{"name":"./EmitterSubscription.js","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":26,"index":414},"end":{"line":14,"column":61,"index":449}}],"key":"k5ZqPWCULIzuk3x/3yj/EpT6aLA="}},{"name":"./EventSubscriptionVendor.js","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":30,"index":482},"end":{"line":16,"column":69,"index":521}}],"key":"baux68A3saH7VWri55sEjDUQEfg="}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"locs":[{"start":{"line":18,"column":16,"index":540},"end":{"line":18,"column":45,"index":569}}],"key":"avnjoAx2FQYjx6eZ7ALk+OuZk68="}},{"name":"fbjs/lib/emptyFunction","data":{"asyncType":null,"locs":[{"start":{"line":20,"column":20,"index":592},"end":{"line":20,"column":53,"index":625}}],"key":"7fB5mvsnBBz4vwra9nVyDHNG2L4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\r\n   * Copyright (c) 2014-present, Facebook, Inc.\r\n   * All rights reserved.\r\n   *\r\n   * This source code is licensed under the BSD-style license found in the\r\n   * LICENSE file in the root directory of this source tree. An additional grant\r\n   * of patent rights can be found in the PATENTS file in the same directory.\r\n   *\r\n   * @providesModule BaseEventEmitter\r\n   * @typechecks\r\n   */\n  var EmitterSubscription = _$$_REQUIRE(_dependencyMap[0], \"./EmitterSubscription.js\");\n  var EventSubscriptionVendor = _$$_REQUIRE(_dependencyMap[1], \"./EventSubscriptionVendor.js\");\n  var invariant = _$$_REQUIRE(_dependencyMap[2], \"fbjs/lib/invariant\");\n  var emptyFunction = _$$_REQUIRE(_dependencyMap[3], \"fbjs/lib/emptyFunction\");\n  /**\r\n   * @class BaseEventEmitter\r\n   * @description\r\n   * An EventEmitter is responsible for managing a set of listeners and publishing\r\n   * events to them when it is told that such events happened. In addition to the\r\n   * data for the given event it also sends a event control object which allows\r\n   * the listeners/handlers to prevent the default behavior of the given event.\r\n   *\r\n   * The emitter is designed to be generic enough to support all the different\r\n   * contexts in which one might want to emit events. It is a simple multicast\r\n   * mechanism on top of which extra functionality can be composed. For example, a\r\n   * more advanced emitter may use an EventHolder and EventFactory.\r\n   */\n\n  var BaseEventEmitter = /*#__PURE__*/function () {\n    /**\r\n     * @constructor\r\n     */\n    function BaseEventEmitter() {\n      this._subscriber = new EventSubscriptionVendor();\n      this._currentSubscription = null;\n    }\n    /**\r\n     * Adds a listener to be invoked when events of the specified type are\r\n     * emitted. An optional calling context may be provided. The data arguments\r\n     * emitted will be passed to the listener function.\r\n     *\r\n     * TODO: Annotate the listener arg's type. This is tricky because listeners\r\n     *       can be invoked with varargs.\r\n     *\r\n     * @param {string} eventType - Name of the event to listen to\r\n     * @param {function} listener - Function to invoke when the specified event is\r\n     *   emitted\r\n     * @param {*} context - Optional context object to use when invoking the\r\n     *   listener\r\n     */\n\n    var _proto = BaseEventEmitter.prototype;\n    _proto.addListener = function addListener(eventType, listener, context) {\n      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this._subscriber, listener, context));\n    }\n    /**\r\n     * Similar to addListener, except that the listener is removed after it is\r\n     * invoked once.\r\n     *\r\n     * @param {string} eventType - Name of the event to listen to\r\n     * @param {function} listener - Function to invoke only once when the\r\n     *   specified event is emitted\r\n     * @param {*} context - Optional context object to use when invoking the\r\n     *   listener\r\n     */;\n\n    _proto.once = function once(eventType, listener, context) {\n      var emitter = this;\n      return this.addListener(eventType, function () {\n        emitter.removeCurrentListener();\n        listener.apply(context, arguments);\n      });\n    }\n    /**\r\n     * Removes all of the registered listeners, including those registered as\r\n     * listener maps.\r\n     *\r\n     * @param {?string} eventType - Optional name of the event whose registered\r\n     *   listeners to remove\r\n     */;\n\n    _proto.removeAllListeners = function removeAllListeners(eventType) {\n      this._subscriber.removeAllSubscriptions(eventType);\n    }\n    /**\r\n     * Provides an API that can be called during an eventing cycle to remove the\r\n     * last listener that was invoked. This allows a developer to provide an event\r\n     * object that can remove the listener (or listener map) during the\r\n     * invocation.\r\n     *\r\n     * If it is called when not inside of an emitting cycle it will throw.\r\n     *\r\n     * @throws {Error} When called not during an eventing cycle\r\n     *\r\n     * @example\r\n     *   var subscription = emitter.addListenerMap({\r\n     *     someEvent: function(data, event) {\r\n     *       console.log(data);\r\n     *       emitter.removeCurrentListener();\r\n     *     }\r\n     *   });\r\n     *\r\n     *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n     *   emitter.emit('someEvent', 'def'); // does not log anything\r\n     */;\n\n    _proto.removeCurrentListener = function removeCurrentListener() {\n      !!!this._currentSubscription ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Not in an emitting cycle; there is no current subscription') : invariant(false) : void 0;\n      this._subscriber.removeSubscription(this._currentSubscription);\n    }\n    /**\r\n     * Returns an array of listeners that are currently registered for the given\r\n     * event.\r\n     *\r\n     * @param {string} eventType - Name of the event to query\r\n     * @return {array}\r\n     */;\n\n    _proto.listeners = function listeners(eventType) /* TODO: Array<EventSubscription> */\n    {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n        return subscription.listener;\n      }) : [];\n    }\n    /**\r\n     * Emits an event of the given type with the given data. All handlers of that\r\n     * particular type will be notified.\r\n     *\r\n     * @param {string} eventType - Name of the event to emit\r\n     * @param {*} Arbitrary arguments to be passed to each registered listener\r\n     *\r\n     * @example\r\n     *   emitter.addListener('someEvent', function(message) {\r\n     *     console.log(message);\r\n     *   });\r\n     *\r\n     *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n     */;\n\n    _proto.emit = function emit(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        var keys = Object.keys(subscriptions);\n        for (var ii = 0; ii < keys.length; ii++) {\n          var key = keys[ii];\n          var subscription = subscriptions[key]; // The subscription may have been removed during this event loop.\n\n          if (subscription) {\n            this._currentSubscription = subscription;\n            this.__emitToSubscription.apply(this, [subscription].concat(Array.prototype.slice.call(arguments)));\n          }\n        }\n        this._currentSubscription = null;\n      }\n    }\n    /**\r\n     * Provides a hook to override how the emitter emits an event to a specific\r\n     * subscription. This allows you to set up logging and error boundaries\r\n     * specific to your environment.\r\n     *\r\n     * @param {EmitterSubscription} subscription\r\n     * @param {string} eventType\r\n     * @param {*} Arbitrary arguments to be passed to each registered listener\r\n     */;\n\n    _proto.__emitToSubscription = function __emitToSubscription(subscription, eventType) {\n      var args = Array.prototype.slice.call(arguments, 2);\n      subscription.listener.apply(subscription.context, args);\n    };\n    return BaseEventEmitter;\n  }();\n  module.exports = BaseEventEmitter;\n});","lineCount":178,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,2,14,0],[15,6,14,4,"EmitterSubscription"],[15,25,14,23],[15,28,14,26,"require"],[15,39,14,33],[15,40,14,33,"_dependencyMap"],[15,54,14,33],[15,85,14,60],[15,86,14,61],[16,2,16,0],[16,6,16,4,"EventSubscriptionVendor"],[16,29,16,27],[16,32,16,30,"require"],[16,43,16,37],[16,44,16,37,"_dependencyMap"],[16,58,16,37],[16,93,16,68],[16,94,16,69],[17,2,18,0],[17,6,18,4,"invariant"],[17,15,18,13],[17,18,18,16,"require"],[17,29,18,23],[17,30,18,23,"_dependencyMap"],[17,44,18,23],[17,69,18,44],[17,70,18,45],[18,2,20,0],[18,6,20,4,"emptyFunction"],[18,19,20,17],[18,22,20,20,"require"],[18,33,20,27],[18,34,20,27,"_dependencyMap"],[18,48,20,27],[18,77,20,52],[18,78,20,53],[19,2,21,0],[20,0,22,0],[21,0,23,0],[22,0,24,0],[23,0,25,0],[24,0,26,0],[25,0,27,0],[26,0,28,0],[27,0,29,0],[28,0,30,0],[29,0,31,0],[30,0,32,0],[31,0,33,0],[33,2,36,0],[33,6,36,4,"BaseEventEmitter"],[33,22,36,20],[33,25,36,23],[33,38,36,36],[33,50,36,48],[34,4,37,2],[35,0,38,0],[36,0,39,0],[37,4,40,2],[37,13,40,11,"BaseEventEmitter"],[37,29,40,27,"BaseEventEmitter"],[37,30,40,27],[37,32,40,30],[38,6,41,4],[38,10,41,8],[38,11,41,9,"_subscriber"],[38,22,41,20],[38,25,41,23],[38,29,41,27,"EventSubscriptionVendor"],[38,52,41,50],[38,53,41,51],[38,54,41,52],[39,6,42,4],[39,10,42,8],[39,11,42,9,"_currentSubscription"],[39,31,42,29],[39,34,42,32],[39,38,42,36],[40,4,43,2],[41,4,44,2],[42,0,45,0],[43,0,46,0],[44,0,47,0],[45,0,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,0,52,0],[50,0,53,0],[51,0,54,0],[52,0,55,0],[53,0,56,0],[54,0,57,0],[56,4,60,2],[56,8,60,6,"_proto"],[56,14,60,12],[56,17,60,15,"BaseEventEmitter"],[56,33,60,31],[56,34,60,32,"prototype"],[56,43,60,41],[57,4,62,2,"_proto"],[57,10,62,8],[57,11,62,9,"addListener"],[57,22,62,20],[57,25,62,23],[57,34,62,32,"addListener"],[57,45,62,43,"addListener"],[57,46,62,44,"eventType"],[57,55,62,53],[57,57,62,55,"listener"],[57,65,62,63],[57,67,62,65,"context"],[57,74,62,72],[57,76,62,74],[58,6,63,4],[58,13,63,11],[58,17,63,15],[58,18,63,16,"_subscriber"],[58,29,63,27],[58,30,63,28,"addSubscription"],[58,45,63,43],[58,46,63,44,"eventType"],[58,55,63,53],[58,57,63,55],[58,61,63,59,"EmitterSubscription"],[58,80,63,78],[58,81,63,79],[58,85,63,83],[58,86,63,84,"_subscriber"],[58,97,63,95],[58,99,63,97,"listener"],[58,107,63,105],[58,109,63,107,"context"],[58,116,63,114],[58,117,63,115],[58,118,63,116],[59,4,64,2],[60,4,65,2],[61,0,66,0],[62,0,67,0],[63,0,68,0],[64,0,69,0],[65,0,70,0],[66,0,71,0],[67,0,72,0],[68,0,73,0],[69,0,74,0],[69,7,65,2],[71,4,77,2,"_proto"],[71,10,77,8],[71,11,77,9,"once"],[71,15,77,13],[71,18,77,16],[71,27,77,25,"once"],[71,31,77,29,"once"],[71,32,77,30,"eventType"],[71,41,77,39],[71,43,77,41,"listener"],[71,51,77,49],[71,53,77,51,"context"],[71,60,77,58],[71,62,77,60],[72,6,78,4],[72,10,78,8,"emitter"],[72,17,78,15],[72,20,78,18],[72,24,78,22],[73,6,79,4],[73,13,79,11],[73,17,79,15],[73,18,79,16,"addListener"],[73,29,79,27],[73,30,79,28,"eventType"],[73,39,79,37],[73,41,79,39],[73,53,79,51],[74,8,80,6,"emitter"],[74,15,80,13],[74,16,80,14,"removeCurrentListener"],[74,37,80,35],[74,38,80,36],[74,39,80,37],[75,8,81,6,"listener"],[75,16,81,14],[75,17,81,15,"apply"],[75,22,81,20],[75,23,81,21,"context"],[75,30,81,28],[75,32,81,30,"arguments"],[75,41,81,39],[75,42,81,40],[76,6,82,4],[76,7,82,5],[76,8,82,6],[77,4,83,2],[78,4,84,2],[79,0,85,0],[80,0,86,0],[81,0,87,0],[82,0,88,0],[83,0,89,0],[84,0,90,0],[84,7,84,2],[86,4,93,2,"_proto"],[86,10,93,8],[86,11,93,9,"removeAllListeners"],[86,29,93,27],[86,32,93,30],[86,41,93,39,"removeAllListeners"],[86,59,93,57,"removeAllListeners"],[86,60,93,58,"eventType"],[86,69,93,67],[86,71,93,69],[87,6,94,4],[87,10,94,8],[87,11,94,9,"_subscriber"],[87,22,94,20],[87,23,94,21,"removeAllSubscriptions"],[87,45,94,43],[87,46,94,44,"eventType"],[87,55,94,53],[87,56,94,54],[88,4,95,2],[89,4,96,2],[90,0,97,0],[91,0,98,0],[92,0,99,0],[93,0,100,0],[94,0,101,0],[95,0,102,0],[96,0,103,0],[97,0,104,0],[98,0,105,0],[99,0,106,0],[100,0,107,0],[101,0,108,0],[102,0,109,0],[103,0,110,0],[104,0,111,0],[105,0,112,0],[106,0,113,0],[107,0,114,0],[108,0,115,0],[109,0,116,0],[109,7,96,2],[111,4,119,2,"_proto"],[111,10,119,8],[111,11,119,9,"removeCurrentListener"],[111,32,119,30],[111,35,119,33],[111,44,119,42,"removeCurrentListener"],[111,65,119,63,"removeCurrentListener"],[111,66,119,63],[111,68,119,66],[112,6,120,4],[112,7,120,5],[112,8,120,6],[112,9,120,7],[112,13,120,11],[112,14,120,12,"_currentSubscription"],[112,34,120,32],[112,37,120,35,"process"],[112,44,120,42],[112,45,120,43,"env"],[112,48,120,46],[112,49,120,47,"NODE_ENV"],[112,57,120,55],[112,62,120,60],[112,74,120,72],[112,77,120,75,"invariant"],[112,86,120,84],[112,87,120,85],[112,92,120,90],[112,94,120,92],[112,154,120,152],[112,155,120,153],[112,158,120,156,"invariant"],[112,167,120,165],[112,168,120,166],[112,173,120,171],[112,174,120,172],[112,177,120,175],[112,182,120,180],[112,183,120,181],[113,6,122,4],[113,10,122,8],[113,11,122,9,"_subscriber"],[113,22,122,20],[113,23,122,21,"removeSubscription"],[113,41,122,39],[113,42,122,40],[113,46,122,44],[113,47,122,45,"_currentSubscription"],[113,67,122,65],[113,68,122,66],[114,4,123,2],[115,4,124,2],[116,0,125,0],[117,0,126,0],[118,0,127,0],[119,0,128,0],[120,0,129,0],[121,0,130,0],[121,7,124,2],[123,4,133,2,"_proto"],[123,10,133,8],[123,11,133,9,"listeners"],[123,20,133,18],[123,23,133,21],[123,32,133,30,"listeners"],[123,41,133,39,"listeners"],[123,42,133,40,"eventType"],[123,51,133,49],[123,53,134,2],[124,4,135,2],[125,6,136,4],[125,10,136,8,"subscriptions"],[125,23,136,21],[125,26,136,24],[125,30,136,28],[125,31,136,29,"_subscriber"],[125,42,136,40],[125,43,136,41,"getSubscriptionsForType"],[125,66,136,64],[125,67,136,65,"eventType"],[125,76,136,74],[125,77,136,75],[126,6,138,4],[126,13,138,11,"subscriptions"],[126,26,138,24],[126,29,138,27,"subscriptions"],[126,42,138,40],[126,43,138,41,"filter"],[126,49,138,47],[126,50,138,48,"emptyFunction"],[126,63,138,61],[126,64,138,62,"thatReturnsTrue"],[126,79,138,77],[126,80,138,78],[126,81,138,79,"map"],[126,84,138,82],[126,85,138,83],[126,95,138,93,"subscription"],[126,107,138,105],[126,109,138,107],[127,8,139,6],[127,15,139,13,"subscription"],[127,27,139,25],[127,28,139,26,"listener"],[127,36,139,34],[128,6,140,4],[128,7,140,5],[128,8,140,6],[128,11,140,9],[128,13,140,11],[129,4,141,2],[130,4,142,2],[131,0,143,0],[132,0,144,0],[133,0,145,0],[134,0,146,0],[135,0,147,0],[136,0,148,0],[137,0,149,0],[138,0,150,0],[139,0,151,0],[140,0,152,0],[141,0,153,0],[142,0,154,0],[143,0,155,0],[143,7,142,2],[145,4,158,2,"_proto"],[145,10,158,8],[145,11,158,9,"emit"],[145,15,158,13],[145,18,158,16],[145,27,158,25,"emit"],[145,31,158,29,"emit"],[145,32,158,30,"eventType"],[145,41,158,39],[145,43,158,41],[146,6,159,4],[146,10,159,8,"subscriptions"],[146,23,159,21],[146,26,159,24],[146,30,159,28],[146,31,159,29,"_subscriber"],[146,42,159,40],[146,43,159,41,"getSubscriptionsForType"],[146,66,159,64],[146,67,159,65,"eventType"],[146,76,159,74],[146,77,159,75],[147,6,161,4],[147,10,161,8,"subscriptions"],[147,23,161,21],[147,25,161,23],[148,8,162,6],[148,12,162,10,"keys"],[148,16,162,14],[148,19,162,17,"Object"],[148,25,162,23],[148,26,162,24,"keys"],[148,30,162,28],[148,31,162,29,"subscriptions"],[148,44,162,42],[148,45,162,43],[149,8,164,6],[149,13,164,11],[149,17,164,15,"ii"],[149,19,164,17],[149,22,164,20],[149,23,164,21],[149,25,164,23,"ii"],[149,27,164,25],[149,30,164,28,"keys"],[149,34,164,32],[149,35,164,33,"length"],[149,41,164,39],[149,43,164,41,"ii"],[149,45,164,43],[149,47,164,45],[149,49,164,47],[150,10,165,8],[150,14,165,12,"key"],[150,17,165,15],[150,20,165,18,"keys"],[150,24,165,22],[150,25,165,23,"ii"],[150,27,165,25],[150,28,165,26],[151,10,166,8],[151,14,166,12,"subscription"],[151,26,166,24],[151,29,166,27,"subscriptions"],[151,42,166,40],[151,43,166,41,"key"],[151,46,166,44],[151,47,166,45],[151,48,166,46],[151,49,166,47],[153,10,168,8],[153,14,168,12,"subscription"],[153,26,168,24],[153,28,168,26],[154,12,169,10],[154,16,169,14],[154,17,169,15,"_currentSubscription"],[154,37,169,35],[154,40,169,38,"subscription"],[154,52,169,50],[155,12,171,10],[155,16,171,14],[155,17,171,15,"__emitToSubscription"],[155,37,171,35],[155,38,171,36,"apply"],[155,43,171,41],[155,44,171,42],[155,48,171,46],[155,50,171,48],[155,51,171,49,"subscription"],[155,63,171,61],[155,64,171,62],[155,65,171,63,"concat"],[155,71,171,69],[155,72,171,70,"Array"],[155,77,171,75],[155,78,171,76,"prototype"],[155,87,171,85],[155,88,171,86,"slice"],[155,93,171,91],[155,94,171,92,"call"],[155,98,171,96],[155,99,171,97,"arguments"],[155,108,171,106],[155,109,171,107],[155,110,171,108],[155,111,171,109],[156,10,172,8],[157,8,173,6],[158,8,175,6],[158,12,175,10],[158,13,175,11,"_currentSubscription"],[158,33,175,31],[158,36,175,34],[158,40,175,38],[159,6,176,4],[160,4,177,2],[161,4,178,2],[162,0,179,0],[163,0,180,0],[164,0,181,0],[165,0,182,0],[166,0,183,0],[167,0,184,0],[168,0,185,0],[169,0,186,0],[169,7,178,2],[171,4,189,2,"_proto"],[171,10,189,8],[171,11,189,9,"__emitToSubscription"],[171,31,189,29],[171,34,189,32],[171,43,189,41,"__emitToSubscription"],[171,63,189,61,"__emitToSubscription"],[171,64,189,62,"subscription"],[171,76,189,74],[171,78,189,76,"eventType"],[171,87,189,85],[171,89,189,87],[172,6,190,4],[172,10,190,8,"args"],[172,14,190,12],[172,17,190,15,"Array"],[172,22,190,20],[172,23,190,21,"prototype"],[172,32,190,30],[172,33,190,31,"slice"],[172,38,190,36],[172,39,190,37,"call"],[172,43,190,41],[172,44,190,42,"arguments"],[172,53,190,51],[172,55,190,53],[172,56,190,54],[172,57,190,55],[173,6,191,4,"subscription"],[173,18,191,16],[173,19,191,17,"listener"],[173,27,191,25],[173,28,191,26,"apply"],[173,33,191,31],[173,34,191,32,"subscription"],[173,46,191,44],[173,47,191,45,"context"],[173,54,191,52],[173,56,191,54,"args"],[173,60,191,58],[173,61,191,59],[174,4,192,2],[174,5,192,3],[175,4,194,2],[175,11,194,9,"BaseEventEmitter"],[175,27,194,25],[176,2,195,0],[176,3,195,1],[176,4,195,2],[176,5,195,3],[177,2,197,0,"module"],[177,8,197,6],[177,9,197,7,"exports"],[177,16,197,14],[177,19,197,17,"BaseEventEmitter"],[177,35,197,33],[178,0,197,34]],"functionMap":{"names":["<global>","<anonymous>","BaseEventEmitter","addListener","once","addListener$argument_1","removeAllListeners","removeCurrentListener","listeners","subscriptions.filter.map$argument_0","emit","__emitToSubscription"],"mappings":"AAA;oCCmC;ECI;GDG;uBEmB;GFE;gBGa;uCCE;KDG;GHC;8BKU;GLE;iCMwB;GNI;qBOU;mFCK;KDE;GPC;gBSiB;GTmB;gCUY;GVG;CDG"}},"type":"js/module"}]}