{"dependencies":[{"name":"./InteractionManager","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":27,"index":315},"end":{"line":15,"column":58,"index":346}}],"key":"ILikFoiGRWiLD9DgAo/WvlXkjQY="}},{"name":"./TouchHistoryMath","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":25,"index":373},"end":{"line":16,"column":54,"index":402}}],"key":"1H9zq4S4TT8Rx9bOAmqotJqqR5U="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var InteractionManager = _$$_REQUIRE(_dependencyMap[0], \"./InteractionManager\");\n  var TouchHistoryMath = _$$_REQUIRE(_dependencyMap[1], \"./TouchHistoryMath\");\n  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\n  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\n  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\n  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\n  var currentCentroidX = TouchHistoryMath.currentCentroidX;\n  var currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n  /**\n   * `PanResponder` reconciles several touches into a single gesture. It makes\n   * single-touch gestures resilient to extra touches, and can be used to\n   * recognize simple multi-touch gestures.\n   *\n   * By default, `PanResponder` holds an `InteractionManager` handle to block\n   * long-running JS events from interrupting active gestures.\n   *\n   * It provides a predictable wrapper of the responder handlers provided by the\n   * [gesture responder system](docs/gesture-responder-system.html).\n   * For each handler, it provides a new `gestureState` object alongside the\n   * native event object:\n   *\n   * ```\n   * onPanResponderMove: (event, gestureState) => {}\n   * ```\n   *\n   * A native event is a synthetic touch event with the following form:\n   *\n   *  - `nativeEvent`\n   *      + `changedTouches` - Array of all touch events that have changed since the last event\n   *      + `identifier` - The ID of the touch\n   *      + `locationX` - The X position of the touch, relative to the element\n   *      + `locationY` - The Y position of the touch, relative to the element\n   *      + `pageX` - The X position of the touch, relative to the root element\n   *      + `pageY` - The Y position of the touch, relative to the root element\n   *      + `target` - The node id of the element receiving the touch event\n   *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n   *      + `touches` - Array of all current touches on the screen\n   *\n   * A `gestureState` object has the following:\n   *\n   *  - `stateID` - ID of the gestureState- persisted as long as there at least\n   *     one touch on screen\n   *  - `moveX` - the latest screen coordinates of the recently-moved touch\n   *  - `moveY` - the latest screen coordinates of the recently-moved touch\n   *  - `x0` - the screen coordinates of the responder grant\n   *  - `y0` - the screen coordinates of the responder grant\n   *  - `dx` - accumulated distance of the gesture since the touch started\n   *  - `dy` - accumulated distance of the gesture since the touch started\n   *  - `vx` - current velocity of the gesture\n   *  - `vy` - current velocity of the gesture\n   *  - `numberActiveTouches` - Number of touches currently on screen\n   *\n   * ### Basic Usage\n   *\n   * ```\n   *   componentWillMount: function() {\n   *     this._panResponder = PanResponder.create({\n   *       // Ask to be the responder:\n   *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n   *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *\n   *       onPanResponderGrant: (evt, gestureState) => {\n   *         // The gesture has started. Show visual feedback so the user knows\n   *         // what is happening!\n   *\n   *         // gestureState.d{x,y} will be set to zero now\n   *       },\n   *       onPanResponderMove: (evt, gestureState) => {\n   *         // The most recent move distance is gestureState.move{X,Y}\n   *\n   *         // The accumulated gesture distance since becoming responder is\n   *         // gestureState.d{x,y}\n   *       },\n   *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n   *       onPanResponderRelease: (evt, gestureState) => {\n   *         // The user has released all touches while this view is the\n   *         // responder. This typically means a gesture has succeeded\n   *       },\n   *       onPanResponderTerminate: (evt, gestureState) => {\n   *         // Another component has become the responder, so this gesture\n   *         // should be cancelled\n   *       },\n   *       onShouldBlockNativeResponder: (evt, gestureState) => {\n   *         // Returns whether this component should block native components from becoming the JS\n   *         // responder. Returns true by default. Is currently only supported on android.\n   *         return true;\n   *       },\n   *     });\n   *   },\n   *\n   *   render: function() {\n   *     return (\n   *       <View {...this._panResponder.panHandlers} />\n   *     );\n   *   },\n   *\n   * ```\n   *\n   * ### Working Example\n   *\n   * To see it in action, try the\n   * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/HEAD/packages/rn-tester/js/examples/PanResponder/PanResponderExample.js)\n   */\n\n  var PanResponder = {\n    /**\n     *\n     * A graphical explanation of the touch data flow:\n     *\n     * +----------------------------+             +--------------------------------+\n     * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n     * +----------------------------+             +----------+---------------------+\n     * |Global store of touchHistory|             |Allocation-less math util       |\n     * |including activeness, start |             |on touch history (centroids     |\n     * |position, prev/cur position.|             |and multitouch movement etc)    |\n     * |                            |             |                                |\n     * +----^-----------------------+             +----^---------------------------+\n     *      |                                          |\n     *      | (records relevant history                |\n     *      |  of touches relevant for                 |\n     *      |  implementing higher level               |\n     *      |  gestures)                               |\n     *      |                                          |\n     * +----+-----------------------+             +----|---------------------------+\n     * | ResponderEventPlugin       |             |    |   Your App/Component      |\n     * +----------------------------+             +----|---------------------------+\n     * |Negotiates which view gets  | Low level   |    |             High level    |\n     * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n     * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n     * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n     * +----------------------------+ attached to |  |         |     distance and  |\n     *                                 each event |  +---------+     velocity.     |\n     *                                            |                                |\n     *                                            |                                |\n     *                                            +--------------------------------+\n     *\n     *\n     *\n     * Gesture that calculates cumulative movement over time in a way that just\n     * \"does the right thing\" for multiple touches. The \"right thing\" is very\n     * nuanced. When moving two touches in opposite directions, the cumulative\n     * distance is zero in each dimension. When two touches move in parallel five\n     * pixels in the same direction, the cumulative distance is five, not ten. If\n     * two touches start, one moves five in a direction, then stops and the other\n     * touch moves fives in the same direction, the cumulative distance is ten.\n     *\n     * This logic requires a kind of processing of time \"clusters\" of touch events\n     * so that two touch moves that essentially occur in parallel but move every\n     * other frame respectively, are considered part of the same movement.\n     *\n     * Explanation of some of the non-obvious fields:\n     *\n     * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n     *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n     *   centroid of the most recently moved \"cluster\" of active touches.\n     *   (Currently all move have the same timeStamp, but later we should add some\n     *   threshold for what is considered to be \"moving\"). If a palm is\n     *   accidentally counted as a touch, but a finger is moving greatly, the palm\n     *   will move slightly, but we only want to count the single moving touch.\n     * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n     *   responder.\n     * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n     *   distance. Accounts for touch moves that are clustered together in time,\n     *   moving the same direction. Only valid when currently responder (otherwise,\n     *   it only represents the drag distance below the threshold).\n     * - vx/vy: Velocity.\n     */\n    _initializeGestureState: function _initializeGestureState(gestureState) {\n      gestureState.moveX = 0;\n      gestureState.moveY = 0;\n      gestureState.x0 = 0;\n      gestureState.y0 = 0;\n      gestureState.dx = 0;\n      gestureState.dy = 0;\n      gestureState.vx = 0;\n      gestureState.vy = 0;\n      gestureState.numberActiveTouches = 0;\n      // All `gestureState` accounts for timeStamps up until:\n      gestureState._accountsForMovesUpTo = 0;\n    },\n    /**\n     * This is nuanced and is necessary. It is incorrect to continuously take all\n     * active *and* recently moved touches, find the centroid, and track how that\n     * result changes over time. Instead, we must take all recently moved\n     * touches, and calculate how the centroid has changed just for those\n     * recently moved touches, and append that change to an accumulator. This is\n     * to (at least) handle the case where the user is moving three fingers, and\n     * then one of the fingers stops but the other two continue.\n     *\n     * This is very different than taking all of the recently moved touches and\n     * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n     * changes* in the centroid of recently moved touches.\n     *\n     * There is also some nuance with how we handle multiple moved touches in a\n     * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n     * individual events, multiple touches generate two 'move' events, each of\n     * them triggering `onResponderMove`. But with the way `PanResponder` works,\n     * all of the gesture inference is performed on the first dispatch, since it\n     * looks at all of the touches (even the ones for which there hasn't been a\n     * native dispatch yet). Therefore, `PanResponder` does not call\n     * `onResponderMove` passed the first dispatch. This diverges from the\n     * typical responder callback pattern (without using `PanResponder`), but\n     * avoids more dispatches than necessary.\n     */\n    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      var movedAfter = gestureState._accountsForMovesUpTo;\n      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var nextDX = gestureState.dx + (x - prevX);\n      var nextDY = gestureState.dy + (y - prevY);\n\n      // TODO: This must be filtered intelligently.\n      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n      gestureState.vx = (nextDX - gestureState.dx) / dt;\n      gestureState.vy = (nextDY - gestureState.dy) / dt;\n      gestureState.dx = nextDX;\n      gestureState.dy = nextDY;\n      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n    },\n    /**\n     * @param {object} config Enhanced versions of all of the responder callbacks\n     * that provide not only the typical `ResponderSyntheticEvent`, but also the\n     * `PanResponder` gesture state.  Simply replace the word `Responder` with\n     * `PanResponder` in each of the typical `onResponder*` callbacks. For\n     * example, the `config` object would look like:\n     *\n     *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onPanResponderReject: (e, gestureState) => {...}`\n     *  - `onPanResponderGrant: (e, gestureState) => {...}`\n     *  - `onPanResponderStart: (e, gestureState) => {...}`\n     *  - `onPanResponderEnd: (e, gestureState) => {...}`\n     *  - `onPanResponderRelease: (e, gestureState) => {...}`\n     *  - `onPanResponderMove: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n     *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n     *\n     *  In general, for events that have capture equivalents, we update the\n     *  gestureState once in the capture phase and can use it in the bubble phase\n     *  as well.\n     *\n     *  Be careful with onStartShould* callbacks. They only reflect updated\n     *  `gestureState` for start/end events that bubble/capture to the Node.\n     *  Once the node is the responder, you can rely on every start/end event\n     *  being processed by the gesture and `gestureState` being updated\n     *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n     *  are the responder.\n     */\n    create: function create(config) {\n      var interactionState = {\n        handle: null\n      };\n      var gestureState = {\n        // Useful for debugging\n        stateID: Math.random(),\n        moveX: 0,\n        moveY: 0,\n        x0: 0,\n        y0: 0,\n        dx: 0,\n        dy: 0,\n        vx: 0,\n        vy: 0,\n        numberActiveTouches: 0,\n        _accountsForMovesUpTo: 0\n      };\n      var panHandlers = {\n        onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n        },\n        onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n        },\n        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n          // TODO: Actually, we should reinitialize the state any time\n          // touches.length increases from 0 active to > 0 active.\n          if (event.nativeEvent.touches.length === 1) {\n            PanResponder._initializeGestureState(gestureState);\n          }\n          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n          var touchHistory = event.touchHistory;\n          // Responder system incorrectly dispatches should* to current responder\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return false;\n          }\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onResponderGrant: function onResponderGrant(event) {\n          if (!interactionState.handle) {\n            interactionState.handle = InteractionManager.createInteractionHandle();\n          }\n          gestureState.x0 = currentCentroidX(event.touchHistory);\n          gestureState.y0 = currentCentroidY(event.touchHistory);\n          gestureState.dx = 0;\n          gestureState.dy = 0;\n          if (config.onPanResponderGrant) {\n            config.onPanResponderGrant(event, gestureState);\n          }\n          // TODO: t7467124 investigate if this can be removed\n          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n        },\n        onResponderReject: function onResponderReject(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n        },\n        onResponderRelease: function onResponderRelease(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderStart: function onResponderStart(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          if (config.onPanResponderStart) {\n            config.onPanResponderStart(event, gestureState);\n          }\n        },\n        onResponderMove: function onResponderMove(event) {\n          var touchHistory = event.touchHistory;\n          // Guard against the dispatch of two touch moves when there are two\n          // simultaneously changed touches.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return;\n          }\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          if (config.onPanResponderMove) {\n            config.onPanResponderMove(event, gestureState);\n          }\n        },\n        onResponderEnd: function onResponderEnd(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n        },\n        onResponderTerminate: function onResponderTerminate(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n        }\n      };\n      return {\n        panHandlers: panHandlers,\n        getInteractionHandle: function getInteractionHandle() {\n          return interactionState.handle;\n        }\n      };\n    }\n  };\n  function clearInteractionHandle(interactionState, callback, event, gestureState) {\n    if (interactionState.handle) {\n      InteractionManager.clearInteractionHandle(interactionState.handle);\n      interactionState.handle = null;\n    }\n    if (callback) {\n      callback(event, gestureState);\n    }\n  }\n  var _default = exports.default = PanResponder;\n});","lineCount":395,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13,"Object"],[14,8,11,13],[14,9,11,13,"defineProperty"],[14,23,11,13],[14,24,11,13,"exports"],[14,31,11,13],[15,4,11,13,"value"],[15,9,11,13],[16,2,11,13],[17,2,11,13,"exports"],[17,9,11,13],[17,10,11,13,"default"],[17,17,11,13],[18,2,15,0],[18,6,15,6,"InteractionManager"],[18,24,15,24],[18,27,15,27,"require"],[18,38,15,34],[18,39,15,34,"_dependencyMap"],[18,53,15,34],[18,80,15,57],[18,81,15,58],[19,2,16,0],[19,6,16,6,"TouchHistoryMath"],[19,22,16,22],[19,25,16,25,"require"],[19,36,16,32],[19,37,16,32,"_dependencyMap"],[19,51,16,32],[19,76,16,53],[19,77,16,54],[20,2,18,0],[20,6,18,6,"currentCentroidXOfTouchesChangedAfter"],[20,43,18,43],[20,46,19,2,"TouchHistoryMath"],[20,62,19,18],[20,63,19,19,"currentCentroidXOfTouchesChangedAfter"],[20,100,19,56],[21,2,20,0],[21,6,20,6,"currentCentroidYOfTouchesChangedAfter"],[21,43,20,43],[21,46,21,2,"TouchHistoryMath"],[21,62,21,18],[21,63,21,19,"currentCentroidYOfTouchesChangedAfter"],[21,100,21,56],[22,2,22,0],[22,6,22,6,"previousCentroidXOfTouchesChangedAfter"],[22,44,22,44],[22,47,23,2,"TouchHistoryMath"],[22,63,23,18],[22,64,23,19,"previousCentroidXOfTouchesChangedAfter"],[22,102,23,57],[23,2,24,0],[23,6,24,6,"previousCentroidYOfTouchesChangedAfter"],[23,44,24,44],[23,47,25,2,"TouchHistoryMath"],[23,63,25,18],[23,64,25,19,"previousCentroidYOfTouchesChangedAfter"],[23,102,25,57],[24,2,26,0],[24,6,26,6,"currentCentroidX"],[24,22,26,22],[24,25,26,25,"TouchHistoryMath"],[24,41,26,41],[24,42,26,42,"currentCentroidX"],[24,58,26,58],[25,2,27,0],[25,6,27,6,"currentCentroidY"],[25,22,27,22],[25,25,27,25,"TouchHistoryMath"],[25,41,27,41],[25,42,27,42,"currentCentroidY"],[25,58,27,58],[27,2,29,0],[28,0,30,0],[29,0,31,0],[30,0,32,0],[31,0,33,0],[32,0,34,0],[33,0,35,0],[34,0,36,0],[35,0,37,0],[36,0,38,0],[37,0,39,0],[38,0,40,0],[39,0,41,0],[40,0,42,0],[41,0,43,0],[42,0,44,0],[43,0,45,0],[44,0,46,0],[45,0,47,0],[46,0,48,0],[47,0,49,0],[48,0,50,0],[49,0,51,0],[50,0,52,0],[51,0,53,0],[52,0,54,0],[53,0,55,0],[54,0,56,0],[55,0,57,0],[56,0,58,0],[57,0,59,0],[58,0,60,0],[59,0,61,0],[60,0,62,0],[61,0,63,0],[62,0,64,0],[63,0,65,0],[64,0,66,0],[65,0,67,0],[66,0,68,0],[67,0,69,0],[68,0,70,0],[69,0,71,0],[70,0,72,0],[71,0,73,0],[72,0,74,0],[73,0,75,0],[74,0,76,0],[75,0,77,0],[76,0,78,0],[77,0,79,0],[78,0,80,0],[79,0,81,0],[80,0,82,0],[81,0,83,0],[82,0,84,0],[83,0,85,0],[84,0,86,0],[85,0,87,0],[86,0,88,0],[87,0,89,0],[88,0,90,0],[89,0,91,0],[90,0,92,0],[91,0,93,0],[92,0,94,0],[93,0,95,0],[94,0,96,0],[95,0,97,0],[96,0,98,0],[97,0,99,0],[98,0,100,0],[99,0,101,0],[100,0,102,0],[101,0,103,0],[102,0,104,0],[103,0,105,0],[104,0,106,0],[105,0,107,0],[106,0,108,0],[107,0,109,0],[108,0,110,0],[109,0,111,0],[110,0,112,0],[111,0,113,0],[112,0,114,0],[113,0,115,0],[114,0,116,0],[115,0,117,0],[116,0,118,0],[117,0,119,0],[118,0,120,0],[119,0,121,0],[120,0,122,0],[121,0,123,0],[122,0,124,0],[123,0,125,0],[125,2,229,0],[125,6,229,6,"PanResponder"],[125,18,229,18],[125,21,229,21],[126,4,230,2],[127,0,231,0],[128,0,232,0],[129,0,233,0],[130,0,234,0],[131,0,235,0],[132,0,236,0],[133,0,237,0],[134,0,238,0],[135,0,239,0],[136,0,240,0],[137,0,241,0],[138,0,242,0],[139,0,243,0],[140,0,244,0],[141,0,245,0],[142,0,246,0],[143,0,247,0],[144,0,248,0],[145,0,249,0],[146,0,250,0],[147,0,251,0],[148,0,252,0],[149,0,253,0],[150,0,254,0],[151,0,255,0],[152,0,256,0],[153,0,257,0],[154,0,258,0],[155,0,259,0],[156,0,260,0],[157,0,261,0],[158,0,262,0],[159,0,263,0],[160,0,264,0],[161,0,265,0],[162,0,266,0],[163,0,267,0],[164,0,268,0],[165,0,269,0],[166,0,270,0],[167,0,271,0],[168,0,272,0],[169,0,273,0],[170,0,274,0],[171,0,275,0],[172,0,276,0],[173,0,277,0],[174,0,278,0],[175,0,279,0],[176,0,280,0],[177,0,281,0],[178,0,282,0],[179,0,283,0],[180,0,284,0],[181,0,285,0],[182,0,286,0],[183,0,287,0],[184,0,288,0],[185,0,289,0],[186,0,290,0],[187,0,291,0],[188,4,293,2,"_initializeGestureState"],[188,27,293,25],[188,38,293,25,"_initializeGestureState"],[188,62,293,26,"gestureState"],[188,74,293,52],[188,76,293,54],[189,6,294,4,"gestureState"],[189,18,294,16],[189,19,294,17,"moveX"],[189,24,294,22],[189,27,294,25],[189,28,294,26],[190,6,295,4,"gestureState"],[190,18,295,16],[190,19,295,17,"moveY"],[190,24,295,22],[190,27,295,25],[190,28,295,26],[191,6,296,4,"gestureState"],[191,18,296,16],[191,19,296,17,"x0"],[191,21,296,19],[191,24,296,22],[191,25,296,23],[192,6,297,4,"gestureState"],[192,18,297,16],[192,19,297,17,"y0"],[192,21,297,19],[192,24,297,22],[192,25,297,23],[193,6,298,4,"gestureState"],[193,18,298,16],[193,19,298,17,"dx"],[193,21,298,19],[193,24,298,22],[193,25,298,23],[194,6,299,4,"gestureState"],[194,18,299,16],[194,19,299,17,"dy"],[194,21,299,19],[194,24,299,22],[194,25,299,23],[195,6,300,4,"gestureState"],[195,18,300,16],[195,19,300,17,"vx"],[195,21,300,19],[195,24,300,22],[195,25,300,23],[196,6,301,4,"gestureState"],[196,18,301,16],[196,19,301,17,"vy"],[196,21,301,19],[196,24,301,22],[196,25,301,23],[197,6,302,4,"gestureState"],[197,18,302,16],[197,19,302,17,"numberActiveTouches"],[197,38,302,36],[197,41,302,39],[197,42,302,40],[198,6,303,4],[199,6,304,4,"gestureState"],[199,18,304,16],[199,19,304,17,"_accountsForMovesUpTo"],[199,40,304,38],[199,43,304,41],[199,44,304,42],[200,4,305,2],[200,5,305,3],[201,4,307,2],[202,0,308,0],[203,0,309,0],[204,0,310,0],[205,0,311,0],[206,0,312,0],[207,0,313,0],[208,0,314,0],[209,0,315,0],[210,0,316,0],[211,0,317,0],[212,0,318,0],[213,0,319,0],[214,0,320,0],[215,0,321,0],[216,0,322,0],[217,0,323,0],[218,0,324,0],[219,0,325,0],[220,0,326,0],[221,0,327,0],[222,0,328,0],[223,0,329,0],[224,0,330,0],[225,4,331,2,"_updateGestureStateOnMove"],[225,29,331,27],[225,40,331,27,"_updateGestureStateOnMove"],[225,66,332,4,"gestureState"],[225,78,332,30],[225,80,333,4,"touchHistory"],[225,92,333,59],[225,94,334,4],[226,6,335,4,"gestureState"],[226,18,335,16],[226,19,335,17,"numberActiveTouches"],[226,38,335,36],[226,41,335,39,"touchHistory"],[226,53,335,51],[226,54,335,52,"numberActiveTouches"],[226,73,335,71],[227,6,336,4,"gestureState"],[227,18,336,16],[227,19,336,17,"moveX"],[227,24,336,22],[227,27,336,25,"currentCentroidXOfTouchesChangedAfter"],[227,64,336,62],[227,65,337,6,"touchHistory"],[227,77,337,18],[227,79,338,6,"gestureState"],[227,91,338,18],[227,92,338,19,"_accountsForMovesUpTo"],[227,113,339,4],[227,114,339,5],[228,6,340,4,"gestureState"],[228,18,340,16],[228,19,340,17,"moveY"],[228,24,340,22],[228,27,340,25,"currentCentroidYOfTouchesChangedAfter"],[228,64,340,62],[228,65,341,6,"touchHistory"],[228,77,341,18],[228,79,342,6,"gestureState"],[228,91,342,18],[228,92,342,19,"_accountsForMovesUpTo"],[228,113,343,4],[228,114,343,5],[229,6,344,4],[229,10,344,10,"movedAfter"],[229,20,344,20],[229,23,344,23,"gestureState"],[229,35,344,35],[229,36,344,36,"_accountsForMovesUpTo"],[229,57,344,57],[230,6,345,4],[230,10,345,10,"prevX"],[230,15,345,15],[230,18,345,18,"previousCentroidXOfTouchesChangedAfter"],[230,56,345,56],[230,57,346,6,"touchHistory"],[230,69,346,18],[230,71,347,6,"movedAfter"],[230,81,348,4],[230,82,348,5],[231,6,349,4],[231,10,349,10,"x"],[231,11,349,11],[231,14,349,14,"currentCentroidXOfTouchesChangedAfter"],[231,51,349,51],[231,52,349,52,"touchHistory"],[231,64,349,64],[231,66,349,66,"movedAfter"],[231,76,349,76],[231,77,349,77],[232,6,350,4],[232,10,350,10,"prevY"],[232,15,350,15],[232,18,350,18,"previousCentroidYOfTouchesChangedAfter"],[232,56,350,56],[232,57,351,6,"touchHistory"],[232,69,351,18],[232,71,352,6,"movedAfter"],[232,81,353,4],[232,82,353,5],[233,6,354,4],[233,10,354,10,"y"],[233,11,354,11],[233,14,354,14,"currentCentroidYOfTouchesChangedAfter"],[233,51,354,51],[233,52,354,52,"touchHistory"],[233,64,354,64],[233,66,354,66,"movedAfter"],[233,76,354,76],[233,77,354,77],[234,6,355,4],[234,10,355,10,"nextDX"],[234,16,355,16],[234,19,355,19,"gestureState"],[234,31,355,31],[234,32,355,32,"dx"],[234,34,355,34],[234,38,355,38,"x"],[234,39,355,39],[234,42,355,42,"prevX"],[234,47,355,47],[234,48,355,48],[235,6,356,4],[235,10,356,10,"nextDY"],[235,16,356,16],[235,19,356,19,"gestureState"],[235,31,356,31],[235,32,356,32,"dy"],[235,34,356,34],[235,38,356,38,"y"],[235,39,356,39],[235,42,356,42,"prevY"],[235,47,356,47],[235,48,356,48],[237,6,358,4],[238,6,359,4],[238,10,359,10,"dt"],[238,12,359,12],[238,15,360,6,"touchHistory"],[238,27,360,18],[238,28,360,19,"mostRecentTimeStamp"],[238,47,360,38],[238,50,360,41,"gestureState"],[238,62,360,53],[238,63,360,54,"_accountsForMovesUpTo"],[238,84,360,75],[239,6,361,4,"gestureState"],[239,18,361,16],[239,19,361,17,"vx"],[239,21,361,19],[239,24,361,22],[239,25,361,23,"nextDX"],[239,31,361,29],[239,34,361,32,"gestureState"],[239,46,361,44],[239,47,361,45,"dx"],[239,49,361,47],[239,53,361,51,"dt"],[239,55,361,53],[240,6,362,4,"gestureState"],[240,18,362,16],[240,19,362,17,"vy"],[240,21,362,19],[240,24,362,22],[240,25,362,23,"nextDY"],[240,31,362,29],[240,34,362,32,"gestureState"],[240,46,362,44],[240,47,362,45,"dy"],[240,49,362,47],[240,53,362,51,"dt"],[240,55,362,53],[241,6,364,4,"gestureState"],[241,18,364,16],[241,19,364,17,"dx"],[241,21,364,19],[241,24,364,22,"nextDX"],[241,30,364,28],[242,6,365,4,"gestureState"],[242,18,365,16],[242,19,365,17,"dy"],[242,21,365,19],[242,24,365,22,"nextDY"],[242,30,365,28],[243,6,366,4,"gestureState"],[243,18,366,16],[243,19,366,17,"_accountsForMovesUpTo"],[243,40,366,38],[243,43,366,41,"touchHistory"],[243,55,366,53],[243,56,366,54,"mostRecentTimeStamp"],[243,75,366,73],[244,4,367,2],[244,5,367,3],[245,4,369,2],[246,0,370,0],[247,0,371,0],[248,0,372,0],[249,0,373,0],[250,0,374,0],[251,0,375,0],[252,0,376,0],[253,0,377,0],[254,0,378,0],[255,0,379,0],[256,0,380,0],[257,0,381,0],[258,0,382,0],[259,0,383,0],[260,0,384,0],[261,0,385,0],[262,0,386,0],[263,0,387,0],[264,0,388,0],[265,0,389,0],[266,0,390,0],[267,0,391,0],[268,0,392,0],[269,0,393,0],[270,0,394,0],[271,0,395,0],[272,0,396,0],[273,0,397,0],[274,0,398,0],[275,0,399,0],[276,0,400,0],[277,4,401,2,"create"],[277,10,401,8],[277,21,401,8,"create"],[277,28,401,9,"config"],[277,34,401,35],[277,36,404,4],[278,6,405,4],[278,10,405,10,"interactionState"],[278,26,405,26],[278,29,405,29],[279,8,406,6,"handle"],[279,14,406,12],[279,16,406,15],[280,6,407,4],[280,7,407,5],[281,6,408,4],[281,10,408,10,"gestureState"],[281,22,408,36],[281,25,408,39],[282,8,409,6],[283,8,410,6,"stateID"],[283,15,410,13],[283,17,410,15,"Math"],[283,21,410,19],[283,22,410,20,"random"],[283,28,410,26],[283,29,410,27],[283,30,410,28],[284,8,411,6,"moveX"],[284,13,411,11],[284,15,411,13],[284,16,411,14],[285,8,412,6,"moveY"],[285,13,412,11],[285,15,412,13],[285,16,412,14],[286,8,413,6,"x0"],[286,10,413,8],[286,12,413,10],[286,13,413,11],[287,8,414,6,"y0"],[287,10,414,8],[287,12,414,10],[287,13,414,11],[288,8,415,6,"dx"],[288,10,415,8],[288,12,415,10],[288,13,415,11],[289,8,416,6,"dy"],[289,10,416,8],[289,12,416,10],[289,13,416,11],[290,8,417,6,"vx"],[290,10,417,8],[290,12,417,10],[290,13,417,11],[291,8,418,6,"vy"],[291,10,418,8],[291,12,418,10],[291,13,418,11],[292,8,419,6,"numberActiveTouches"],[292,27,419,25],[292,29,419,27],[292,30,419,28],[293,8,420,6,"_accountsForMovesUpTo"],[293,29,420,27],[293,31,420,29],[294,6,421,4],[294,7,421,5],[295,6,422,4],[295,10,422,10,"panHandlers"],[295,21,422,21],[295,24,422,24],[296,8,423,6,"onStartShouldSetResponder"],[296,33,423,31],[296,44,423,31,"onStartShouldSetResponder"],[296,70,423,32,"event"],[296,75,423,49],[296,77,423,60],[297,10,424,8],[297,17,424,15,"config"],[297,23,424,21],[297,24,424,22,"onStartShouldSetPanResponder"],[297,52,424,50],[297,56,424,54],[297,60,424,58],[297,63,425,12],[297,68,425,17],[297,71,426,12,"config"],[297,77,426,18],[297,78,426,19,"onStartShouldSetPanResponder"],[297,106,426,47],[297,107,426,48,"event"],[297,112,426,53],[297,114,426,55,"gestureState"],[297,126,426,67],[297,127,426,68],[298,8,427,6],[298,9,427,7],[299,8,428,6,"onMoveShouldSetResponder"],[299,32,428,30],[299,43,428,30,"onMoveShouldSetResponder"],[299,68,428,31,"event"],[299,73,428,48],[299,75,428,59],[300,10,429,8],[300,17,429,15,"config"],[300,23,429,21],[300,24,429,22,"onMoveShouldSetPanResponder"],[300,51,429,49],[300,55,429,53],[300,59,429,57],[300,62,430,12],[300,67,430,17],[300,70,431,12,"config"],[300,76,431,18],[300,77,431,19,"onMoveShouldSetPanResponder"],[300,104,431,46],[300,105,431,47,"event"],[300,110,431,52],[300,112,431,54,"gestureState"],[300,124,431,66],[300,125,431,67],[301,8,432,6],[301,9,432,7],[302,8,433,6,"onStartShouldSetResponderCapture"],[302,40,433,38],[302,51,433,38,"onStartShouldSetResponderCapture"],[302,84,433,39,"event"],[302,89,433,56],[302,91,433,67],[303,10,434,8],[304,10,435,8],[305,10,436,8],[305,14,436,12,"event"],[305,19,436,17],[305,20,436,18,"nativeEvent"],[305,31,436,29],[305,32,436,30,"touches"],[305,39,436,37],[305,40,436,38,"length"],[305,46,436,44],[305,51,436,49],[305,52,436,50],[305,54,436,52],[306,12,437,10,"PanResponder"],[306,24,437,22],[306,25,437,23,"_initializeGestureState"],[306,48,437,46],[306,49,437,47,"gestureState"],[306,61,437,59],[306,62,437,60],[307,10,438,8],[308,10,439,8,"gestureState"],[308,22,439,20],[308,23,439,21,"numberActiveTouches"],[308,42,439,40],[308,45,440,10,"event"],[308,50,440,15],[308,51,440,16,"touchHistory"],[308,63,440,28],[308,64,440,29,"numberActiveTouches"],[308,83,440,48],[309,10,441,8],[309,17,441,15,"config"],[309,23,441,21],[309,24,441,22,"onStartShouldSetPanResponderCapture"],[309,59,441,57],[309,63,441,61],[309,67,441,65],[309,70,442,12,"config"],[309,76,442,18],[309,77,442,19,"onStartShouldSetPanResponderCapture"],[309,112,442,54],[309,113,442,55,"event"],[309,118,442,60],[309,120,442,62,"gestureState"],[309,132,442,74],[309,133,442,75],[309,136,443,12],[309,141,443,17],[310,8,444,6],[310,9,444,7],[311,8,446,6,"onMoveShouldSetResponderCapture"],[311,39,446,37],[311,50,446,37,"onMoveShouldSetResponderCapture"],[311,82,446,38,"event"],[311,87,446,55],[311,89,446,66],[312,10,447,8],[312,14,447,14,"touchHistory"],[312,26,447,26],[312,29,447,29,"event"],[312,34,447,34],[312,35,447,35,"touchHistory"],[312,47,447,47],[313,10,448,8],[314,10,449,8],[315,10,450,8],[316,10,451,8],[316,14,452,10,"gestureState"],[316,26,452,22],[316,27,452,23,"_accountsForMovesUpTo"],[316,48,452,44],[316,53,453,10,"touchHistory"],[316,65,453,22],[316,66,453,23,"mostRecentTimeStamp"],[316,85,453,42],[316,87,454,10],[317,12,455,10],[317,19,455,17],[317,24,455,22],[318,10,456,8],[319,10,457,8,"PanResponder"],[319,22,457,20],[319,23,457,21,"_updateGestureStateOnMove"],[319,48,457,46],[319,49,457,47,"gestureState"],[319,61,457,59],[319,63,457,61,"touchHistory"],[319,75,457,73],[319,76,457,74],[320,10,458,8],[320,17,458,15,"config"],[320,23,458,21],[320,24,458,22,"onMoveShouldSetPanResponderCapture"],[320,58,458,56],[320,61,459,12,"config"],[320,67,459,18],[320,68,459,19,"onMoveShouldSetPanResponderCapture"],[320,102,459,53],[320,103,459,54,"event"],[320,108,459,59],[320,110,459,61,"gestureState"],[320,122,459,73],[320,123,459,74],[320,126,460,12],[320,131,460,17],[321,8,461,6],[321,9,461,7],[322,8,463,6,"onResponderGrant"],[322,24,463,22],[322,35,463,22,"onResponderGrant"],[322,52,463,23,"event"],[322,57,463,40],[322,59,463,51],[323,10,464,8],[323,14,464,12],[323,15,464,13,"interactionState"],[323,31,464,29],[323,32,464,30,"handle"],[323,38,464,36],[323,40,464,38],[324,12,465,10,"interactionState"],[324,28,465,26],[324,29,465,27,"handle"],[324,35,465,33],[324,38,466,12,"InteractionManager"],[324,56,466,30],[324,57,466,31,"createInteractionHandle"],[324,80,466,54],[324,81,466,55],[324,82,466,56],[325,10,467,8],[326,10,468,8,"gestureState"],[326,22,468,20],[326,23,468,21,"x0"],[326,25,468,23],[326,28,468,26,"currentCentroidX"],[326,44,468,42],[326,45,468,43,"event"],[326,50,468,48],[326,51,468,49,"touchHistory"],[326,63,468,61],[326,64,468,62],[327,10,469,8,"gestureState"],[327,22,469,20],[327,23,469,21,"y0"],[327,25,469,23],[327,28,469,26,"currentCentroidY"],[327,44,469,42],[327,45,469,43,"event"],[327,50,469,48],[327,51,469,49,"touchHistory"],[327,63,469,61],[327,64,469,62],[328,10,470,8,"gestureState"],[328,22,470,20],[328,23,470,21,"dx"],[328,25,470,23],[328,28,470,26],[328,29,470,27],[329,10,471,8,"gestureState"],[329,22,471,20],[329,23,471,21,"dy"],[329,25,471,23],[329,28,471,26],[329,29,471,27],[330,10,472,8],[330,14,472,12,"config"],[330,20,472,18],[330,21,472,19,"onPanResponderGrant"],[330,40,472,38],[330,42,472,40],[331,12,473,10,"config"],[331,18,473,16],[331,19,473,17,"onPanResponderGrant"],[331,38,473,36],[331,39,473,37,"event"],[331,44,473,42],[331,46,473,44,"gestureState"],[331,58,473,56],[331,59,473,57],[332,10,474,8],[333,10,475,8],[334,10,476,8],[334,17,476,15,"config"],[334,23,476,21],[334,24,476,22,"onShouldBlockNativeResponder"],[334,52,476,50],[334,56,476,54],[334,60,476,58],[334,63,477,12],[334,67,477,16],[334,70,478,12,"config"],[334,76,478,18],[334,77,478,19,"onShouldBlockNativeResponder"],[334,105,478,47],[334,106,478,48,"event"],[334,111,478,53],[334,113,478,55,"gestureState"],[334,125,478,67],[334,126,478,68],[335,8,479,6],[335,9,479,7],[336,8,481,6,"onResponderReject"],[336,25,481,23],[336,36,481,23,"onResponderReject"],[336,54,481,24,"event"],[336,59,481,41],[336,61,481,49],[337,10,482,8,"clearInteractionHandle"],[337,32,482,30],[337,33,483,10,"interactionState"],[337,49,483,26],[337,51,484,10,"config"],[337,57,484,16],[337,58,484,17,"onPanResponderReject"],[337,78,484,37],[337,80,485,10,"event"],[337,85,485,15],[337,87,486,10,"gestureState"],[337,99,487,8],[337,100,487,9],[338,8,488,6],[338,9,488,7],[339,8,490,6,"onResponderRelease"],[339,26,490,24],[339,37,490,24,"onResponderRelease"],[339,56,490,25,"event"],[339,61,490,42],[339,63,490,50],[340,10,491,8,"clearInteractionHandle"],[340,32,491,30],[340,33,492,10,"interactionState"],[340,49,492,26],[340,51,493,10,"config"],[340,57,493,16],[340,58,493,17,"onPanResponderRelease"],[340,79,493,38],[340,81,494,10,"event"],[340,86,494,15],[340,88,495,10,"gestureState"],[340,100,496,8],[340,101,496,9],[341,10,497,8,"PanResponder"],[341,22,497,20],[341,23,497,21,"_initializeGestureState"],[341,46,497,44],[341,47,497,45,"gestureState"],[341,59,497,57],[341,60,497,58],[342,8,498,6],[342,9,498,7],[343,8,500,6,"onResponderStart"],[343,24,500,22],[343,35,500,22,"onResponderStart"],[343,52,500,23,"event"],[343,57,500,40],[343,59,500,48],[344,10,501,8],[344,14,501,14,"touchHistory"],[344,26,501,26],[344,29,501,29,"event"],[344,34,501,34],[344,35,501,35,"touchHistory"],[344,47,501,47],[345,10,502,8,"gestureState"],[345,22,502,20],[345,23,502,21,"numberActiveTouches"],[345,42,502,40],[345,45,502,43,"touchHistory"],[345,57,502,55],[345,58,502,56,"numberActiveTouches"],[345,77,502,75],[346,10,503,8],[346,14,503,12,"config"],[346,20,503,18],[346,21,503,19,"onPanResponderStart"],[346,40,503,38],[346,42,503,40],[347,12,504,10,"config"],[347,18,504,16],[347,19,504,17,"onPanResponderStart"],[347,38,504,36],[347,39,504,37,"event"],[347,44,504,42],[347,46,504,44,"gestureState"],[347,58,504,56],[347,59,504,57],[348,10,505,8],[349,8,506,6],[349,9,506,7],[350,8,508,6,"onResponderMove"],[350,23,508,21],[350,34,508,21,"onResponderMove"],[350,50,508,22,"event"],[350,55,508,39],[350,57,508,47],[351,10,509,8],[351,14,509,14,"touchHistory"],[351,26,509,26],[351,29,509,29,"event"],[351,34,509,34],[351,35,509,35,"touchHistory"],[351,47,509,47],[352,10,510,8],[353,10,511,8],[354,10,512,8],[354,14,513,10,"gestureState"],[354,26,513,22],[354,27,513,23,"_accountsForMovesUpTo"],[354,48,513,44],[354,53,514,10,"touchHistory"],[354,65,514,22],[354,66,514,23,"mostRecentTimeStamp"],[354,85,514,42],[354,87,515,10],[355,12,516,10],[356,10,517,8],[357,10,518,8],[358,10,519,8],[359,10,520,8,"PanResponder"],[359,22,520,20],[359,23,520,21,"_updateGestureStateOnMove"],[359,48,520,46],[359,49,520,47,"gestureState"],[359,61,520,59],[359,63,520,61,"touchHistory"],[359,75,520,73],[359,76,520,74],[360,10,521,8],[360,14,521,12,"config"],[360,20,521,18],[360,21,521,19,"onPanResponderMove"],[360,39,521,37],[360,41,521,39],[361,12,522,10,"config"],[361,18,522,16],[361,19,522,17,"onPanResponderMove"],[361,37,522,35],[361,38,522,36,"event"],[361,43,522,41],[361,45,522,43,"gestureState"],[361,57,522,55],[361,58,522,56],[362,10,523,8],[363,8,524,6],[363,9,524,7],[364,8,526,6,"onResponderEnd"],[364,22,526,20],[364,33,526,20,"onResponderEnd"],[364,48,526,21,"event"],[364,53,526,38],[364,55,526,46],[365,10,527,8],[365,14,527,14,"touchHistory"],[365,26,527,26],[365,29,527,29,"event"],[365,34,527,34],[365,35,527,35,"touchHistory"],[365,47,527,47],[366,10,528,8,"gestureState"],[366,22,528,20],[366,23,528,21,"numberActiveTouches"],[366,42,528,40],[366,45,528,43,"touchHistory"],[366,57,528,55],[366,58,528,56,"numberActiveTouches"],[366,77,528,75],[367,10,529,8,"clearInteractionHandle"],[367,32,529,30],[367,33,530,10,"interactionState"],[367,49,530,26],[367,51,531,10,"config"],[367,57,531,16],[367,58,531,17,"onPanResponderEnd"],[367,75,531,34],[367,77,532,10,"event"],[367,82,532,15],[367,84,533,10,"gestureState"],[367,96,534,8],[367,97,534,9],[368,8,535,6],[368,9,535,7],[369,8,537,6,"onResponderTerminate"],[369,28,537,26],[369,39,537,26,"onResponderTerminate"],[369,60,537,27,"event"],[369,65,537,44],[369,67,537,52],[370,10,538,8,"clearInteractionHandle"],[370,32,538,30],[370,33,539,10,"interactionState"],[370,49,539,26],[370,51,540,10,"config"],[370,57,540,16],[370,58,540,17,"onPanResponderTerminate"],[370,81,540,40],[370,83,541,10,"event"],[370,88,541,15],[370,90,542,10,"gestureState"],[370,102,543,8],[370,103,543,9],[371,10,544,8,"PanResponder"],[371,22,544,20],[371,23,544,21,"_initializeGestureState"],[371,46,544,44],[371,47,544,45,"gestureState"],[371,59,544,57],[371,60,544,58],[372,8,545,6],[372,9,545,7],[373,8,547,6,"onResponderTerminationRequest"],[373,37,547,35],[373,48,547,35,"onResponderTerminationRequest"],[373,78,547,36,"event"],[373,83,547,53],[373,85,547,64],[374,10,548,8],[374,17,548,15,"config"],[374,23,548,21],[374,24,548,22,"onPanResponderTerminationRequest"],[374,56,548,54],[374,60,548,58],[374,64,548,62],[374,67,549,12],[374,71,549,16],[374,74,550,12,"config"],[374,80,550,18],[374,81,550,19,"onPanResponderTerminationRequest"],[374,113,550,51],[374,114,550,52,"event"],[374,119,550,57],[374,121,550,59,"gestureState"],[374,133,550,71],[374,134,550,72],[375,8,551,6],[376,6,552,4],[376,7,552,5],[377,6,553,4],[377,13,553,11],[378,8,554,6,"panHandlers"],[378,19,554,17],[378,21,554,6,"panHandlers"],[378,32,554,17],[379,8,555,6,"getInteractionHandle"],[379,28,555,26],[379,39,555,26,"getInteractionHandle"],[379,60,555,26],[379,62,555,38],[380,10,556,8],[380,17,556,15,"interactionState"],[380,33,556,31],[380,34,556,32,"handle"],[380,40,556,38],[381,8,557,6],[382,6,558,4],[382,7,558,5],[383,4,559,2],[384,2,560,0],[384,3,560,1],[385,2,562,0],[385,11,562,9,"clearInteractionHandle"],[385,33,562,31,"clearInteractionHandle"],[385,34,563,2,"interactionState"],[385,50,563,42],[385,52,564,2,"callback"],[385,60,564,47],[385,62,565,2,"event"],[385,67,565,19],[385,69,566,2,"gestureState"],[385,81,566,28],[385,83,567,2],[386,4,568,2],[386,8,568,6,"interactionState"],[386,24,568,22],[386,25,568,23,"handle"],[386,31,568,29],[386,33,568,31],[387,6,569,4,"InteractionManager"],[387,24,569,22],[387,25,569,23,"clearInteractionHandle"],[387,47,569,45],[387,48,569,46,"interactionState"],[387,64,569,62],[387,65,569,63,"handle"],[387,71,569,69],[387,72,569,70],[388,6,570,4,"interactionState"],[388,22,570,20],[388,23,570,21,"handle"],[388,29,570,27],[388,32,570,30],[388,36,570,34],[389,4,571,2],[390,4,572,2],[390,8,572,6,"callback"],[390,16,572,14],[390,18,572,16],[391,6,573,4,"callback"],[391,14,573,12],[391,15,573,13,"event"],[391,20,573,18],[391,22,573,20,"gestureState"],[391,34,573,32],[391,35,573,33],[392,4,574,2],[393,2,575,0],[394,2,575,1],[394,6,575,1,"_default"],[394,14,575,1],[394,17,575,1,"exports"],[394,24,575,1],[394,25,575,1,"default"],[394,32,575,1],[394,35,582,15,"PanResponder"],[394,47,582,27],[395,0,582,27]],"functionMap":{"names":["<global>","_initializeGestureState","_updateGestureStateOnMove","create","panHandlers.onStartShouldSetResponder","panHandlers.onMoveShouldSetResponder","panHandlers.onStartShouldSetResponderCapture","panHandlers.onMoveShouldSetResponderCapture","panHandlers.onResponderGrant","panHandlers.onResponderReject","panHandlers.onResponderRelease","panHandlers.onResponderStart","panHandlers.onResponderMove","panHandlers.onResponderEnd","panHandlers.onResponderTerminate","panHandlers.onResponderTerminationRequest","getInteractionHandle","clearInteractionHandle"],"mappings":"AAA;ECoS;GDY;EE0B;GFoC;EGkC;MCsB;ODI;MEC;OFI;MGC;OHW;MIE;OJe;MKE;OLgB;MME;ONO;MOE;OPQ;MQE;ORM;MSE;OTgB;MUE;OVS;MWE;OXQ;MYE;OZI;MaI;ObE;GHE;AiBG;CjBa"}},"type":"js/module"}]}