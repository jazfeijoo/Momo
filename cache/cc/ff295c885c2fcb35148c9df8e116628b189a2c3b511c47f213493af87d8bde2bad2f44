{"dependencies":[{"name":"./DeprecatedEdgeInsetsPropType","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":37,"index":256},"end":{"line":12,"column":78,"index":297}}],"key":"TAZhJFlictNbtxGjiTkwdmr9/r4="}},{"name":"./DeprecatedStyleSheetPropType","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":37,"index":336},"end":{"line":13,"column":78,"index":377}}],"key":"uQUnPJOF7MZaV30YtyO9cRlG9PM="}},{"name":"./DeprecatedViewStylePropTypes","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":37,"index":416},"end":{"line":14,"column":78,"index":457}}],"key":"c20NjbVZ5xJoAtnBjIyJnixKe1c="}},{"name":"prop-types","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":18,"index":477},"end":{"line":15,"column":39,"index":498}}],"key":"0QkAoYuDjW/0kvohReP6Efk+sBk="}},{"name":"./DeprecatedViewAccessibility","data":{"asyncType":null,"locs":[{"start":{"line":17,"column":39,"index":540},"end":{"line":17,"column":79,"index":580}}],"key":"B2wkoKBeIpwA2cwKcx5ag6xYpig="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   */\n\n  'use strict';\n\n  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[0], \"./DeprecatedEdgeInsetsPropType\");\n  var DeprecatedStyleSheetPropType = _$$_REQUIRE(_dependencyMap[1], \"./DeprecatedStyleSheetPropType\");\n  var DeprecatedViewStylePropTypes = _$$_REQUIRE(_dependencyMap[2], \"./DeprecatedViewStylePropTypes\");\n  var PropTypes = _$$_REQUIRE(_dependencyMap[3], \"prop-types\");\n  var _require = _$$_REQUIRE(_dependencyMap[4], \"./DeprecatedViewAccessibility\"),\n    DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles;\n  var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);\n  module.exports = {\n    /**\n     * When `true`, indicates that the view is an accessibility element.\n     * By default, all the touchable elements are accessible.\n     *\n     * See https://reactnative.dev/docs/view.html#accessible\n     */\n    accessible: PropTypes.bool,\n    /**\n     * Overrides the text that's read by the screen reader when the user interacts\n     * with the element. By default, the label is constructed by traversing all\n     * the children and accumulating all the `Text` nodes separated by space.\n     *\n     * See https://reactnative.dev/docs/view.html#accessibilitylabel\n     */\n    accessibilityLabel: PropTypes.node,\n    /**\n     * An accessibility hint helps users understand what will happen when they perform\n     * an action on the accessibility element when that result is not obvious from the\n     * accessibility label.\n     *\n     *\n     * See https://reactnative.dev/docs/view.html#accessibilityHint\n     */\n    accessibilityHint: PropTypes.string,\n    /**\n     * Provides an array of custom actions available for accessibility.\n     *\n     * @platform ios\n     */\n    accessibilityActions: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * Prevents view from being inverted if set to true and color inversion is turned on.\n     *\n     * @platform ios\n     */\n    accessibilityIgnoresInvertColors: PropTypes.bool,\n    /**\n     * Indicates to accessibility services to treat UI component like a specific role.\n     */\n    accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),\n    accessibilityState: PropTypes.object,\n    accessibilityValue: PropTypes.object,\n    /**\n     * Indicates to accessibility services whether the user should be notified\n     * when this view changes. Works for Android API >= 19 only.\n     *\n     * @platform android\n     *\n     * See https://reactnative.dev/docs/view.html#accessibilityliveregion\n     */\n    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),\n    /**\n     * Controls how view is important for accessibility which is if it\n     * fires accessibility events and if it is reported to accessibility services\n     * that query the screen. Works for Android only.\n     *\n     * @platform android\n     *\n     * See https://reactnative.dev/docs/view.html#importantforaccessibility\n     */\n    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),\n    /**\n     * A value indicating whether VoiceOver should ignore the elements\n     * within views that are siblings of the receiver.\n     * Default is `false`.\n     *\n     * @platform ios\n     *\n     * See https://reactnative.dev/docs/view.html#accessibilityviewismodal\n     */\n    accessibilityViewIsModal: PropTypes.bool,\n    /**\n     * A value indicating whether the accessibility elements contained within\n     * this accessibility element are hidden.\n     *\n     * @platform ios\n     *\n     * See https://reactnative.dev/docs/view.html#accessibilityElementsHidden\n     */\n    accessibilityElementsHidden: PropTypes.bool,\n    /**\n     * When `accessible` is true, the system will try to invoke this function\n     * when the user performs an accessibility custom action.\n     *\n     * @platform ios\n     */\n    onAccessibilityAction: PropTypes.func,\n    /**\n     * When `accessible` is true, the system will try to invoke this function\n     * when the user performs accessibility tap gesture.\n     *\n     * See https://reactnative.dev/docs/view.html#onaccessibilitytap\n     */\n    onAccessibilityTap: PropTypes.func,\n    /**\n     * When `accessible` is `true`, the system will invoke this function when the\n     * user performs the magic tap gesture.\n     *\n     * See https://reactnative.dev/docs/view.html#onmagictap\n     */\n    onMagicTap: PropTypes.func,\n    /**\n     * Used to locate this view in end-to-end tests.\n     *\n     * > This disables the 'layout-only view removal' optimization for this view!\n     *\n     * See https://reactnative.dev/docs/view.html#testid\n     */\n    testID: PropTypes.string,\n    /**\n     * Used to locate this view from native classes.\n     *\n     * > This disables the 'layout-only view removal' optimization for this view!\n     *\n     * See https://reactnative.dev/docs/view.html#nativeid\n     */\n    nativeID: PropTypes.string,\n    /**\n     * For most touch interactions, you'll simply want to wrap your component in\n     * `TouchableHighlight` or `TouchableOpacity`. Check out `Touchable.js`,\n     * `ScrollResponder.js` and `ResponderEventPlugin.js` for more discussion.\n     */\n\n    /**\n     * The View is now responding for touch events. This is the time to highlight\n     * and show the user what is happening.\n     *\n     * `View.props.onResponderGrant: (event) => {}`, where `event` is a synthetic\n     * touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onrespondergrant\n     */\n    onResponderGrant: PropTypes.func,\n    /**\n     * The user is moving their finger.\n     *\n     * `View.props.onResponderMove: (event) => {}`, where `event` is a synthetic\n     * touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onrespondermove\n     */\n    onResponderMove: PropTypes.func,\n    /**\n     * Another responder is already active and will not release it to that `View`\n     * asking to be the responder.\n     *\n     * `View.props.onResponderReject: (event) => {}`, where `event` is a\n     * synthetic touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onresponderreject\n     */\n    onResponderReject: PropTypes.func,\n    /**\n     * Fired at the end of the touch.\n     *\n     * `View.props.onResponderRelease: (event) => {}`, where `event` is a\n     * synthetic touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onresponderrelease\n     */\n    onResponderRelease: PropTypes.func,\n    /**\n     * The responder has been taken from the `View`. Might be taken by other\n     * views after a call to `onResponderTerminationRequest`, or might be taken\n     * by the OS without asking (e.g., happens with control center/ notification\n     * center on iOS)\n     *\n     * `View.props.onResponderTerminate: (event) => {}`, where `event` is a\n     * synthetic touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onresponderterminate\n     */\n    onResponderTerminate: PropTypes.func,\n    /**\n     * Some other `View` wants to become responder and is asking this `View` to\n     * release its responder. Returning `true` allows its release.\n     *\n     * `View.props.onResponderTerminationRequest: (event) => {}`, where `event`\n     * is a synthetic touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onresponderterminationrequest\n     */\n    onResponderTerminationRequest: PropTypes.func,\n    /**\n     * Does this view want to become responder on the start of a touch?\n     *\n     * `View.props.onStartShouldSetResponder: (event) => [true | false]`, where\n     * `event` is a synthetic touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onstartshouldsetresponder\n     */\n    onStartShouldSetResponder: PropTypes.func,\n    /**\n     * If a parent `View` wants to prevent a child `View` from becoming responder\n     * on a touch start, it should have this handler which returns `true`.\n     *\n     * `View.props.onStartShouldSetResponderCapture: (event) => [true | false]`,\n     * where `event` is a synthetic touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onstartshouldsetrespondercapture\n     */\n    onStartShouldSetResponderCapture: PropTypes.func,\n    /**\n     * Does this view want to \"claim\" touch responsiveness? This is called for\n     * every touch move on the `View` when it is not the responder.\n     *\n     * `View.props.onMoveShouldSetResponder: (event) => [true | false]`, where\n     * `event` is a synthetic touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onmoveshouldsetresponder\n     */\n    onMoveShouldSetResponder: PropTypes.func,\n    /**\n     * If a parent `View` wants to prevent a child `View` from becoming responder\n     * on a move, it should have this handler which returns `true`.\n     *\n     * `View.props.onMoveShouldSetResponderCapture: (event) => [true | false]`,\n     * where `event` is a synthetic touch event as described above.\n     *\n     * See https://reactnative.dev/docs/view.html#onMoveShouldsetrespondercapture\n     */\n    onMoveShouldSetResponderCapture: PropTypes.func,\n    /**\n     * This defines how far a touch event can start away from the view.\n     * Typical interface guidelines recommend touch targets that are at least\n     * 30 - 40 points/density-independent pixels.\n     *\n     * > The touch area never extends past the parent view bounds and the Z-index\n     * > of sibling views always takes precedence if a touch hits two overlapping\n     * > views.\n     *\n     * See https://reactnative.dev/docs/view.html#hitslop\n     */\n    hitSlop: DeprecatedEdgeInsetsPropType,\n    /**\n     * Invoked on mount and layout changes with:\n     *\n     * `{nativeEvent: { layout: {x, y, width, height}}}`\n     *\n     * This event is fired immediately once the layout has been calculated, but\n     * the new layout may not yet be reflected on the screen at the time the\n     * event is received, especially if a layout animation is in progress.\n     *\n     * See https://reactnative.dev/docs/view.html#onlayout\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Controls whether the `View` can be the target of touch events.\n     *\n     * See https://reactnative.dev/docs/view.html#pointerevents\n     */\n    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),\n    /**\n     * See https://reactnative.dev/docs/style.html\n     */\n    style: stylePropType,\n    /**\n     * This is a special performance property exposed by `RCTView` and is useful\n     * for scrolling content when there are many subviews, most of which are\n     * offscreen. For this property to be effective, it must be applied to a\n     * view that contains many subviews that extend outside its bound. The\n     * subviews must also have `overflow: hidden`, as should the containing view\n     * (or one of its superviews).\n     *\n     * See https://reactnative.dev/docs/view.html#removeclippedsubviews\n     */\n    removeClippedSubviews: PropTypes.bool,\n    /**\n     * Whether this `View` should render itself (and all of its children) into a\n     * single hardware texture on the GPU.\n     *\n     * @platform android\n     *\n     * See https://reactnative.dev/docs/view.html#rendertohardwaretextureandroid\n     */\n    renderToHardwareTextureAndroid: PropTypes.bool,\n    /**\n     * Whether this `View` should be rendered as a bitmap before compositing.\n     *\n     * @platform ios\n     *\n     * See https://reactnative.dev/docs/view.html#shouldrasterizeios\n     */\n    shouldRasterizeIOS: PropTypes.bool,\n    /**\n     * Views that are only used to layout their children or otherwise don't draw\n     * anything may be automatically removed from the native hierarchy as an\n     * optimization. Set this property to `false` to disable this optimization and\n     * ensure that this `View` exists in the native view hierarchy.\n     *\n     * @platform android\n     *\n     * See https://reactnative.dev/docs/view.html#collapsable\n     */\n    collapsable: PropTypes.bool,\n    /**\n     * Whether this `View` needs to rendered offscreen and composited with an\n     * alpha in order to preserve 100% correct colors and blending behavior.\n     *\n     * @platform android\n     *\n     * See https://reactnative.dev/docs/view.html#needsoffscreenalphacompositing\n     */\n    needsOffscreenAlphaCompositing: PropTypes.bool\n  };\n});","lineCount":326,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[11,2,10,0],[11,14,10,12],[13,2,12,0],[13,6,12,6,"DeprecatedEdgeInsetsPropType"],[13,34,12,34],[13,37,12,37,"require"],[13,48,12,44],[13,49,12,44,"_dependencyMap"],[13,63,12,44],[13,100,12,77],[13,101,12,78],[14,2,13,0],[14,6,13,6,"DeprecatedStyleSheetPropType"],[14,34,13,34],[14,37,13,37,"require"],[14,48,13,44],[14,49,13,44,"_dependencyMap"],[14,63,13,44],[14,100,13,77],[14,101,13,78],[15,2,14,0],[15,6,14,6,"DeprecatedViewStylePropTypes"],[15,34,14,34],[15,37,14,37,"require"],[15,48,14,44],[15,49,14,44,"_dependencyMap"],[15,63,14,44],[15,100,14,77],[15,101,14,78],[16,2,15,0],[16,6,15,6,"PropTypes"],[16,15,15,15],[16,18,15,18,"require"],[16,29,15,25],[16,30,15,25,"_dependencyMap"],[16,44,15,25],[16,61,15,38],[16,62,15,39],[17,2,17,0],[17,6,17,0,"_require"],[17,14,17,0],[17,17,17,39,"require"],[17,28,17,46],[17,29,17,46,"_dependencyMap"],[17,43,17,46],[17,79,17,78],[17,80,17,79],[18,4,17,7,"DeprecatedAccessibilityRoles"],[18,32,17,35],[18,35,17,35,"_require"],[18,43,17,35],[18,44,17,7,"DeprecatedAccessibilityRoles"],[18,72,17,35],[19,2,19,0],[19,6,19,6,"stylePropType"],[19,19,19,19],[19,22,19,22,"DeprecatedStyleSheetPropType"],[19,50,19,50],[19,51,20,2,"DeprecatedViewStylePropTypes"],[19,79,21,0],[19,80,21,1],[20,2,23,0,"module"],[20,8,23,6],[20,9,23,7,"exports"],[20,16,23,14],[20,19,23,17],[21,4,24,2],[22,0,25,0],[23,0,26,0],[24,0,27,0],[25,0,28,0],[26,0,29,0],[27,4,30,2,"accessible"],[27,14,30,12],[27,16,30,14,"PropTypes"],[27,25,30,23],[27,26,30,24,"bool"],[27,30,30,28],[28,4,32,2],[29,0,33,0],[30,0,34,0],[31,0,35,0],[32,0,36,0],[33,0,37,0],[34,0,38,0],[35,4,39,2,"accessibilityLabel"],[35,22,39,20],[35,24,39,22,"PropTypes"],[35,33,39,31],[35,34,39,32,"node"],[35,38,39,36],[36,4,41,2],[37,0,42,0],[38,0,43,0],[39,0,44,0],[40,0,45,0],[41,0,46,0],[42,0,47,0],[43,0,48,0],[44,4,49,2,"accessibilityHint"],[44,21,49,19],[44,23,49,21,"PropTypes"],[44,32,49,30],[44,33,49,31,"string"],[44,39,49,37],[45,4,51,2],[46,0,52,0],[47,0,53,0],[48,0,54,0],[49,0,55,0],[50,4,56,2,"accessibilityActions"],[50,24,56,22],[50,26,56,24,"PropTypes"],[50,35,56,33],[50,36,56,34,"arrayOf"],[50,43,56,41],[50,44,56,42,"PropTypes"],[50,53,56,51],[50,54,56,52,"string"],[50,60,56,58],[50,61,56,59],[51,4,58,2],[52,0,59,0],[53,0,60,0],[54,0,61,0],[55,0,62,0],[56,4,63,2,"accessibilityIgnoresInvertColors"],[56,36,63,34],[56,38,63,36,"PropTypes"],[56,47,63,45],[56,48,63,46,"bool"],[56,52,63,50],[57,4,65,2],[58,0,66,0],[59,0,67,0],[60,4,68,2,"accessibilityRole"],[60,21,68,19],[60,23,68,21,"PropTypes"],[60,32,68,30],[60,33,68,31,"oneOf"],[60,38,68,36],[60,39,68,37,"DeprecatedAccessibilityRoles"],[60,67,68,65],[60,68,68,66],[61,4,70,2,"accessibilityState"],[61,22,70,20],[61,24,70,22,"PropTypes"],[61,33,70,31],[61,34,70,32,"object"],[61,40,70,38],[62,4,71,2,"accessibilityValue"],[62,22,71,20],[62,24,71,22,"PropTypes"],[62,33,71,31],[62,34,71,32,"object"],[62,40,71,38],[63,4,72,2],[64,0,73,0],[65,0,74,0],[66,0,75,0],[67,0,76,0],[68,0,77,0],[69,0,78,0],[70,0,79,0],[71,4,80,2,"accessibilityLiveRegion"],[71,27,80,25],[71,29,80,27,"PropTypes"],[71,38,80,36],[71,39,80,37,"oneOf"],[71,44,80,42],[71,45,80,43],[71,46,80,44],[71,52,80,50],[71,54,80,52],[71,62,80,60],[71,64,80,62],[71,75,80,73],[71,76,80,74],[71,77,80,75],[72,4,82,2],[73,0,83,0],[74,0,84,0],[75,0,85,0],[76,0,86,0],[77,0,87,0],[78,0,88,0],[79,0,89,0],[80,0,90,0],[81,4,91,2,"importantForAccessibility"],[81,29,91,27],[81,31,91,29,"PropTypes"],[81,40,91,38],[81,41,91,39,"oneOf"],[81,46,91,44],[81,47,91,45],[81,48,92,4],[81,54,92,10],[81,56,93,4],[81,61,93,9],[81,63,94,4],[81,67,94,8],[81,69,95,4],[81,90,95,25],[81,91,96,3],[81,92,96,4],[82,4,98,2],[83,0,99,0],[84,0,100,0],[85,0,101,0],[86,0,102,0],[87,0,103,0],[88,0,104,0],[89,0,105,0],[90,0,106,0],[91,4,107,2,"accessibilityViewIsModal"],[91,28,107,26],[91,30,107,28,"PropTypes"],[91,39,107,37],[91,40,107,38,"bool"],[91,44,107,42],[92,4,109,2],[93,0,110,0],[94,0,111,0],[95,0,112,0],[96,0,113,0],[97,0,114,0],[98,0,115,0],[99,0,116,0],[100,4,117,2,"accessibilityElementsHidden"],[100,31,117,29],[100,33,117,31,"PropTypes"],[100,42,117,40],[100,43,117,41,"bool"],[100,47,117,45],[101,4,119,2],[102,0,120,0],[103,0,121,0],[104,0,122,0],[105,0,123,0],[106,0,124,0],[107,4,125,2,"onAccessibilityAction"],[107,25,125,23],[107,27,125,25,"PropTypes"],[107,36,125,34],[107,37,125,35,"func"],[107,41,125,39],[108,4,127,2],[109,0,128,0],[110,0,129,0],[111,0,130,0],[112,0,131,0],[113,0,132,0],[114,4,133,2,"onAccessibilityTap"],[114,22,133,20],[114,24,133,22,"PropTypes"],[114,33,133,31],[114,34,133,32,"func"],[114,38,133,36],[115,4,135,2],[116,0,136,0],[117,0,137,0],[118,0,138,0],[119,0,139,0],[120,0,140,0],[121,4,141,2,"onMagicTap"],[121,14,141,12],[121,16,141,14,"PropTypes"],[121,25,141,23],[121,26,141,24,"func"],[121,30,141,28],[122,4,143,2],[123,0,144,0],[124,0,145,0],[125,0,146,0],[126,0,147,0],[127,0,148,0],[128,0,149,0],[129,4,150,2,"testID"],[129,10,150,8],[129,12,150,10,"PropTypes"],[129,21,150,19],[129,22,150,20,"string"],[129,28,150,26],[130,4,152,2],[131,0,153,0],[132,0,154,0],[133,0,155,0],[134,0,156,0],[135,0,157,0],[136,0,158,0],[137,4,159,2,"nativeID"],[137,12,159,10],[137,14,159,12,"PropTypes"],[137,23,159,21],[137,24,159,22,"string"],[137,30,159,28],[138,4,161,2],[139,0,162,0],[140,0,163,0],[141,0,164,0],[142,0,165,0],[144,4,167,2],[145,0,168,0],[146,0,169,0],[147,0,170,0],[148,0,171,0],[149,0,172,0],[150,0,173,0],[151,0,174,0],[152,0,175,0],[153,4,176,2,"onResponderGrant"],[153,20,176,18],[153,22,176,20,"PropTypes"],[153,31,176,29],[153,32,176,30,"func"],[153,36,176,34],[154,4,178,2],[155,0,179,0],[156,0,180,0],[157,0,181,0],[158,0,182,0],[159,0,183,0],[160,0,184,0],[161,0,185,0],[162,4,186,2,"onResponderMove"],[162,19,186,17],[162,21,186,19,"PropTypes"],[162,30,186,28],[162,31,186,29,"func"],[162,35,186,33],[163,4,188,2],[164,0,189,0],[165,0,190,0],[166,0,191,0],[167,0,192,0],[168,0,193,0],[169,0,194,0],[170,0,195,0],[171,0,196,0],[172,4,197,2,"onResponderReject"],[172,21,197,19],[172,23,197,21,"PropTypes"],[172,32,197,30],[172,33,197,31,"func"],[172,37,197,35],[173,4,199,2],[174,0,200,0],[175,0,201,0],[176,0,202,0],[177,0,203,0],[178,0,204,0],[179,0,205,0],[180,0,206,0],[181,4,207,2,"onResponderRelease"],[181,22,207,20],[181,24,207,22,"PropTypes"],[181,33,207,31],[181,34,207,32,"func"],[181,38,207,36],[182,4,209,2],[183,0,210,0],[184,0,211,0],[185,0,212,0],[186,0,213,0],[187,0,214,0],[188,0,215,0],[189,0,216,0],[190,0,217,0],[191,0,218,0],[192,0,219,0],[193,4,220,2,"onResponderTerminate"],[193,24,220,22],[193,26,220,24,"PropTypes"],[193,35,220,33],[193,36,220,34,"func"],[193,40,220,38],[194,4,222,2],[195,0,223,0],[196,0,224,0],[197,0,225,0],[198,0,226,0],[199,0,227,0],[200,0,228,0],[201,0,229,0],[202,0,230,0],[203,4,231,2,"onResponderTerminationRequest"],[203,33,231,31],[203,35,231,33,"PropTypes"],[203,44,231,42],[203,45,231,43,"func"],[203,49,231,47],[204,4,233,2],[205,0,234,0],[206,0,235,0],[207,0,236,0],[208,0,237,0],[209,0,238,0],[210,0,239,0],[211,0,240,0],[212,4,241,2,"onStartShouldSetResponder"],[212,29,241,27],[212,31,241,29,"PropTypes"],[212,40,241,38],[212,41,241,39,"func"],[212,45,241,43],[213,4,243,2],[214,0,244,0],[215,0,245,0],[216,0,246,0],[217,0,247,0],[218,0,248,0],[219,0,249,0],[220,0,250,0],[221,0,251,0],[222,4,252,2,"onStartShouldSetResponderCapture"],[222,36,252,34],[222,38,252,36,"PropTypes"],[222,47,252,45],[222,48,252,46,"func"],[222,52,252,50],[223,4,254,2],[224,0,255,0],[225,0,256,0],[226,0,257,0],[227,0,258,0],[228,0,259,0],[229,0,260,0],[230,0,261,0],[231,0,262,0],[232,4,263,2,"onMoveShouldSetResponder"],[232,28,263,26],[232,30,263,28,"PropTypes"],[232,39,263,37],[232,40,263,38,"func"],[232,44,263,42],[233,4,265,2],[234,0,266,0],[235,0,267,0],[236,0,268,0],[237,0,269,0],[238,0,270,0],[239,0,271,0],[240,0,272,0],[241,0,273,0],[242,4,274,2,"onMoveShouldSetResponderCapture"],[242,35,274,33],[242,37,274,35,"PropTypes"],[242,46,274,44],[242,47,274,45,"func"],[242,51,274,49],[243,4,276,2],[244,0,277,0],[245,0,278,0],[246,0,279,0],[247,0,280,0],[248,0,281,0],[249,0,282,0],[250,0,283,0],[251,0,284,0],[252,0,285,0],[253,0,286,0],[254,4,287,2,"hitSlop"],[254,11,287,9],[254,13,287,11,"DeprecatedEdgeInsetsPropType"],[254,41,287,39],[255,4,289,2],[256,0,290,0],[257,0,291,0],[258,0,292,0],[259,0,293,0],[260,0,294,0],[261,0,295,0],[262,0,296,0],[263,0,297,0],[264,0,298,0],[265,0,299,0],[266,4,300,2,"onLayout"],[266,12,300,10],[266,14,300,12,"PropTypes"],[266,23,300,21],[266,24,300,22,"func"],[266,28,300,26],[267,4,302,2],[268,0,303,0],[269,0,304,0],[270,0,305,0],[271,0,306,0],[272,4,307,2,"pointerEvents"],[272,17,307,15],[272,19,307,17,"PropTypes"],[272,28,307,26],[272,29,307,27,"oneOf"],[272,34,307,32],[272,35,307,33],[272,36,307,34],[272,46,307,44],[272,48,307,46],[272,54,307,52],[272,56,307,54],[272,66,307,64],[272,68,307,66],[272,74,307,72],[272,75,307,73],[272,76,307,74],[273,4,309,2],[274,0,310,0],[275,0,311,0],[276,4,312,2,"style"],[276,9,312,7],[276,11,312,9,"stylePropType"],[276,24,312,22],[277,4,314,2],[278,0,315,0],[279,0,316,0],[280,0,317,0],[281,0,318,0],[282,0,319,0],[283,0,320,0],[284,0,321,0],[285,0,322,0],[286,0,323,0],[287,4,324,2,"removeClippedSubviews"],[287,25,324,23],[287,27,324,25,"PropTypes"],[287,36,324,34],[287,37,324,35,"bool"],[287,41,324,39],[288,4,326,2],[289,0,327,0],[290,0,328,0],[291,0,329,0],[292,0,330,0],[293,0,331,0],[294,0,332,0],[295,0,333,0],[296,4,334,2,"renderToHardwareTextureAndroid"],[296,34,334,32],[296,36,334,34,"PropTypes"],[296,45,334,43],[296,46,334,44,"bool"],[296,50,334,48],[297,4,336,2],[298,0,337,0],[299,0,338,0],[300,0,339,0],[301,0,340,0],[302,0,341,0],[303,0,342,0],[304,4,343,2,"shouldRasterizeIOS"],[304,22,343,20],[304,24,343,22,"PropTypes"],[304,33,343,31],[304,34,343,32,"bool"],[304,38,343,36],[305,4,345,2],[306,0,346,0],[307,0,347,0],[308,0,348,0],[309,0,349,0],[310,0,350,0],[311,0,351,0],[312,0,352,0],[313,0,353,0],[314,0,354,0],[315,4,355,2,"collapsable"],[315,15,355,13],[315,17,355,15,"PropTypes"],[315,26,355,24],[315,27,355,25,"bool"],[315,31,355,29],[316,4,357,2],[317,0,358,0],[318,0,359,0],[319,0,360,0],[320,0,361,0],[321,0,362,0],[322,0,363,0],[323,0,364,0],[324,4,365,2,"needsOffscreenAlphaCompositing"],[324,34,365,32],[324,36,365,34,"PropTypes"],[324,45,365,43],[324,46,365,44,"bool"],[325,2,366,0],[325,3,366,1],[326,0,366,2]],"functionMap":{"names":["<global>"],"mappings":"AAA"}},"type":"js/module"}]}