{"dependencies":[{"name":"./XMLHttpRequest","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}}],"key":"O+JY6tQeHsIWY50GgaFx/xvik0k="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   */\n\n  'use strict';\n\n  var XMLHttpRequest = _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\");\n  var originalXHROpen = XMLHttpRequest.prototype.open;\n  var originalXHRSend = XMLHttpRequest.prototype.send;\n  var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;\n  var openCallback;\n  var sendCallback;\n  var requestHeaderCallback;\n  var headerReceivedCallback;\n  var responseCallback;\n  var _isInterceptorEnabled = false;\n\n  /**\n   * A network interceptor which monkey-patches XMLHttpRequest methods\n   * to gather all network requests/responses, in order to show their\n   * information in the React Native inspector development tool.\n   * This supports interception with XMLHttpRequest API, including Fetch API\n   * and any other third party libraries that depend on XMLHttpRequest.\n   */\n  var XHRInterceptor = {\n    /**\n     * Invoked before XMLHttpRequest.open(...) is called.\n     */\n    setOpenCallback: function setOpenCallback(callback) {\n      openCallback = callback;\n    },\n    /**\n     * Invoked before XMLHttpRequest.send(...) is called.\n     */\n    setSendCallback: function setSendCallback(callback) {\n      sendCallback = callback;\n    },\n    /**\n     * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.\n     */\n    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {\n      headerReceivedCallback = callback;\n    },\n    /**\n     * Invoked after xhr's readyState becomes xhr.DONE.\n     */\n    setResponseCallback: function setResponseCallback(callback) {\n      responseCallback = callback;\n    },\n    /**\n     * Invoked before XMLHttpRequest.setRequestHeader(...) is called.\n     */\n    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {\n      requestHeaderCallback = callback;\n    },\n    isInterceptorEnabled: function isInterceptorEnabled() {\n      return _isInterceptorEnabled;\n    },\n    enableInterception: function enableInterception() {\n      if (_isInterceptorEnabled) {\n        return;\n      }\n      // Override `open` method for all XHR requests to intercept the request\n      // method and url, then pass them through the `openCallback`.\n      XMLHttpRequest.prototype.open = function (method, url) {\n        if (openCallback) {\n          openCallback(method, url, this);\n        }\n        originalXHROpen.apply(this, arguments);\n      };\n\n      // Override `setRequestHeader` method for all XHR requests to intercept\n      // the request headers, then pass them through the `requestHeaderCallback`.\n      XMLHttpRequest.prototype.setRequestHeader = function (header, value) {\n        if (requestHeaderCallback) {\n          requestHeaderCallback(header, value, this);\n        }\n        originalXHRSetRequestHeader.apply(this, arguments);\n      };\n\n      // Override `send` method of all XHR requests to intercept the data sent,\n      // register listeners to intercept the response, and invoke the callbacks.\n      XMLHttpRequest.prototype.send = function (data) {\n        var _this = this;\n        if (sendCallback) {\n          sendCallback(data, this);\n        }\n        if (this.addEventListener) {\n          this.addEventListener('readystatechange', function () {\n            if (!_isInterceptorEnabled) {\n              return;\n            }\n            if (_this.readyState === _this.HEADERS_RECEIVED) {\n              var contentTypeString = _this.getResponseHeader('Content-Type');\n              var contentLengthString = _this.getResponseHeader('Content-Length');\n              var responseContentType, responseSize;\n              if (contentTypeString) {\n                responseContentType = contentTypeString.split(';')[0];\n              }\n              if (contentLengthString) {\n                responseSize = parseInt(contentLengthString, 10);\n              }\n              if (headerReceivedCallback) {\n                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);\n              }\n            }\n            if (_this.readyState === _this.DONE) {\n              if (responseCallback) {\n                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);\n              }\n            }\n          }, false);\n        }\n        originalXHRSend.apply(this, arguments);\n      };\n      _isInterceptorEnabled = true;\n    },\n    // Unpatch XMLHttpRequest methods and remove the callbacks.\n    disableInterception: function disableInterception() {\n      if (!_isInterceptorEnabled) {\n        return;\n      }\n      _isInterceptorEnabled = false;\n      XMLHttpRequest.prototype.send = originalXHRSend;\n      XMLHttpRequest.prototype.open = originalXHROpen;\n      XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;\n      responseCallback = null;\n      openCallback = null;\n      sendCallback = null;\n      headerReceivedCallback = null;\n      requestHeaderCallback = null;\n    }\n  };\n  module.exports = XHRInterceptor;\n});","lineCount":141,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[11,2,10,0],[11,14,10,12],[13,2,12,0],[13,6,12,6,"XMLHttpRequest"],[13,20,12,20],[13,23,12,23,"require"],[13,34,12,30],[13,35,12,30,"_dependencyMap"],[13,49,12,30],[13,72,12,49],[13,73,12,50],[14,2,13,0],[14,6,13,6,"originalXHROpen"],[14,21,13,21],[14,24,13,24,"XMLHttpRequest"],[14,38,13,38],[14,39,13,39,"prototype"],[14,48,13,48],[14,49,13,49,"open"],[14,53,13,53],[15,2,14,0],[15,6,14,6,"originalXHRSend"],[15,21,14,21],[15,24,14,24,"XMLHttpRequest"],[15,38,14,38],[15,39,14,39,"prototype"],[15,48,14,48],[15,49,14,49,"send"],[15,53,14,53],[16,2,15,0],[16,6,15,6,"originalXHRSetRequestHeader"],[16,33,15,33],[16,36,15,36,"XMLHttpRequest"],[16,50,15,50],[16,51,15,51,"prototype"],[16,60,15,60],[16,61,15,61,"setRequestHeader"],[16,77,15,77],[17,2,17,0],[17,6,17,4,"openCallback"],[17,18,17,16],[18,2,18,0],[18,6,18,4,"sendCallback"],[18,18,18,16],[19,2,19,0],[19,6,19,4,"requestHeaderCallback"],[19,27,19,25],[20,2,20,0],[20,6,20,4,"headerReceivedCallback"],[20,28,20,26],[21,2,21,0],[21,6,21,4,"responseCallback"],[21,22,21,20],[22,2,23,0],[22,6,23,4,"isInterceptorEnabled"],[22,27,23,24],[22,30,23,27],[22,35,23,32],[24,2,25,0],[25,0,26,0],[26,0,27,0],[27,0,28,0],[28,0,29,0],[29,0,30,0],[30,0,31,0],[31,2,32,0],[31,6,32,6,"XHRInterceptor"],[31,20,32,20],[31,23,32,23],[32,4,33,2],[33,0,34,0],[34,0,35,0],[35,4,36,2,"setOpenCallback"],[35,19,36,17],[35,30,36,17,"setOpenCallback"],[35,46,36,18,"callback"],[35,54,36,26],[35,56,36,28],[36,6,37,4,"openCallback"],[36,18,37,16],[36,21,37,19,"callback"],[36,29,37,27],[37,4,38,2],[37,5,38,3],[38,4,40,2],[39,0,41,0],[40,0,42,0],[41,4,43,2,"setSendCallback"],[41,19,43,17],[41,30,43,17,"setSendCallback"],[41,46,43,18,"callback"],[41,54,43,26],[41,56,43,28],[42,6,44,4,"sendCallback"],[42,18,44,16],[42,21,44,19,"callback"],[42,29,44,27],[43,4,45,2],[43,5,45,3],[44,4,47,2],[45,0,48,0],[46,0,49,0],[47,4,50,2,"setHeaderReceivedCallback"],[47,29,50,27],[47,40,50,27,"setHeaderReceivedCallback"],[47,66,50,28,"callback"],[47,74,50,36],[47,76,50,38],[48,6,51,4,"headerReceivedCallback"],[48,28,51,26],[48,31,51,29,"callback"],[48,39,51,37],[49,4,52,2],[49,5,52,3],[50,4,54,2],[51,0,55,0],[52,0,56,0],[53,4,57,2,"setResponseCallback"],[53,23,57,21],[53,34,57,21,"setResponseCallback"],[53,54,57,22,"callback"],[53,62,57,30],[53,64,57,32],[54,6,58,4,"responseCallback"],[54,22,58,20],[54,25,58,23,"callback"],[54,33,58,31],[55,4,59,2],[55,5,59,3],[56,4,61,2],[57,0,62,0],[58,0,63,0],[59,4,64,2,"setRequestHeaderCallback"],[59,28,64,26],[59,39,64,26,"setRequestHeaderCallback"],[59,64,64,27,"callback"],[59,72,64,35],[59,74,64,37],[60,6,65,4,"requestHeaderCallback"],[60,27,65,25],[60,30,65,28,"callback"],[60,38,65,36],[61,4,66,2],[61,5,66,3],[62,4,68,2,"isInterceptorEnabled"],[62,24,68,22],[62,35,68,22,"isInterceptorEnabled"],[62,56,68,22],[62,58,68,25],[63,6,69,4],[63,13,69,11,"isInterceptorEnabled"],[63,34,69,31],[64,4,70,2],[64,5,70,3],[65,4,72,2,"enableInterception"],[65,22,72,20],[65,33,72,20,"enableInterception"],[65,52,72,20],[65,54,72,23],[66,6,73,4],[66,10,73,8,"isInterceptorEnabled"],[66,31,73,28],[66,33,73,30],[67,8,74,6],[68,6,75,4],[69,6,76,4],[70,6,77,4],[71,6,78,4,"XMLHttpRequest"],[71,20,78,18],[71,21,78,19,"prototype"],[71,30,78,28],[71,31,78,29,"open"],[71,35,78,33],[71,38,78,36],[71,48,78,46,"method"],[71,54,78,52],[71,56,78,54,"url"],[71,59,78,57],[71,61,78,59],[72,8,79,6],[72,12,79,10,"openCallback"],[72,24,79,22],[72,26,79,24],[73,10,80,8,"openCallback"],[73,22,80,20],[73,23,80,21,"method"],[73,29,80,27],[73,31,80,29,"url"],[73,34,80,32],[73,36,80,34],[73,40,80,38],[73,41,80,39],[74,8,81,6],[75,8,82,6,"originalXHROpen"],[75,23,82,21],[75,24,82,22,"apply"],[75,29,82,27],[75,30,82,28],[75,34,82,32],[75,36,82,34,"arguments"],[75,45,82,43],[75,46,82,44],[76,6,83,4],[76,7,83,5],[78,6,85,4],[79,6,86,4],[80,6,87,4,"XMLHttpRequest"],[80,20,87,18],[80,21,87,19,"prototype"],[80,30,87,28],[80,31,87,29,"setRequestHeader"],[80,47,87,45],[80,50,87,48],[80,60,87,58,"header"],[80,66,87,64],[80,68,87,66,"value"],[80,73,87,71],[80,75,87,73],[81,8,88,6],[81,12,88,10,"requestHeaderCallback"],[81,33,88,31],[81,35,88,33],[82,10,89,8,"requestHeaderCallback"],[82,31,89,29],[82,32,89,30,"header"],[82,38,89,36],[82,40,89,38,"value"],[82,45,89,43],[82,47,89,45],[82,51,89,49],[82,52,89,50],[83,8,90,6],[84,8,91,6,"originalXHRSetRequestHeader"],[84,35,91,33],[84,36,91,34,"apply"],[84,41,91,39],[84,42,91,40],[84,46,91,44],[84,48,91,46,"arguments"],[84,57,91,55],[84,58,91,56],[85,6,92,4],[85,7,92,5],[87,6,94,4],[88,6,95,4],[89,6,96,4,"XMLHttpRequest"],[89,20,96,18],[89,21,96,19,"prototype"],[89,30,96,28],[89,31,96,29,"send"],[89,35,96,33],[89,38,96,36],[89,48,96,46,"data"],[89,52,96,50],[89,54,96,52],[90,8,96,52],[90,12,96,52,"_this"],[90,17,96,52],[91,8,97,6],[91,12,97,10,"sendCallback"],[91,24,97,22],[91,26,97,24],[92,10,98,8,"sendCallback"],[92,22,98,20],[92,23,98,21,"data"],[92,27,98,25],[92,29,98,27],[92,33,98,31],[92,34,98,32],[93,8,99,6],[94,8,100,6],[94,12,100,10],[94,16,100,14],[94,17,100,15,"addEventListener"],[94,33,100,31],[94,35,100,33],[95,10,101,8],[95,14,101,12],[95,15,101,13,"addEventListener"],[95,31,101,29],[95,32,102,10],[95,50,102,28],[95,52,103,10],[95,64,103,16],[96,12,104,12],[96,16,104,16],[96,17,104,17,"isInterceptorEnabled"],[96,38,104,37],[96,40,104,39],[97,14,105,14],[98,12,106,12],[99,12,107,12],[99,16,107,16,"_this"],[99,21,107,20],[99,22,107,21,"readyState"],[99,32,107,31],[99,37,107,36,"_this"],[99,42,107,40],[99,43,107,41,"HEADERS_RECEIVED"],[99,59,107,57],[99,61,107,59],[100,14,108,14],[100,18,108,20,"contentTypeString"],[100,35,108,37],[100,38,108,40,"_this"],[100,43,108,44],[100,44,108,45,"getResponseHeader"],[100,61,108,62],[100,62,108,63],[100,76,108,77],[100,77,108,78],[101,14,109,14],[101,18,109,20,"contentLengthString"],[101,37,109,39],[101,40,110,16,"_this"],[101,45,110,20],[101,46,110,21,"getResponseHeader"],[101,63,110,38],[101,64,110,39],[101,80,110,55],[101,81,110,56],[102,14,111,14],[102,18,111,18,"responseContentType"],[102,37,111,37],[102,39,111,39,"responseSize"],[102,51,111,51],[103,14,112,14],[103,18,112,18,"contentTypeString"],[103,35,112,35],[103,37,112,37],[104,16,113,16,"responseContentType"],[104,35,113,35],[104,38,113,38,"contentTypeString"],[104,55,113,55],[104,56,113,56,"split"],[104,61,113,61],[104,62,113,62],[104,65,113,65],[104,66,113,66],[104,67,113,67],[104,68,113,68],[104,69,113,69],[105,14,114,14],[106,14,115,14],[106,18,115,18,"contentLengthString"],[106,37,115,37],[106,39,115,39],[107,16,116,16,"responseSize"],[107,28,116,28],[107,31,116,31,"parseInt"],[107,39,116,39],[107,40,116,40,"contentLengthString"],[107,59,116,59],[107,61,116,61],[107,63,116,63],[107,64,116,64],[108,14,117,14],[109,14,118,14],[109,18,118,18,"headerReceivedCallback"],[109,40,118,40],[109,42,118,42],[110,16,119,16,"headerReceivedCallback"],[110,38,119,38],[110,39,120,18,"responseContentType"],[110,58,120,37],[110,60,121,18,"responseSize"],[110,72,121,30],[110,74,122,18,"_this"],[110,79,122,22],[110,80,122,23,"getAllResponseHeaders"],[110,101,122,44],[110,102,122,45],[110,103,122,46],[110,105,123,18,"_this"],[110,110,124,16],[110,111,124,17],[111,14,125,14],[112,12,126,12],[113,12,127,12],[113,16,127,16,"_this"],[113,21,127,20],[113,22,127,21,"readyState"],[113,32,127,31],[113,37,127,36,"_this"],[113,42,127,40],[113,43,127,41,"DONE"],[113,47,127,45],[113,49,127,47],[114,14,128,14],[114,18,128,18,"responseCallback"],[114,34,128,34],[114,36,128,36],[115,16,129,16,"responseCallback"],[115,32,129,32],[115,33,130,18,"_this"],[115,38,130,22],[115,39,130,23,"status"],[115,45,130,29],[115,47,131,18,"_this"],[115,52,131,22],[115,53,131,23,"timeout"],[115,60,131,30],[115,62,132,18,"_this"],[115,67,132,22],[115,68,132,23,"response"],[115,76,132,31],[115,78,133,18,"_this"],[115,83,133,22],[115,84,133,23,"responseURL"],[115,95,133,34],[115,97,134,18,"_this"],[115,102,134,22],[115,103,134,23,"responseType"],[115,115,134,35],[115,117,135,18,"_this"],[115,122,136,16],[115,123,136,17],[116,14,137,14],[117,12,138,12],[118,10,139,10],[118,11,139,11],[118,13,140,10],[118,18,141,8],[118,19,141,9],[119,8,142,6],[120,8,143,6,"originalXHRSend"],[120,23,143,21],[120,24,143,22,"apply"],[120,29,143,27],[120,30,143,28],[120,34,143,32],[120,36,143,34,"arguments"],[120,45,143,43],[120,46,143,44],[121,6,144,4],[121,7,144,5],[122,6,145,4,"isInterceptorEnabled"],[122,27,145,24],[122,30,145,27],[122,34,145,31],[123,4,146,2],[123,5,146,3],[124,4,148,2],[125,4,149,2,"disableInterception"],[125,23,149,21],[125,34,149,21,"disableInterception"],[125,54,149,21],[125,56,149,24],[126,6,150,4],[126,10,150,8],[126,11,150,9,"isInterceptorEnabled"],[126,32,150,29],[126,34,150,31],[127,8,151,6],[128,6,152,4],[129,6,153,4,"isInterceptorEnabled"],[129,27,153,24],[129,30,153,27],[129,35,153,32],[130,6,154,4,"XMLHttpRequest"],[130,20,154,18],[130,21,154,19,"prototype"],[130,30,154,28],[130,31,154,29,"send"],[130,35,154,33],[130,38,154,36,"originalXHRSend"],[130,53,154,51],[131,6,155,4,"XMLHttpRequest"],[131,20,155,18],[131,21,155,19,"prototype"],[131,30,155,28],[131,31,155,29,"open"],[131,35,155,33],[131,38,155,36,"originalXHROpen"],[131,53,155,51],[132,6,156,4,"XMLHttpRequest"],[132,20,156,18],[132,21,156,19,"prototype"],[132,30,156,28],[132,31,156,29,"setRequestHeader"],[132,47,156,45],[132,50,156,48,"originalXHRSetRequestHeader"],[132,77,156,75],[133,6,157,4,"responseCallback"],[133,22,157,20],[133,25,157,23],[133,29,157,27],[134,6,158,4,"openCallback"],[134,18,158,16],[134,21,158,19],[134,25,158,23],[135,6,159,4,"sendCallback"],[135,18,159,16],[135,21,159,19],[135,25,159,23],[136,6,160,4,"headerReceivedCallback"],[136,28,160,26],[136,31,160,29],[136,35,160,33],[137,6,161,4,"requestHeaderCallback"],[137,27,161,25],[137,30,161,28],[137,34,161,32],[138,4,162,2],[139,2,163,0],[139,3,163,1],[140,2,165,0,"module"],[140,8,165,6],[140,9,165,7,"exports"],[140,16,165,14],[140,19,165,17,"XHRInterceptor"],[140,33,165,31],[141,0,165,32]],"functionMap":{"names":["<global>","setOpenCallback","setSendCallback","setHeaderReceivedCallback","setResponseCallback","setRequestHeaderCallback","isInterceptorEnabled","enableInterception","XMLHttpRequest.prototype.open","XMLHttpRequest.prototype.setRequestHeader","XMLHttpRequest.prototype.send","addEventListener$argument_1","disableInterception"],"mappings":"AAA;ECmC;GDE;EEK;GFE;EGK;GHE;EIK;GJE;EKK;GLE;EME;GNE;EOE;oCCM;KDK;gDEI;KFK;oCGI;UCO;WDoC;KHK;GPE;EYG;GZa"}},"type":"js/module"}]}