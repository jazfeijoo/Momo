{"dependencies":[{"name":"./char-code-definitions","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":52,"index":52}}],"key":"NfOviVtQpFy6J6SQ3kQf3UUCl4Y="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var charCodeDef = _$$_REQUIRE(_dependencyMap[0], \"./char-code-definitions\");\n  var isDigit = charCodeDef.isDigit;\n  var isHexDigit = charCodeDef.isHexDigit;\n  var isUppercaseLetter = charCodeDef.isUppercaseLetter;\n  var isName = charCodeDef.isName;\n  var isWhiteSpace = charCodeDef.isWhiteSpace;\n  var isValidEscape = charCodeDef.isValidEscape;\n  function getCharCode(source, offset) {\n    return offset < source.length ? source.charCodeAt(offset) : 0;\n  }\n  function getNewlineLength(source, offset, code) {\n    if (code === 13 /* \\r */ && getCharCode(source, offset + 1) === 10 /* \\n */) {\n      return 2;\n    }\n    return 1;\n  }\n  function cmpChar(testStr, offset, referenceCode) {\n    var code = testStr.charCodeAt(offset);\n\n    // code.toLowerCase() for A..Z\n    if (isUppercaseLetter(code)) {\n      code = code | 32;\n    }\n    return code === referenceCode;\n  }\n  function cmpStr(testStr, start, end, referenceStr) {\n    if (end - start !== referenceStr.length) {\n      return false;\n    }\n    if (start < 0 || end > testStr.length) {\n      return false;\n    }\n    for (var i = start; i < end; i++) {\n      var testCode = testStr.charCodeAt(i);\n      var referenceCode = referenceStr.charCodeAt(i - start);\n\n      // testCode.toLowerCase() for A..Z\n      if (isUppercaseLetter(testCode)) {\n        testCode = testCode | 32;\n      }\n      if (testCode !== referenceCode) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function findWhiteSpaceStart(source, offset) {\n    for (; offset >= 0; offset--) {\n      if (!isWhiteSpace(source.charCodeAt(offset))) {\n        break;\n      }\n    }\n    return offset + 1;\n  }\n  function findWhiteSpaceEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n      if (!isWhiteSpace(source.charCodeAt(offset))) {\n        break;\n      }\n    }\n    return offset;\n  }\n  function findDecimalNumberEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n      if (!isDigit(source.charCodeAt(offset))) {\n        break;\n      }\n    }\n    return offset;\n  }\n\n  // ยง 4.3.7. Consume an escaped code point\n  function consumeEscaped(source, offset) {\n    // It assumes that the U+005C REVERSE SOLIDUS (\\) has already been consumed and\n    // that the next input code point has already been verified to be part of a valid escape.\n    offset += 2;\n\n    // hex digit\n    if (isHexDigit(getCharCode(source, offset - 1))) {\n      // Consume as many hex digits as possible, but no more than 5.\n      // Note that this means 1-6 hex digits have been consumed in total.\n      for (var maxOffset = Math.min(source.length, offset + 5); offset < maxOffset; offset++) {\n        if (!isHexDigit(getCharCode(source, offset))) {\n          break;\n        }\n      }\n\n      // If the next input code point is whitespace, consume it as well.\n      var code = getCharCode(source, offset);\n      if (isWhiteSpace(code)) {\n        offset += getNewlineLength(source, offset, code);\n      }\n    }\n    return offset;\n  }\n\n  // ยง4.3.11. Consume a name\n  // Note: This algorithm does not do the verification of the first few code points that are necessary\n  // to ensure the returned code points would constitute an <ident-token>. If that is the intended use,\n  // ensure that the stream starts with an identifier before calling this algorithm.\n  function consumeName(source, offset) {\n    // Let result initially be an empty string.\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n      var code = source.charCodeAt(offset);\n\n      // name code point\n      if (isName(code)) {\n        // Append the code point to result.\n        continue;\n      }\n\n      // the stream starts with a valid escape\n      if (isValidEscape(code, getCharCode(source, offset + 1))) {\n        // Consume an escaped code point. Append the returned code point to result.\n        offset = consumeEscaped(source, offset) - 1;\n        continue;\n      }\n\n      // anything else\n      // Reconsume the current input code point. Return result.\n      break;\n    }\n    return offset;\n  }\n\n  // ยง4.3.12. Consume a number\n  function consumeNumber(source, offset) {\n    var code = source.charCodeAt(offset);\n\n    // 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-),\n    // consume it and append it to repr.\n    if (code === 0x002B || code === 0x002D) {\n      code = source.charCodeAt(offset += 1);\n    }\n\n    // 3. While the next input code point is a digit, consume it and append it to repr.\n    if (isDigit(code)) {\n      offset = findDecimalNumberEnd(source, offset + 1);\n      code = source.charCodeAt(offset);\n    }\n\n    // 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:\n    if (code === 0x002E && isDigit(source.charCodeAt(offset + 1))) {\n      // 4.1 Consume them.\n      // 4.2 Append them to repr.\n      code = source.charCodeAt(offset += 2);\n\n      // 4.3 Set type to \"number\".\n      // TODO\n\n      // 4.4 While the next input code point is a digit, consume it and append it to repr.\n\n      offset = findDecimalNumberEnd(source, offset);\n    }\n\n    // 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E)\n    // or U+0065 LATIN SMALL LETTER E (e), ... , followed by a digit, then:\n    if (cmpChar(source, offset, 101 /* e */)) {\n      var sign = 0;\n      code = source.charCodeAt(offset + 1);\n\n      // ... optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+) ...\n      if (code === 0x002D || code === 0x002B) {\n        sign = 1;\n        code = source.charCodeAt(offset + 2);\n      }\n\n      // ... followed by a digit\n      if (isDigit(code)) {\n        // 5.1 Consume them.\n        // 5.2 Append them to repr.\n\n        // 5.3 Set type to \"number\".\n        // TODO\n\n        // 5.4 While the next input code point is a digit, consume it and append it to repr.\n        offset = findDecimalNumberEnd(source, offset + 1 + sign + 1);\n      }\n    }\n    return offset;\n  }\n\n  // ยง 4.3.14. Consume the remnants of a bad url\n  // ... its sole use is to consume enough of the input stream to reach a recovery point\n  // where normal tokenizing can resume.\n  function consumeBadUrlRemnants(source, offset) {\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n      var code = source.charCodeAt(offset);\n\n      // U+0029 RIGHT PARENTHESIS ())\n      // EOF\n      if (code === 0x0029) {\n        // Return.\n        offset++;\n        break;\n      }\n      if (isValidEscape(code, getCharCode(source, offset + 1))) {\n        // Consume an escaped code point.\n        // Note: This allows an escaped right parenthesis (\"\\)\") to be encountered\n        // without ending the <bad-url-token>. This is otherwise identical to\n        // the \"anything else\" clause.\n        offset = consumeEscaped(source, offset);\n      }\n    }\n    return offset;\n  }\n  module.exports = {\n    consumeEscaped: consumeEscaped,\n    consumeName: consumeName,\n    consumeNumber: consumeNumber,\n    consumeBadUrlRemnants: consumeBadUrlRemnants,\n    cmpChar: cmpChar,\n    cmpStr: cmpStr,\n    getNewlineLength: getNewlineLength,\n    findWhiteSpaceStart: findWhiteSpaceStart,\n    findWhiteSpaceEnd: findWhiteSpaceEnd\n  };\n});","lineCount":221,"map":[[2,2,1,0],[2,6,1,4,"charCodeDef"],[2,17,1,15],[2,20,1,18,"require"],[2,31,1,25],[2,32,1,25,"_dependencyMap"],[2,46,1,25],[2,76,1,51],[2,77,1,52],[3,2,2,0],[3,6,2,4,"isDigit"],[3,13,2,11],[3,16,2,14,"charCodeDef"],[3,27,2,25],[3,28,2,26,"isDigit"],[3,35,2,33],[4,2,3,0],[4,6,3,4,"isHexDigit"],[4,16,3,14],[4,19,3,17,"charCodeDef"],[4,30,3,28],[4,31,3,29,"isHexDigit"],[4,41,3,39],[5,2,4,0],[5,6,4,4,"isUppercaseLetter"],[5,23,4,21],[5,26,4,24,"charCodeDef"],[5,37,4,35],[5,38,4,36,"isUppercaseLetter"],[5,55,4,53],[6,2,5,0],[6,6,5,4,"isName"],[6,12,5,10],[6,15,5,13,"charCodeDef"],[6,26,5,24],[6,27,5,25,"isName"],[6,33,5,31],[7,2,6,0],[7,6,6,4,"isWhiteSpace"],[7,18,6,16],[7,21,6,19,"charCodeDef"],[7,32,6,30],[7,33,6,31,"isWhiteSpace"],[7,45,6,43],[8,2,7,0],[8,6,7,4,"isValidEscape"],[8,19,7,17],[8,22,7,20,"charCodeDef"],[8,33,7,31],[8,34,7,32,"isValidEscape"],[8,47,7,45],[9,2,9,0],[9,11,9,9,"getCharCode"],[9,22,9,20,"getCharCode"],[9,23,9,21,"source"],[9,29,9,27],[9,31,9,29,"offset"],[9,37,9,35],[9,39,9,37],[10,4,10,4],[10,11,10,11,"offset"],[10,17,10,17],[10,20,10,20,"source"],[10,26,10,26],[10,27,10,27,"length"],[10,33,10,33],[10,36,10,36,"source"],[10,42,10,42],[10,43,10,43,"charCodeAt"],[10,53,10,53],[10,54,10,54,"offset"],[10,60,10,60],[10,61,10,61],[10,64,10,64],[10,65,10,65],[11,2,11,0],[12,2,13,0],[12,11,13,9,"getNewlineLength"],[12,27,13,25,"getNewlineLength"],[12,28,13,26,"source"],[12,34,13,32],[12,36,13,34,"offset"],[12,42,13,40],[12,44,13,42,"code"],[12,48,13,46],[12,50,13,48],[13,4,14,4],[13,8,14,8,"code"],[13,12,14,12],[13,17,14,17],[13,19,14,19],[13,20,14,20],[13,32,14,32,"getCharCode"],[13,43,14,43],[13,44,14,44,"source"],[13,50,14,50],[13,52,14,52,"offset"],[13,58,14,58],[13,61,14,61],[13,62,14,62],[13,63,14,63],[13,68,14,68],[13,70,14,70],[13,71,14,71],[13,81,14,81],[14,6,15,8],[14,13,15,15],[14,14,15,16],[15,4,16,4],[16,4,18,4],[16,11,18,11],[16,12,18,12],[17,2,19,0],[18,2,21,0],[18,11,21,9,"cmpChar"],[18,18,21,16,"cmpChar"],[18,19,21,17,"testStr"],[18,26,21,24],[18,28,21,26,"offset"],[18,34,21,32],[18,36,21,34,"referenceCode"],[18,49,21,47],[18,51,21,49],[19,4,22,4],[19,8,22,8,"code"],[19,12,22,12],[19,15,22,15,"testStr"],[19,22,22,22],[19,23,22,23,"charCodeAt"],[19,33,22,33],[19,34,22,34,"offset"],[19,40,22,40],[19,41,22,41],[21,4,24,4],[22,4,25,4],[22,8,25,8,"isUppercaseLetter"],[22,25,25,25],[22,26,25,26,"code"],[22,30,25,30],[22,31,25,31],[22,33,25,33],[23,6,26,8,"code"],[23,10,26,12],[23,13,26,15,"code"],[23,17,26,19],[23,20,26,22],[23,22,26,24],[24,4,27,4],[25,4,29,4],[25,11,29,11,"code"],[25,15,29,15],[25,20,29,20,"referenceCode"],[25,33,29,33],[26,2,30,0],[27,2,32,0],[27,11,32,9,"cmpStr"],[27,17,32,15,"cmpStr"],[27,18,32,16,"testStr"],[27,25,32,23],[27,27,32,25,"start"],[27,32,32,30],[27,34,32,32,"end"],[27,37,32,35],[27,39,32,37,"referenceStr"],[27,51,32,49],[27,53,32,51],[28,4,33,4],[28,8,33,8,"end"],[28,11,33,11],[28,14,33,14,"start"],[28,19,33,19],[28,24,33,24,"referenceStr"],[28,36,33,36],[28,37,33,37,"length"],[28,43,33,43],[28,45,33,45],[29,6,34,8],[29,13,34,15],[29,18,34,20],[30,4,35,4],[31,4,37,4],[31,8,37,8,"start"],[31,13,37,13],[31,16,37,16],[31,17,37,17],[31,21,37,21,"end"],[31,24,37,24],[31,27,37,27,"testStr"],[31,34,37,34],[31,35,37,35,"length"],[31,41,37,41],[31,43,37,43],[32,6,38,8],[32,13,38,15],[32,18,38,20],[33,4,39,4],[34,4,41,4],[34,9,41,9],[34,13,41,13,"i"],[34,14,41,14],[34,17,41,17,"start"],[34,22,41,22],[34,24,41,24,"i"],[34,25,41,25],[34,28,41,28,"end"],[34,31,41,31],[34,33,41,33,"i"],[34,34,41,34],[34,36,41,36],[34,38,41,38],[35,6,42,8],[35,10,42,12,"testCode"],[35,18,42,20],[35,21,42,23,"testStr"],[35,28,42,30],[35,29,42,31,"charCodeAt"],[35,39,42,41],[35,40,42,42,"i"],[35,41,42,43],[35,42,42,44],[36,6,43,8],[36,10,43,12,"referenceCode"],[36,23,43,25],[36,26,43,28,"referenceStr"],[36,38,43,40],[36,39,43,41,"charCodeAt"],[36,49,43,51],[36,50,43,52,"i"],[36,51,43,53],[36,54,43,56,"start"],[36,59,43,61],[36,60,43,62],[38,6,45,8],[39,6,46,8],[39,10,46,12,"isUppercaseLetter"],[39,27,46,29],[39,28,46,30,"testCode"],[39,36,46,38],[39,37,46,39],[39,39,46,41],[40,8,47,12,"testCode"],[40,16,47,20],[40,19,47,23,"testCode"],[40,27,47,31],[40,30,47,34],[40,32,47,36],[41,6,48,8],[42,6,50,8],[42,10,50,12,"testCode"],[42,18,50,20],[42,23,50,25,"referenceCode"],[42,36,50,38],[42,38,50,40],[43,8,51,12],[43,15,51,19],[43,20,51,24],[44,6,52,8],[45,4,53,4],[46,4,55,4],[46,11,55,11],[46,15,55,15],[47,2,56,0],[48,2,58,0],[48,11,58,9,"findWhiteSpaceStart"],[48,30,58,28,"findWhiteSpaceStart"],[48,31,58,29,"source"],[48,37,58,35],[48,39,58,37,"offset"],[48,45,58,43],[48,47,58,45],[49,4,59,4],[49,11,59,11,"offset"],[49,17,59,17],[49,21,59,21],[49,22,59,22],[49,24,59,24,"offset"],[49,30,59,30],[49,32,59,32],[49,34,59,34],[50,6,60,8],[50,10,60,12],[50,11,60,13,"isWhiteSpace"],[50,23,60,25],[50,24,60,26,"source"],[50,30,60,32],[50,31,60,33,"charCodeAt"],[50,41,60,43],[50,42,60,44,"offset"],[50,48,60,50],[50,49,60,51],[50,50,60,52],[50,52,60,54],[51,8,61,12],[52,6,62,8],[53,4,63,4],[54,4,65,4],[54,11,65,11,"offset"],[54,17,65,17],[54,20,65,20],[54,21,65,21],[55,2,66,0],[56,2,68,0],[56,11,68,9,"findWhiteSpaceEnd"],[56,28,68,26,"findWhiteSpaceEnd"],[56,29,68,27,"source"],[56,35,68,33],[56,37,68,35,"offset"],[56,43,68,41],[56,45,68,43],[57,4,69,4],[57,11,69,11,"offset"],[57,17,69,17],[57,20,69,20,"source"],[57,26,69,26],[57,27,69,27,"length"],[57,33,69,33],[57,35,69,35,"offset"],[57,41,69,41],[57,43,69,43],[57,45,69,45],[58,6,70,8],[58,10,70,12],[58,11,70,13,"isWhiteSpace"],[58,23,70,25],[58,24,70,26,"source"],[58,30,70,32],[58,31,70,33,"charCodeAt"],[58,41,70,43],[58,42,70,44,"offset"],[58,48,70,50],[58,49,70,51],[58,50,70,52],[58,52,70,54],[59,8,71,12],[60,6,72,8],[61,4,73,4],[62,4,75,4],[62,11,75,11,"offset"],[62,17,75,17],[63,2,76,0],[64,2,78,0],[64,11,78,9,"findDecimalNumberEnd"],[64,31,78,29,"findDecimalNumberEnd"],[64,32,78,30,"source"],[64,38,78,36],[64,40,78,38,"offset"],[64,46,78,44],[64,48,78,46],[65,4,79,4],[65,11,79,11,"offset"],[65,17,79,17],[65,20,79,20,"source"],[65,26,79,26],[65,27,79,27,"length"],[65,33,79,33],[65,35,79,35,"offset"],[65,41,79,41],[65,43,79,43],[65,45,79,45],[66,6,80,8],[66,10,80,12],[66,11,80,13,"isDigit"],[66,18,80,20],[66,19,80,21,"source"],[66,25,80,27],[66,26,80,28,"charCodeAt"],[66,36,80,38],[66,37,80,39,"offset"],[66,43,80,45],[66,44,80,46],[66,45,80,47],[66,47,80,49],[67,8,81,12],[68,6,82,8],[69,4,83,4],[70,4,85,4],[70,11,85,11,"offset"],[70,17,85,17],[71,2,86,0],[73,2,88,0],[74,2,89,0],[74,11,89,9,"consumeEscaped"],[74,25,89,23,"consumeEscaped"],[74,26,89,24,"source"],[74,32,89,30],[74,34,89,32,"offset"],[74,40,89,38],[74,42,89,40],[75,4,90,4],[76,4,91,4],[77,4,92,4,"offset"],[77,10,92,10],[77,14,92,14],[77,15,92,15],[79,4,94,4],[80,4,95,4],[80,8,95,8,"isHexDigit"],[80,18,95,18],[80,19,95,19,"getCharCode"],[80,30,95,30],[80,31,95,31,"source"],[80,37,95,37],[80,39,95,39,"offset"],[80,45,95,45],[80,48,95,48],[80,49,95,49],[80,50,95,50],[80,51,95,51],[80,53,95,53],[81,6,96,8],[82,6,97,8],[83,6,98,8],[83,11,98,13],[83,15,98,17,"maxOffset"],[83,24,98,26],[83,27,98,29,"Math"],[83,31,98,33],[83,32,98,34,"min"],[83,35,98,37],[83,36,98,38,"source"],[83,42,98,44],[83,43,98,45,"length"],[83,49,98,51],[83,51,98,53,"offset"],[83,57,98,59],[83,60,98,62],[83,61,98,63],[83,62,98,64],[83,64,98,66,"offset"],[83,70,98,72],[83,73,98,75,"maxOffset"],[83,82,98,84],[83,84,98,86,"offset"],[83,90,98,92],[83,92,98,94],[83,94,98,96],[84,8,99,12],[84,12,99,16],[84,13,99,17,"isHexDigit"],[84,23,99,27],[84,24,99,28,"getCharCode"],[84,35,99,39],[84,36,99,40,"source"],[84,42,99,46],[84,44,99,48,"offset"],[84,50,99,54],[84,51,99,55],[84,52,99,56],[84,54,99,58],[85,10,100,16],[86,8,101,12],[87,6,102,8],[89,6,104,8],[90,6,105,8],[90,10,105,12,"code"],[90,14,105,16],[90,17,105,19,"getCharCode"],[90,28,105,30],[90,29,105,31,"source"],[90,35,105,37],[90,37,105,39,"offset"],[90,43,105,45],[90,44,105,46],[91,6,106,8],[91,10,106,12,"isWhiteSpace"],[91,22,106,24],[91,23,106,25,"code"],[91,27,106,29],[91,28,106,30],[91,30,106,32],[92,8,107,12,"offset"],[92,14,107,18],[92,18,107,22,"getNewlineLength"],[92,34,107,38],[92,35,107,39,"source"],[92,41,107,45],[92,43,107,47,"offset"],[92,49,107,53],[92,51,107,55,"code"],[92,55,107,59],[92,56,107,60],[93,6,108,8],[94,4,109,4],[95,4,111,4],[95,11,111,11,"offset"],[95,17,111,17],[96,2,112,0],[98,2,114,0],[99,2,115,0],[100,2,116,0],[101,2,117,0],[102,2,118,0],[102,11,118,9,"consumeName"],[102,22,118,20,"consumeName"],[102,23,118,21,"source"],[102,29,118,27],[102,31,118,29,"offset"],[102,37,118,35],[102,39,118,37],[103,4,119,4],[104,4,120,4],[105,4,121,4],[105,11,121,11,"offset"],[105,17,121,17],[105,20,121,20,"source"],[105,26,121,26],[105,27,121,27,"length"],[105,33,121,33],[105,35,121,35,"offset"],[105,41,121,41],[105,43,121,43],[105,45,121,45],[106,6,122,8],[106,10,122,12,"code"],[106,14,122,16],[106,17,122,19,"source"],[106,23,122,25],[106,24,122,26,"charCodeAt"],[106,34,122,36],[106,35,122,37,"offset"],[106,41,122,43],[106,42,122,44],[108,6,124,8],[109,6,125,8],[109,10,125,12,"isName"],[109,16,125,18],[109,17,125,19,"code"],[109,21,125,23],[109,22,125,24],[109,24,125,26],[110,8,126,12],[111,8,127,12],[112,6,128,8],[114,6,130,8],[115,6,131,8],[115,10,131,12,"isValidEscape"],[115,23,131,25],[115,24,131,26,"code"],[115,28,131,30],[115,30,131,32,"getCharCode"],[115,41,131,43],[115,42,131,44,"source"],[115,48,131,50],[115,50,131,52,"offset"],[115,56,131,58],[115,59,131,61],[115,60,131,62],[115,61,131,63],[115,62,131,64],[115,64,131,66],[116,8,132,12],[117,8,133,12,"offset"],[117,14,133,18],[117,17,133,21,"consumeEscaped"],[117,31,133,35],[117,32,133,36,"source"],[117,38,133,42],[117,40,133,44,"offset"],[117,46,133,50],[117,47,133,51],[117,50,133,54],[117,51,133,55],[118,8,134,12],[119,6,135,8],[121,6,137,8],[122,6,138,8],[123,6,139,8],[124,4,140,4],[125,4,142,4],[125,11,142,11,"offset"],[125,17,142,17],[126,2,143,0],[128,2,145,0],[129,2,146,0],[129,11,146,9,"consumeNumber"],[129,24,146,22,"consumeNumber"],[129,25,146,23,"source"],[129,31,146,29],[129,33,146,31,"offset"],[129,39,146,37],[129,41,146,39],[130,4,147,4],[130,8,147,8,"code"],[130,12,147,12],[130,15,147,15,"source"],[130,21,147,21],[130,22,147,22,"charCodeAt"],[130,32,147,32],[130,33,147,33,"offset"],[130,39,147,39],[130,40,147,40],[132,4,149,4],[133,4,150,4],[134,4,151,4],[134,8,151,8,"code"],[134,12,151,12],[134,17,151,17],[134,23,151,23],[134,27,151,27,"code"],[134,31,151,31],[134,36,151,36],[134,42,151,42],[134,44,151,44],[135,6,152,8,"code"],[135,10,152,12],[135,13,152,15,"source"],[135,19,152,21],[135,20,152,22,"charCodeAt"],[135,30,152,32],[135,31,152,33,"offset"],[135,37,152,39],[135,41,152,43],[135,42,152,44],[135,43,152,45],[136,4,153,4],[138,4,155,4],[139,4,156,4],[139,8,156,8,"isDigit"],[139,15,156,15],[139,16,156,16,"code"],[139,20,156,20],[139,21,156,21],[139,23,156,23],[140,6,157,8,"offset"],[140,12,157,14],[140,15,157,17,"findDecimalNumberEnd"],[140,35,157,37],[140,36,157,38,"source"],[140,42,157,44],[140,44,157,46,"offset"],[140,50,157,52],[140,53,157,55],[140,54,157,56],[140,55,157,57],[141,6,158,8,"code"],[141,10,158,12],[141,13,158,15,"source"],[141,19,158,21],[141,20,158,22,"charCodeAt"],[141,30,158,32],[141,31,158,33,"offset"],[141,37,158,39],[141,38,158,40],[142,4,159,4],[144,4,161,4],[145,4,162,4],[145,8,162,8,"code"],[145,12,162,12],[145,17,162,17],[145,23,162,23],[145,27,162,27,"isDigit"],[145,34,162,34],[145,35,162,35,"source"],[145,41,162,41],[145,42,162,42,"charCodeAt"],[145,52,162,52],[145,53,162,53,"offset"],[145,59,162,59],[145,62,162,62],[145,63,162,63],[145,64,162,64],[145,65,162,65],[145,67,162,67],[146,6,163,8],[147,6,164,8],[148,6,165,8,"code"],[148,10,165,12],[148,13,165,15,"source"],[148,19,165,21],[148,20,165,22,"charCodeAt"],[148,30,165,32],[148,31,165,33,"offset"],[148,37,165,39],[148,41,165,43],[148,42,165,44],[148,43,165,45],[150,6,167,8],[151,6,168,8],[153,6,170,8],[155,6,172,8,"offset"],[155,12,172,14],[155,15,172,17,"findDecimalNumberEnd"],[155,35,172,37],[155,36,172,38,"source"],[155,42,172,44],[155,44,172,46,"offset"],[155,50,172,52],[155,51,172,53],[156,4,173,4],[158,4,175,4],[159,4,176,4],[160,4,177,4],[160,8,177,8,"cmpChar"],[160,15,177,15],[160,16,177,16,"source"],[160,22,177,22],[160,24,177,24,"offset"],[160,30,177,30],[160,32,177,32],[160,35,177,35],[160,36,177,36],[160,43,177,43],[160,44,177,44],[160,46,177,46],[161,6,178,8],[161,10,178,12,"sign"],[161,14,178,16],[161,17,178,19],[161,18,178,20],[162,6,179,8,"code"],[162,10,179,12],[162,13,179,15,"source"],[162,19,179,21],[162,20,179,22,"charCodeAt"],[162,30,179,32],[162,31,179,33,"offset"],[162,37,179,39],[162,40,179,42],[162,41,179,43],[162,42,179,44],[164,6,181,8],[165,6,182,8],[165,10,182,12,"code"],[165,14,182,16],[165,19,182,21],[165,25,182,27],[165,29,182,31,"code"],[165,33,182,35],[165,38,182,40],[165,44,182,46],[165,46,182,48],[166,8,183,12,"sign"],[166,12,183,16],[166,15,183,19],[166,16,183,20],[167,8,184,12,"code"],[167,12,184,16],[167,15,184,19,"source"],[167,21,184,25],[167,22,184,26,"charCodeAt"],[167,32,184,36],[167,33,184,37,"offset"],[167,39,184,43],[167,42,184,46],[167,43,184,47],[167,44,184,48],[168,6,185,8],[170,6,187,8],[171,6,188,8],[171,10,188,12,"isDigit"],[171,17,188,19],[171,18,188,20,"code"],[171,22,188,24],[171,23,188,25],[171,25,188,27],[172,8,189,12],[173,8,190,12],[175,8,192,12],[176,8,193,12],[178,8,195,12],[179,8,196,12,"offset"],[179,14,196,18],[179,17,196,21,"findDecimalNumberEnd"],[179,37,196,41],[179,38,196,42,"source"],[179,44,196,48],[179,46,196,50,"offset"],[179,52,196,56],[179,55,196,59],[179,56,196,60],[179,59,196,63,"sign"],[179,63,196,67],[179,66,196,70],[179,67,196,71],[179,68,196,72],[180,6,197,8],[181,4,198,4],[182,4,200,4],[182,11,200,11,"offset"],[182,17,200,17],[183,2,201,0],[185,2,203,0],[186,2,204,0],[187,2,205,0],[188,2,206,0],[188,11,206,9,"consumeBadUrlRemnants"],[188,32,206,30,"consumeBadUrlRemnants"],[188,33,206,31,"source"],[188,39,206,37],[188,41,206,39,"offset"],[188,47,206,45],[188,49,206,47],[189,4,207,4],[190,4,208,4],[190,11,208,11,"offset"],[190,17,208,17],[190,20,208,20,"source"],[190,26,208,26],[190,27,208,27,"length"],[190,33,208,33],[190,35,208,35,"offset"],[190,41,208,41],[190,43,208,43],[190,45,208,45],[191,6,209,8],[191,10,209,12,"code"],[191,14,209,16],[191,17,209,19,"source"],[191,23,209,25],[191,24,209,26,"charCodeAt"],[191,34,209,36],[191,35,209,37,"offset"],[191,41,209,43],[191,42,209,44],[193,6,211,8],[194,6,212,8],[195,6,213,8],[195,10,213,12,"code"],[195,14,213,16],[195,19,213,21],[195,25,213,27],[195,27,213,29],[196,8,214,12],[197,8,215,12,"offset"],[197,14,215,18],[197,16,215,20],[198,8,216,12],[199,6,217,8],[200,6,219,8],[200,10,219,12,"isValidEscape"],[200,23,219,25],[200,24,219,26,"code"],[200,28,219,30],[200,30,219,32,"getCharCode"],[200,41,219,43],[200,42,219,44,"source"],[200,48,219,50],[200,50,219,52,"offset"],[200,56,219,58],[200,59,219,61],[200,60,219,62],[200,61,219,63],[200,62,219,64],[200,64,219,66],[201,8,220,12],[202,8,221,12],[203,8,222,12],[204,8,223,12],[205,8,224,12,"offset"],[205,14,224,18],[205,17,224,21,"consumeEscaped"],[205,31,224,35],[205,32,224,36,"source"],[205,38,224,42],[205,40,224,44,"offset"],[205,46,224,50],[205,47,224,51],[206,6,225,8],[207,4,226,4],[208,4,228,4],[208,11,228,11,"offset"],[208,17,228,17],[209,2,229,0],[210,2,231,0,"module"],[210,8,231,6],[210,9,231,7,"exports"],[210,16,231,14],[210,19,231,17],[211,4,232,4,"consumeEscaped"],[211,18,232,18],[211,20,232,20,"consumeEscaped"],[211,34,232,34],[212,4,233,4,"consumeName"],[212,15,233,15],[212,17,233,17,"consumeName"],[212,28,233,28],[213,4,234,4,"consumeNumber"],[213,17,234,17],[213,19,234,19,"consumeNumber"],[213,32,234,32],[214,4,235,4,"consumeBadUrlRemnants"],[214,25,235,25],[214,27,235,27,"consumeBadUrlRemnants"],[214,48,235,48],[215,4,237,4,"cmpChar"],[215,11,237,11],[215,13,237,13,"cmpChar"],[215,20,237,20],[216,4,238,4,"cmpStr"],[216,10,238,10],[216,12,238,12,"cmpStr"],[216,18,238,18],[217,4,240,4,"getNewlineLength"],[217,20,240,20],[217,22,240,22,"getNewlineLength"],[217,38,240,38],[218,4,241,4,"findWhiteSpaceStart"],[218,23,241,23],[218,25,241,25,"findWhiteSpaceStart"],[218,44,241,44],[219,4,242,4,"findWhiteSpaceEnd"],[219,21,242,21],[219,23,242,23,"findWhiteSpaceEnd"],[220,2,243,0],[220,3,243,1],[221,0,243,2]],"functionMap":{"names":["<global>","getCharCode","getNewlineLength","cmpChar","cmpStr","findWhiteSpaceStart","findWhiteSpaceEnd","findDecimalNumberEnd","consumeEscaped","consumeName","consumeNumber","consumeBadUrlRemnants"],"mappings":"AAA;ACQ;CDE;AEE;CFM;AGE;CHS;AIE;CJwB;AKE;CLQ;AME;CNQ;AOE;CPQ;AQG;CRuB;ASM;CTyB;AUG;CVuD;AWK;CXuB"}},"type":"js/module"}]}