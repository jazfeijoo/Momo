{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":174,"column":44,"index":6652}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":174,"column":44,"index":6652}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":174,"column":44,"index":6652}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"expo-constants","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":39,"index":39}}],"key":"2TquPknmjb1g5OMuvQ0eTuioYjU="}},{"name":"pretty-format","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":40},"end":{"line":2,"column":41,"index":81}}],"key":"Lk6dnOlknI2idzN76JnVT0sQ8BY="}},{"name":"react-native/Libraries/Core/Devtools/parseErrorStack","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":82},"end":{"line":3,"column":83,"index":165}}],"key":"rsClDMvmlIpoXfUpPx9vvxoBg/w="}},{"name":"react-native/Libraries/Core/Devtools/symbolicateStackTrace","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":166},"end":{"line":4,"column":95,"index":261}}],"key":"pz4QfFC69Jw8NJ2vWxeDF9UF53s="}},{"name":"./format/ReactNodeFormatter","data":{"asyncType":null,"locs":[{"start":{"line":5,"column":0,"index":262},"end":{"line":5,"column":61,"index":323}}],"key":"VCEjNY8syYu9Uh/W0aoJmmYP0lc="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.EXPO_CONSOLE_METHOD_NAME = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"expo-constants\"));\n  var _prettyFormat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"pretty-format\"));\n  var _parseErrorStack = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"react-native/Libraries/Core/Devtools/parseErrorStack\"));\n  var _symbolicateStackTrace = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"react-native/Libraries/Core/Devtools/symbolicateStackTrace\"));\n  var _ReactNodeFormatter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./format/ReactNodeFormatter\"));\n  var EXPO_CONSOLE_METHOD_NAME = exports.EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';\n  function serializeLogDataAsync(_x, _x2) {\n    return _serializeLogDataAsync.apply(this, arguments);\n  }\n  function _serializeLogDataAsync() {\n    _serializeLogDataAsync = (0, _asyncToGenerator2.default)(function* (data, level) {\n      var serializedValues;\n      var includesStack = false;\n      if (_stackTraceLogsSupported()) {\n        if (_isUnhandledPromiseRejection(data, level)) {\n          var rawStack = data[0];\n          var syntheticError = {\n            stack: rawStack\n          };\n          var stack = yield _symbolicateErrorAsync(syntheticError);\n          if (!stack.length) {\n            serializedValues = _stringifyLogData(data);\n          } else {\n            // NOTE: This doesn't handle error messages with newlines\n            var errorMessage = rawStack.split('\\n')[1];\n            serializedValues = [{\n              message: `[Unhandled promise rejection: ${errorMessage}]`,\n              stack: _formatStack(stack)\n            }];\n            includesStack = true;\n          }\n        } else if (data.length === 1 && data[0] instanceof Error) {\n          // When there's only one argument to the log function and that argument is an error, we\n          // include the error's stack. If there's more than one argument then we don't include the\n          // stack because it's not easy to display nicely in our current UI.\n          var serializedError = yield _serializeErrorAsync(data[0]);\n          serializedValues = [serializedError];\n          includesStack = serializedError.hasOwnProperty('stack');\n        } else if (level === 'warn' || level === 'error') {\n          // For console.warn and console.error it is usually useful to know the stack that leads to the\n          // warning or error, so we provide this information to help out with debugging\n          var error = _captureConsoleStackTrace();\n          // [\"hello\", \"world\"] becomes \"hello, world\"\n          var _errorMessage = _stringifyLogData(data).join(', ');\n          var _serializedError = yield _serializeErrorAsync(error, _errorMessage);\n          serializedValues = [_serializedError];\n          includesStack = _serializedError.hasOwnProperty('stack');\n        } else {\n          serializedValues = _stringifyLogData(data);\n        }\n      } else {\n        serializedValues = _stringifyLogData(data);\n      }\n      return {\n        body: (0, _toConsumableArray2.default)(serializedValues),\n        includesStack: includesStack\n      };\n    });\n    return _serializeLogDataAsync.apply(this, arguments);\n  }\n  function _stringifyLogData(data) {\n    return data.map(function (item) {\n      // define the max length for log msg to be first 10000 characters\n      var LOG_MESSAGE_MAX_LENGTH = 10000;\n      var result = typeof item === 'string' ? item : (0, _prettyFormat.default)(item, {\n        plugins: [_ReactNodeFormatter.default]\n      });\n      // check the size of string returned\n      if (result.length > LOG_MESSAGE_MAX_LENGTH) {\n        var truncatedResult = result.substring(0, LOG_MESSAGE_MAX_LENGTH);\n        // truncate the result string to the max length\n        truncatedResult += `...(truncated to the first ${LOG_MESSAGE_MAX_LENGTH} characters)`;\n        return truncatedResult;\n      } else {\n        return result;\n      }\n    });\n  }\n  function _serializeErrorAsync(_x3, _x4) {\n    return _serializeErrorAsync2.apply(this, arguments);\n  }\n  function _serializeErrorAsync2() {\n    _serializeErrorAsync2 = (0, _asyncToGenerator2.default)(function* (error, message) {\n      if (message == null) {\n        message = error.message;\n      }\n      if (!error.stack || !error.stack.length) {\n        return (0, _prettyFormat.default)(error);\n      }\n      var stack = yield _symbolicateErrorAsync(error);\n      var formattedStack = _formatStack(stack);\n      return {\n        message: message,\n        stack: formattedStack\n      };\n    });\n    return _serializeErrorAsync2.apply(this, arguments);\n  }\n  function _symbolicateErrorAsync(_x5) {\n    return _symbolicateErrorAsync2.apply(this, arguments);\n  }\n  function _symbolicateErrorAsync2() {\n    _symbolicateErrorAsync2 = (0, _asyncToGenerator2.default)(function* (error) {\n      // @ts-ignore: parseErrorStack accepts nullable string after RN 0.64 but @types/react-native does not updated yet.\n      var parsedStack = (0, _parseErrorStack.default)(error == null ? void 0 : error.stack);\n      var symbolicatedStack;\n      try {\n        var _yield$symbolicateSta, _yield$symbolicateSta2;\n        // @ts-ignore: symbolicateStackTrace has different real/Flow declaration\n        // than the one in DefinitelyTyped.\n        symbolicatedStack = (_yield$symbolicateSta = (_yield$symbolicateSta2 = yield (0, _symbolicateStackTrace.default)(parsedStack)) == null ? void 0 : _yield$symbolicateSta2.stack) != null ? _yield$symbolicateSta : null;\n      } catch (_unused) {\n        return parsedStack;\n      }\n      // In this context an unsymbolicated stack is better than no stack\n      if (!symbolicatedStack) {\n        return parsedStack;\n      }\n      // Clean the stack trace\n      return symbolicatedStack.map(_removeProjectRoot);\n    });\n    return _symbolicateErrorAsync2.apply(this, arguments);\n  }\n  function _formatStack(stack) {\n    return stack.map(function (frame) {\n      var line = `${frame.file}:${frame.lineNumber}`;\n      if (frame.column != null) {\n        line += `:${frame.column}`;\n      }\n      line += ` in ${frame.methodName}`;\n      return line;\n    }).join('\\n');\n  }\n  function _removeProjectRoot(frame) {\n    var filename = frame.file;\n    if (filename == null) {\n      return frame;\n    }\n    var projectRoot = _getProjectRoot();\n    if (projectRoot == null) {\n      return frame;\n    }\n    if (filename.startsWith(projectRoot)) {\n      filename = filename.substring(projectRoot.length);\n      if (filename[0] === '/' || filename[0] === '\\\\') {\n        filename = filename.substring(1);\n      }\n      frame.file = filename;\n    }\n    return frame;\n  }\n  /**\n   * Returns whether the development server that served this project supports logs with a stack trace.\n   * Specifically, the version of Expo CLI that includes `projectRoot` in the manifest also accepts\n   * payloads of the form:\n   *\n   * {\n   *   includesStack: boolean, body: [{ message: string, stack: string }],\n   * }\n   */\n  function _stackTraceLogsSupported() {\n    return !!(__DEV__ && _getProjectRoot());\n  }\n  function _isUnhandledPromiseRejection(data, level) {\n    return level === 'warn' && typeof data[0] === 'string' && /^Possible Unhandled Promise Rejection/.test(data[0]);\n  }\n  function _captureConsoleStackTrace() {\n    try {\n      throw new Error();\n    } catch (error) {\n      var stackLines = error.stack.split('\\n');\n      var consoleMethodIndex = stackLines.findIndex(function (frame) {\n        return frame.includes(EXPO_CONSOLE_METHOD_NAME);\n      });\n      if (consoleMethodIndex !== -1) {\n        stackLines = stackLines.slice(consoleMethodIndex + 1);\n        error.stack = stackLines.join('\\n');\n      }\n      return error;\n    }\n  }\n  function _getProjectRoot() {\n    var _Constants$expoGoConf, _Constants$expoGoConf2, _Constants$expoGoConf3;\n    return (_Constants$expoGoConf = (_Constants$expoGoConf2 = _expoConstants.default.expoGoConfig) == null ? void 0 : (_Constants$expoGoConf3 = _Constants$expoGoConf2.developer) == null ? void 0 : _Constants$expoGoConf3.projectRoot) != null ? _Constants$expoGoConf : null;\n  }\n  var _default = exports.default = {\n    serializeLogDataAsync: serializeLogDataAsync\n  };\n});","lineCount":197,"map":[[9,2,1,0],[9,6,1,0,"_expoConstants"],[9,20,1,0],[9,23,1,0,"_interopRequireDefault"],[9,45,1,0],[9,46,1,0,"_$$_REQUIRE"],[9,57,1,0],[9,58,1,0,"_dependencyMap"],[9,72,1,0],[10,2,2,0],[10,6,2,0,"_prettyFormat"],[10,19,2,0],[10,22,2,0,"_interopRequireDefault"],[10,44,2,0],[10,45,2,0,"_$$_REQUIRE"],[10,56,2,0],[10,57,2,0,"_dependencyMap"],[10,71,2,0],[11,2,3,0],[11,6,3,0,"_parseErrorStack"],[11,22,3,0],[11,25,3,0,"_interopRequireDefault"],[11,47,3,0],[11,48,3,0,"_$$_REQUIRE"],[11,59,3,0],[11,60,3,0,"_dependencyMap"],[11,74,3,0],[12,2,4,0],[12,6,4,0,"_symbolicateStackTrace"],[12,28,4,0],[12,31,4,0,"_interopRequireDefault"],[12,53,4,0],[12,54,4,0,"_$$_REQUIRE"],[12,65,4,0],[12,66,4,0,"_dependencyMap"],[12,80,4,0],[13,2,5,0],[13,6,5,0,"_ReactNodeFormatter"],[13,25,5,0],[13,28,5,0,"_interopRequireDefault"],[13,50,5,0],[13,51,5,0,"_$$_REQUIRE"],[13,62,5,0],[13,63,5,0,"_dependencyMap"],[13,77,5,0],[14,2,6,7],[14,6,6,13,"EXPO_CONSOLE_METHOD_NAME"],[14,30,6,37],[14,33,6,37,"exports"],[14,40,6,37],[14,41,6,37,"EXPO_CONSOLE_METHOD_NAME"],[14,65,6,37],[14,68,6,40],[14,86,6,58],[15,2,6,59],[15,11,7,15,"serializeLogDataAsync"],[15,32,7,36,"serializeLogDataAsync"],[15,33,7,36,"_x"],[15,35,7,36],[15,37,7,36,"_x2"],[15,40,7,36],[16,4,7,36],[16,11,7,36,"_serializeLogDataAsync"],[16,33,7,36],[16,34,7,36,"apply"],[16,39,7,36],[16,46,7,36,"arguments"],[16,55,7,36],[17,2,7,36],[18,2,7,36],[18,11,7,36,"_serializeLogDataAsync"],[18,34,7,36],[19,4,7,36,"_serializeLogDataAsync"],[19,26,7,36],[19,33,7,36,"_asyncToGenerator2"],[19,51,7,36],[19,52,7,36,"default"],[19,59,7,36],[19,61,7,0],[19,72,7,37,"data"],[19,76,7,41],[19,78,7,43,"level"],[19,83,7,48],[19,85,7,50],[20,6,8,4],[20,10,8,8,"serializedValues"],[20,26,8,24],[21,6,9,4],[21,10,9,8,"includesStack"],[21,23,9,21],[21,26,9,24],[21,31,9,29],[22,6,10,4],[22,10,10,8,"_stackTraceLogsSupported"],[22,34,10,32],[22,35,10,33],[22,36,10,34],[22,38,10,36],[23,8,11,8],[23,12,11,12,"_isUnhandledPromiseRejection"],[23,40,11,40],[23,41,11,41,"data"],[23,45,11,45],[23,47,11,47,"level"],[23,52,11,52],[23,53,11,53],[23,55,11,55],[24,10,12,12],[24,14,12,18,"rawStack"],[24,22,12,26],[24,25,12,29,"data"],[24,29,12,33],[24,30,12,34],[24,31,12,35],[24,32,12,36],[25,10,13,12],[25,14,13,18,"syntheticError"],[25,28,13,32],[25,31,13,35],[26,12,13,37,"stack"],[26,17,13,42],[26,19,13,44,"rawStack"],[27,10,13,53],[27,11,13,54],[28,10,14,12],[28,14,14,18,"stack"],[28,19,14,23],[28,28,14,32,"_symbolicateErrorAsync"],[28,50,14,54],[28,51,14,55,"syntheticError"],[28,65,14,69],[28,66,14,70],[29,10,15,12],[29,14,15,16],[29,15,15,17,"stack"],[29,20,15,22],[29,21,15,23,"length"],[29,27,15,29],[29,29,15,31],[30,12,16,16,"serializedValues"],[30,28,16,32],[30,31,16,35,"_stringifyLogData"],[30,48,16,52],[30,49,16,53,"data"],[30,53,16,57],[30,54,16,58],[31,10,17,12],[31,11,17,13],[31,17,18,17],[32,12,19,16],[33,12,20,16],[33,16,20,22,"errorMessage"],[33,28,20,34],[33,31,20,37,"rawStack"],[33,39,20,45],[33,40,20,46,"split"],[33,45,20,51],[33,46,20,52],[33,50,20,56],[33,51,20,57],[33,52,20,58],[33,53,20,59],[33,54,20,60],[34,12,21,16,"serializedValues"],[34,28,21,32],[34,31,21,35],[34,32,22,20],[35,14,23,24,"message"],[35,21,23,31],[35,23,23,34],[35,56,23,66,"errorMessage"],[35,68,23,79],[35,71,23,81],[36,14,24,24,"stack"],[36,19,24,29],[36,21,24,31,"_formatStack"],[36,33,24,43],[36,34,24,44,"stack"],[36,39,24,49],[37,12,25,20],[37,13,25,21],[37,14,26,17],[38,12,27,16,"includesStack"],[38,25,27,29],[38,28,27,32],[38,32,27,36],[39,10,28,12],[40,8,29,8],[40,9,29,9],[40,15,30,13],[40,19,30,17,"data"],[40,23,30,21],[40,24,30,22,"length"],[40,30,30,28],[40,35,30,33],[40,36,30,34],[40,40,30,38,"data"],[40,44,30,42],[40,45,30,43],[40,46,30,44],[40,47,30,45],[40,59,30,57,"Error"],[40,64,30,62],[40,66,30,64],[41,10,31,12],[42,10,32,12],[43,10,33,12],[44,10,34,12],[44,14,34,18,"serializedError"],[44,29,34,33],[44,38,34,42,"_serializeErrorAsync"],[44,58,34,62],[44,59,34,63,"data"],[44,63,34,67],[44,64,34,68],[44,65,34,69],[44,66,34,70],[44,67,34,71],[45,10,35,12,"serializedValues"],[45,26,35,28],[45,29,35,31],[45,30,35,32,"serializedError"],[45,45,35,47],[45,46,35,48],[46,10,36,12,"includesStack"],[46,23,36,25],[46,26,36,28,"serializedError"],[46,41,36,43],[46,42,36,44,"hasOwnProperty"],[46,56,36,58],[46,57,36,59],[46,64,36,66],[46,65,36,67],[47,8,37,8],[47,9,37,9],[47,15,38,13],[47,19,38,17,"level"],[47,24,38,22],[47,29,38,27],[47,35,38,33],[47,39,38,37,"level"],[47,44,38,42],[47,49,38,47],[47,56,38,54],[47,58,38,56],[48,10,39,12],[49,10,40,12],[50,10,41,12],[50,14,41,18,"error"],[50,19,41,23],[50,22,41,26,"_captureConsoleStackTrace"],[50,47,41,51],[50,48,41,52],[50,49,41,53],[51,10,42,12],[52,10,43,12],[52,14,43,18,"errorMessage"],[52,27,43,30],[52,30,43,33,"_stringifyLogData"],[52,47,43,50],[52,48,43,51,"data"],[52,52,43,55],[52,53,43,56],[52,54,43,57,"join"],[52,58,43,61],[52,59,43,62],[52,63,43,66],[52,64,43,67],[53,10,44,12],[53,14,44,18,"serializedError"],[53,30,44,33],[53,39,44,42,"_serializeErrorAsync"],[53,59,44,62],[53,60,44,63,"error"],[53,65,44,68],[53,67,44,70,"errorMessage"],[53,80,44,82],[53,81,44,83],[54,10,45,12,"serializedValues"],[54,26,45,28],[54,29,45,31],[54,30,45,32,"serializedError"],[54,46,45,47],[54,47,45,48],[55,10,46,12,"includesStack"],[55,23,46,25],[55,26,46,28,"serializedError"],[55,42,46,43],[55,43,46,44,"hasOwnProperty"],[55,57,46,58],[55,58,46,59],[55,65,46,66],[55,66,46,67],[56,8,47,8],[56,9,47,9],[56,15,48,13],[57,10,49,12,"serializedValues"],[57,26,49,28],[57,29,49,31,"_stringifyLogData"],[57,46,49,48],[57,47,49,49,"data"],[57,51,49,53],[57,52,49,54],[58,8,50,8],[59,6,51,4],[59,7,51,5],[59,13,52,9],[60,8,53,8,"serializedValues"],[60,24,53,24],[60,27,53,27,"_stringifyLogData"],[60,44,53,44],[60,45,53,45,"data"],[60,49,53,49],[60,50,53,50],[61,6,54,4],[62,6,55,4],[62,13,55,11],[63,8,56,8,"body"],[63,12,56,12],[63,18,56,12,"_toConsumableArray2"],[63,37,56,12],[63,38,56,12,"default"],[63,45,56,12],[63,47,56,18,"serializedValues"],[63,63,56,34],[63,64,56,35],[64,8,57,8,"includesStack"],[64,21,57,21],[64,23,57,8,"includesStack"],[65,6,58,4],[65,7,58,5],[66,4,59,0],[66,5,59,1],[67,4,59,1],[67,11,59,1,"_serializeLogDataAsync"],[67,33,59,1],[67,34,59,1,"apply"],[67,39,59,1],[67,46,59,1,"arguments"],[67,55,59,1],[68,2,59,1],[69,2,60,0],[69,11,60,9,"_stringifyLogData"],[69,28,60,26,"_stringifyLogData"],[69,29,60,27,"data"],[69,33,60,31],[69,35,60,33],[70,4,61,4],[70,11,61,11,"data"],[70,15,61,15],[70,16,61,16,"map"],[70,19,61,19],[70,20,61,20],[70,30,61,21,"item"],[70,34,61,25],[70,36,61,30],[71,6,62,8],[72,6,63,8],[72,10,63,14,"LOG_MESSAGE_MAX_LENGTH"],[72,32,63,36],[72,35,63,39],[72,40,63,44],[73,6,64,8],[73,10,64,14,"result"],[73,16,64,20],[73,19,64,23],[73,26,64,30,"item"],[73,30,64,34],[73,35,64,39],[73,43,64,47],[73,46,64,50,"item"],[73,50,64,54],[73,53,64,57],[73,57,64,57,"prettyFormat"],[73,78,64,69],[73,80,64,70,"item"],[73,84,64,74],[73,86,64,76],[74,8,64,78,"plugins"],[74,15,64,85],[74,17,64,87],[74,18,64,88,"ReactNodeFormatter"],[74,45,64,106],[75,6,64,108],[75,7,64,109],[75,8,64,110],[76,6,65,8],[77,6,66,8],[77,10,66,12,"result"],[77,16,66,18],[77,17,66,19,"length"],[77,23,66,25],[77,26,66,28,"LOG_MESSAGE_MAX_LENGTH"],[77,48,66,50],[77,50,66,52],[78,8,67,12],[78,12,67,16,"truncatedResult"],[78,27,67,31],[78,30,67,34,"result"],[78,36,67,40],[78,37,67,41,"substring"],[78,46,67,50],[78,47,67,51],[78,48,67,52],[78,50,67,54,"LOG_MESSAGE_MAX_LENGTH"],[78,72,67,76],[78,73,67,77],[79,8,68,12],[80,8,69,12,"truncatedResult"],[80,23,69,27],[80,27,69,32],[80,57,69,61,"LOG_MESSAGE_MAX_LENGTH"],[80,79,69,84],[80,93,69,97],[81,8,70,12],[81,15,70,19,"truncatedResult"],[81,30,70,34],[82,6,71,8],[82,7,71,9],[82,13,72,13],[83,8,73,12],[83,15,73,19,"result"],[83,21,73,25],[84,6,74,8],[85,4,75,4],[85,5,75,5],[85,6,75,6],[86,2,76,0],[87,2,76,1],[87,11,77,15,"_serializeErrorAsync"],[87,31,77,35,"_serializeErrorAsync"],[87,32,77,35,"_x3"],[87,35,77,35],[87,37,77,35,"_x4"],[87,40,77,35],[88,4,77,35],[88,11,77,35,"_serializeErrorAsync2"],[88,32,77,35],[88,33,77,35,"apply"],[88,38,77,35],[88,45,77,35,"arguments"],[88,54,77,35],[89,2,77,35],[90,2,77,35],[90,11,77,35,"_serializeErrorAsync2"],[90,33,77,35],[91,4,77,35,"_serializeErrorAsync2"],[91,25,77,35],[91,32,77,35,"_asyncToGenerator2"],[91,50,77,35],[91,51,77,35,"default"],[91,58,77,35],[91,60,77,0],[91,71,77,36,"error"],[91,76,77,41],[91,78,77,43,"message"],[91,85,77,50],[91,87,77,52],[92,6,78,4],[92,10,78,8,"message"],[92,17,78,15],[92,21,78,19],[92,25,78,23],[92,27,78,25],[93,8,79,8,"message"],[93,15,79,15],[93,18,79,18,"error"],[93,23,79,23],[93,24,79,24,"message"],[93,31,79,31],[94,6,80,4],[95,6,81,4],[95,10,81,8],[95,11,81,9,"error"],[95,16,81,14],[95,17,81,15,"stack"],[95,22,81,20],[95,26,81,24],[95,27,81,25,"error"],[95,32,81,30],[95,33,81,31,"stack"],[95,38,81,36],[95,39,81,37,"length"],[95,45,81,43],[95,47,81,45],[96,8,82,8],[96,15,82,15],[96,19,82,15,"prettyFormat"],[96,40,82,27],[96,42,82,28,"error"],[96,47,82,33],[96,48,82,34],[97,6,83,4],[98,6,84,4],[98,10,84,10,"stack"],[98,15,84,15],[98,24,84,24,"_symbolicateErrorAsync"],[98,46,84,46],[98,47,84,47,"error"],[98,52,84,52],[98,53,84,53],[99,6,85,4],[99,10,85,10,"formattedStack"],[99,24,85,24],[99,27,85,27,"_formatStack"],[99,39,85,39],[99,40,85,40,"stack"],[99,45,85,45],[99,46,85,46],[100,6,86,4],[100,13,86,11],[101,8,86,13,"message"],[101,15,86,20],[101,17,86,13,"message"],[101,24,86,20],[102,8,86,22,"stack"],[102,13,86,27],[102,15,86,29,"formattedStack"],[103,6,86,44],[103,7,86,45],[104,4,87,0],[104,5,87,1],[105,4,87,1],[105,11,87,1,"_serializeErrorAsync2"],[105,32,87,1],[105,33,87,1,"apply"],[105,38,87,1],[105,45,87,1,"arguments"],[105,54,87,1],[106,2,87,1],[107,2,87,1],[107,11,88,15,"_symbolicateErrorAsync"],[107,33,88,37,"_symbolicateErrorAsync"],[107,34,88,37,"_x5"],[107,37,88,37],[108,4,88,37],[108,11,88,37,"_symbolicateErrorAsync2"],[108,34,88,37],[108,35,88,37,"apply"],[108,40,88,37],[108,47,88,37,"arguments"],[108,56,88,37],[109,2,88,37],[110,2,88,37],[110,11,88,37,"_symbolicateErrorAsync2"],[110,35,88,37],[111,4,88,37,"_symbolicateErrorAsync2"],[111,27,88,37],[111,34,88,37,"_asyncToGenerator2"],[111,52,88,37],[111,53,88,37,"default"],[111,60,88,37],[111,62,88,0],[111,73,88,38,"error"],[111,78,88,43],[111,80,88,45],[112,6,89,4],[113,6,90,4],[113,10,90,10,"parsedStack"],[113,21,90,21],[113,24,90,24],[113,28,90,24,"parseErrorStack"],[113,52,90,39],[113,54,90,40,"error"],[113,59,90,45],[113,79,90,40,"error"],[113,84,90,45],[113,85,90,47,"stack"],[113,90,90,52],[113,91,90,53],[114,6,91,4],[114,10,91,8,"symbolicatedStack"],[114,27,91,25],[115,6,92,4],[115,10,92,8],[116,8,92,8],[116,12,92,8,"_yield$symbolicateSta"],[116,33,92,8],[116,35,92,8,"_yield$symbolicateSta2"],[116,57,92,8],[117,8,93,8],[118,8,94,8],[119,8,95,8,"symbolicatedStack"],[119,25,95,25],[119,29,95,25,"_yield$symbolicateSta"],[119,50,95,25],[119,54,95,25,"_yield$symbolicateSta2"],[119,76,95,25],[119,85,95,35],[119,89,95,35,"symbolicateStackTrace"],[119,119,95,56],[119,121,95,57,"parsedStack"],[119,132,95,68],[119,133,95,69],[119,154,95,28,"_yield$symbolicateSta2"],[119,176,95,28],[119,177,95,72,"stack"],[119,182,95,77],[119,194,95,77,"_yield$symbolicateSta"],[119,215,95,77],[119,218,95,81],[119,222,95,85],[120,6,96,4],[120,7,96,5],[120,8,97,4],[120,15,97,4,"_unused"],[120,22,97,4],[120,24,97,10],[121,8,98,8],[121,15,98,15,"parsedStack"],[121,26,98,26],[122,6,99,4],[123,6,100,4],[124,6,101,4],[124,10,101,8],[124,11,101,9,"symbolicatedStack"],[124,28,101,26],[124,30,101,28],[125,8,102,8],[125,15,102,15,"parsedStack"],[125,26,102,26],[126,6,103,4],[127,6,104,4],[128,6,105,4],[128,13,105,11,"symbolicatedStack"],[128,30,105,28],[128,31,105,29,"map"],[128,34,105,32],[128,35,105,33,"_removeProjectRoot"],[128,53,105,51],[128,54,105,52],[129,4,106,0],[129,5,106,1],[130,4,106,1],[130,11,106,1,"_symbolicateErrorAsync2"],[130,34,106,1],[130,35,106,1,"apply"],[130,40,106,1],[130,47,106,1,"arguments"],[130,56,106,1],[131,2,106,1],[132,2,107,0],[132,11,107,9,"_formatStack"],[132,23,107,21,"_formatStack"],[132,24,107,22,"stack"],[132,29,107,27],[132,31,107,29],[133,4,108,4],[133,11,108,11,"stack"],[133,16,108,16],[133,17,109,9,"map"],[133,20,109,12],[133,21,109,13],[133,31,109,14,"frame"],[133,36,109,19],[133,38,109,24],[134,6,110,8],[134,10,110,12,"line"],[134,14,110,16],[134,17,110,20],[134,20,110,22,"frame"],[134,25,110,27],[134,26,110,28,"file"],[134,30,110,33],[134,34,110,36,"frame"],[134,39,110,41],[134,40,110,42,"lineNumber"],[134,50,110,53],[134,52,110,54],[135,6,111,8],[135,10,111,12,"frame"],[135,15,111,17],[135,16,111,18,"column"],[135,22,111,24],[135,26,111,28],[135,30,111,32],[135,32,111,34],[136,8,112,12,"line"],[136,12,112,16],[136,16,112,21],[136,20,112,24,"frame"],[136,25,112,29],[136,26,112,30,"column"],[136,32,112,37],[136,34,112,38],[137,6,113,8],[138,6,114,8,"line"],[138,10,114,12],[138,14,114,17],[138,21,114,23,"frame"],[138,26,114,28],[138,27,114,29,"methodName"],[138,37,114,40],[138,39,114,41],[139,6,115,8],[139,13,115,15,"line"],[139,17,115,19],[140,4,116,4],[140,5,116,5],[140,6,116,6],[140,7,117,9,"join"],[140,11,117,13],[140,12,117,14],[140,16,117,18],[140,17,117,19],[141,2,118,0],[142,2,119,0],[142,11,119,9,"_removeProjectRoot"],[142,29,119,27,"_removeProjectRoot"],[142,30,119,28,"frame"],[142,35,119,33],[142,37,119,35],[143,4,120,4],[143,8,120,8,"filename"],[143,16,120,16],[143,19,120,19,"frame"],[143,24,120,24],[143,25,120,25,"file"],[143,29,120,29],[144,4,121,4],[144,8,121,8,"filename"],[144,16,121,16],[144,20,121,20],[144,24,121,24],[144,26,121,26],[145,6,122,8],[145,13,122,15,"frame"],[145,18,122,20],[146,4,123,4],[147,4,124,4],[147,8,124,10,"projectRoot"],[147,19,124,21],[147,22,124,24,"_getProjectRoot"],[147,37,124,39],[147,38,124,40],[147,39,124,41],[148,4,125,4],[148,8,125,8,"projectRoot"],[148,19,125,19],[148,23,125,23],[148,27,125,27],[148,29,125,29],[149,6,126,8],[149,13,126,15,"frame"],[149,18,126,20],[150,4,127,4],[151,4,128,4],[151,8,128,8,"filename"],[151,16,128,16],[151,17,128,17,"startsWith"],[151,27,128,27],[151,28,128,28,"projectRoot"],[151,39,128,39],[151,40,128,40],[151,42,128,42],[152,6,129,8,"filename"],[152,14,129,16],[152,17,129,19,"filename"],[152,25,129,27],[152,26,129,28,"substring"],[152,35,129,37],[152,36,129,38,"projectRoot"],[152,47,129,49],[152,48,129,50,"length"],[152,54,129,56],[152,55,129,57],[153,6,130,8],[153,10,130,12,"filename"],[153,18,130,20],[153,19,130,21],[153,20,130,22],[153,21,130,23],[153,26,130,28],[153,29,130,31],[153,33,130,35,"filename"],[153,41,130,43],[153,42,130,44],[153,43,130,45],[153,44,130,46],[153,49,130,51],[153,53,130,55],[153,55,130,57],[154,8,131,12,"filename"],[154,16,131,20],[154,19,131,23,"filename"],[154,27,131,31],[154,28,131,32,"substring"],[154,37,131,41],[154,38,131,42],[154,39,131,43],[154,40,131,44],[155,6,132,8],[156,6,133,8,"frame"],[156,11,133,13],[156,12,133,14,"file"],[156,16,133,18],[156,19,133,21,"filename"],[156,27,133,29],[157,4,134,4],[158,4,135,4],[158,11,135,11,"frame"],[158,16,135,16],[159,2,136,0],[160,2,137,0],[161,0,138,0],[162,0,139,0],[163,0,140,0],[164,0,141,0],[165,0,142,0],[166,0,143,0],[167,0,144,0],[168,0,145,0],[169,2,146,0],[169,11,146,9,"_stackTraceLogsSupported"],[169,35,146,33,"_stackTraceLogsSupported"],[169,36,146,33],[169,38,146,36],[170,4,147,4],[170,11,147,11],[170,12,147,12],[170,14,147,14,"__DEV__"],[170,21,147,21],[170,25,147,25,"_getProjectRoot"],[170,40,147,40],[170,41,147,41],[170,42,147,42],[170,43,147,43],[171,2,148,0],[172,2,149,0],[172,11,149,9,"_isUnhandledPromiseRejection"],[172,39,149,37,"_isUnhandledPromiseRejection"],[172,40,149,38,"data"],[172,44,149,42],[172,46,149,44,"level"],[172,51,149,49],[172,53,149,51],[173,4,150,4],[173,11,150,12,"level"],[173,16,150,17],[173,21,150,22],[173,27,150,28],[173,31,151,8],[173,38,151,15,"data"],[173,42,151,19],[173,43,151,20],[173,44,151,21],[173,45,151,22],[173,50,151,27],[173,58,151,35],[173,62,152,8],[173,101,152,47],[173,102,152,48,"test"],[173,106,152,52],[173,107,152,53,"data"],[173,111,152,57],[173,112,152,58],[173,113,152,59],[173,114,152,60],[173,115,152,61],[174,2,153,0],[175,2,154,0],[175,11,154,9,"_captureConsoleStackTrace"],[175,36,154,34,"_captureConsoleStackTrace"],[175,37,154,34],[175,39,154,37],[176,4,155,4],[176,8,155,8],[177,6,156,8],[177,12,156,14],[177,16,156,18,"Error"],[177,21,156,23],[177,22,156,24],[177,23,156,25],[178,4,157,4],[178,5,157,5],[178,6,158,4],[178,13,158,11,"error"],[178,18,158,16],[178,20,158,18],[179,6,159,8],[179,10,159,12,"stackLines"],[179,20,159,22],[179,23,159,25,"error"],[179,28,159,30],[179,29,159,31,"stack"],[179,34,159,36],[179,35,159,37,"split"],[179,40,159,42],[179,41,159,43],[179,45,159,47],[179,46,159,48],[180,6,160,8],[180,10,160,14,"consoleMethodIndex"],[180,28,160,32],[180,31,160,35,"stackLines"],[180,41,160,45],[180,42,160,46,"findIndex"],[180,51,160,55],[180,52,160,56],[180,62,160,57,"frame"],[180,67,160,62],[181,8,160,62],[181,15,160,67,"frame"],[181,20,160,72],[181,21,160,73,"includes"],[181,29,160,81],[181,30,160,82,"EXPO_CONSOLE_METHOD_NAME"],[181,54,160,106],[181,55,160,107],[182,6,160,107],[182,8,160,108],[183,6,161,8],[183,10,161,12,"consoleMethodIndex"],[183,28,161,30],[183,33,161,35],[183,34,161,36],[183,35,161,37],[183,37,161,39],[184,8,162,12,"stackLines"],[184,18,162,22],[184,21,162,25,"stackLines"],[184,31,162,35],[184,32,162,36,"slice"],[184,37,162,41],[184,38,162,42,"consoleMethodIndex"],[184,56,162,60],[184,59,162,63],[184,60,162,64],[184,61,162,65],[185,8,163,12,"error"],[185,13,163,17],[185,14,163,18,"stack"],[185,19,163,23],[185,22,163,26,"stackLines"],[185,32,163,36],[185,33,163,37,"join"],[185,37,163,41],[185,38,163,42],[185,42,163,46],[185,43,163,47],[186,6,164,8],[187,6,165,8],[187,13,165,15,"error"],[187,18,165,20],[188,4,166,4],[189,2,167,0],[190,2,168,0],[190,11,168,9,"_getProjectRoot"],[190,26,168,24,"_getProjectRoot"],[190,27,168,24],[190,29,168,27],[191,4,168,27],[191,8,168,27,"_Constants$expoGoConf"],[191,29,168,27],[191,31,168,27,"_Constants$expoGoConf2"],[191,53,168,27],[191,55,168,27,"_Constants$expoGoConf3"],[191,77,168,27],[192,4,169,4],[192,12,169,4,"_Constants$expoGoConf"],[192,33,169,4],[192,37,169,4,"_Constants$expoGoConf2"],[192,59,169,4],[192,62,169,11,"Constants"],[192,84,169,20],[192,85,169,21,"expoGoConfig"],[192,97,169,33],[192,119,169,33,"_Constants$expoGoConf3"],[192,141,169,33],[192,144,169,11,"_Constants$expoGoConf2"],[192,166,169,11],[192,167,169,35,"developer"],[192,176,169,44],[192,197,169,11,"_Constants$expoGoConf3"],[192,219,169,11],[192,220,169,46,"projectRoot"],[192,231,169,57],[192,243,169,57,"_Constants$expoGoConf"],[192,264,169,57],[192,267,169,61],[192,271,169,65],[193,2,170,0],[194,2,170,1],[194,6,170,1,"_default"],[194,14,170,1],[194,17,170,1,"exports"],[194,24,170,1],[194,25,170,1,"default"],[194,32,170,1],[194,35,171,15],[195,4,172,4,"serializeLogDataAsync"],[195,25,172,25],[195,27,172,4,"serializeLogDataAsync"],[196,2,173,0],[196,3,173,1],[197,0,173,1]],"functionMap":{"names":["<global>","serializeLogDataAsync","_stringifyLogData","data.map$argument_0","_serializeErrorAsync","_symbolicateErrorAsync","_formatStack","stack.map$argument_0","_removeProjectRoot","_stackTraceLogsSupported","_isUnhandledPromiseRejection","_captureConsoleStackTrace","stackLines.findIndex$argument_0","_getProjectRoot"],"mappings":"AAA;ACM;CDoD;AEC;oBCC;KDc;CFC;AIC;CJU;AKC;CLkB;AMC;aCE;KDO;CNE;AQC;CRiB;ASU;CTE;AUC;CVI;AWC;wDCM,mDD;CXO;AaC;CbE"}},"type":"js/module"}]}