{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":155,"column":0,"index":4357}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":155,"column":0,"index":4357}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":155,"column":0,"index":4357}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":155,"column":0,"index":4357}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  /**\n   * EventEmitter manages listeners and publishes events to them.\n   *\n   * EventEmitter accepts a single type parameter that defines the valid events\n   * and associated listener argument(s).\n   *\n   * @example\n   *\n   *   const emitter = new EventEmitter<{\n   *     success: [number, string],\n   *     error: [Error],\n   *   }>();\n   *\n   *   emitter.on('success', (statusCode, responseText) => {...});\n   *   emitter.emit('success', 200, '...');\n   *\n   *   emitter.on('error', error => {...});\n   *   emitter.emit('error', new Error('Resource not found'));\n   *\n   */\n  var EventEmitter = exports.default = /*#__PURE__*/function () {\n    function EventEmitter() {\n      (0, _classCallCheck2.default)(this, EventEmitter);\n      this._registry = {};\n    }\n    (0, _createClass2.default)(EventEmitter, [{\n      key: \"addListener\",\n      value:\n      /**\n       * Registers a listener that is called when the supplied event is emitted.\n       * Returns a subscription that has a `remove` method to undo registration.\n       */\n      function addListener(eventType, listener, context) {\n        if (typeof listener !== 'function') {\n          throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');\n        }\n        var registrations = allocate(this._registry, eventType);\n        var registration = {\n          context: context,\n          listener: listener,\n          remove: function remove() {\n            registrations.delete(registration);\n          }\n        };\n        registrations.add(registration);\n        return registration;\n      }\n\n      /**\n       * Emits the supplied event. Additional arguments supplied to `emit` will be\n       * passed through to each of the registered listeners.\n       *\n       * If a listener modifies the listeners registered for the same event, those\n       * changes will not be reflected in the current invocation of `emit`.\n       */\n    }, {\n      key: \"emit\",\n      value: function emit(eventType) {\n        var registrations = this._registry[eventType];\n        if (registrations != null) {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          for (var registration of (0, _toConsumableArray2.default)(registrations)) {\n            registration.listener.apply(registration.context, args);\n          }\n        }\n      }\n\n      /**\n       * Removes all registered listeners.\n       */\n    }, {\n      key: \"removeAllListeners\",\n      value: function removeAllListeners(eventType) {\n        if (eventType == null) {\n          this._registry = {};\n        } else {\n          delete this._registry[eventType];\n        }\n      }\n\n      /**\n       * Returns the number of registered listeners for the supplied event.\n       */\n    }, {\n      key: \"listenerCount\",\n      value: function listenerCount(eventType) {\n        var registrations = this._registry[eventType];\n        return registrations == null ? 0 : registrations.size;\n      }\n    }]);\n    return EventEmitter;\n  }();\n  function allocate(registry, eventType) {\n    var registrations = registry[eventType];\n    if (registrations == null) {\n      registrations = new Set();\n      registry[eventType] = registrations;\n    }\n    return registrations;\n  }\n});","lineCount":121,"map":[[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[19,2,43,0],[20,0,44,0],[21,0,45,0],[22,0,46,0],[23,0,47,0],[24,0,48,0],[25,0,49,0],[26,0,50,0],[27,0,51,0],[28,0,52,0],[29,0,53,0],[30,0,54,0],[31,0,55,0],[32,0,56,0],[33,0,57,0],[34,0,58,0],[35,0,59,0],[36,0,60,0],[37,0,61,0],[38,0,62,0],[39,2,43,0],[39,6,63,21,"EventEmitter"],[39,18,63,33],[39,21,63,33,"exports"],[39,28,63,33],[39,29,63,33,"default"],[39,36,63,33],[40,4,63,33],[40,13,63,33,"EventEmitter"],[40,26,63,33],[41,6,63,33],[41,10,63,33,"_classCallCheck2"],[41,26,63,33],[41,27,63,33,"default"],[41,34,63,33],[41,42,63,33,"EventEmitter"],[41,54,63,33],[42,6,63,33],[42,11,66,2,"_registry"],[42,20,66,11],[42,23,66,41],[42,24,66,42],[42,25,66,43],[43,4,66,43],[44,4,66,43],[44,8,66,43,"_createClass2"],[44,21,66,43],[44,22,66,43,"default"],[44,29,66,43],[44,31,66,43,"EventEmitter"],[44,43,66,43],[45,6,66,43,"key"],[45,9,66,43],[46,6,66,43,"value"],[46,11,66,43],[47,6,68,2],[48,0,69,0],[49,0,70,0],[50,0,71,0],[51,6,72,2],[51,15,72,2,"addListener"],[51,27,73,4,"eventType"],[51,36,73,21],[51,38,74,4,"listener"],[51,46,74,71],[51,48,75,4,"context"],[51,55,75,18],[51,57,76,23],[52,8,77,4],[52,12,77,8],[52,19,77,15,"listener"],[52,27,77,23],[52,32,77,28],[52,42,77,38],[52,44,77,40],[53,10,78,6],[53,16,78,12],[53,20,78,16,"TypeError"],[53,29,78,25],[53,30,79,8],[53,95,80,6],[53,96,80,7],[54,8,81,4],[55,8,82,4],[55,12,82,10,"registrations"],[55,25,82,23],[55,28,82,26,"allocate"],[55,36,82,34],[55,37,83,6],[55,41,83,10],[55,42,83,11,"_registry"],[55,51,83,20],[55,53,84,6,"eventType"],[55,62,85,4],[55,63,85,5],[56,8,86,4],[56,12,86,10,"registration"],[56,24,86,75],[56,27,86,78],[57,10,87,6,"context"],[57,17,87,13],[57,19,87,6,"context"],[57,26,87,13],[58,10,88,6,"listener"],[58,18,88,14],[58,20,88,6,"listener"],[58,28,88,14],[59,10,89,6,"remove"],[59,16,89,12],[59,27,89,12,"remove"],[59,34,89,12],[59,36,89,21],[60,12,90,8,"registrations"],[60,25,90,21],[60,26,90,22,"delete"],[60,32,90,28],[60,33,90,29,"registration"],[60,45,90,41],[60,46,90,42],[61,10,91,6],[62,8,92,4],[62,9,92,5],[63,8,93,4,"registrations"],[63,21,93,17],[63,22,93,18,"add"],[63,25,93,21],[63,26,93,22,"registration"],[63,38,93,34],[63,39,93,35],[64,8,94,4],[64,15,94,11,"registration"],[64,27,94,23],[65,6,95,2],[67,6,97,2],[68,0,98,0],[69,0,99,0],[70,0,100,0],[71,0,101,0],[72,0,102,0],[73,0,103,0],[74,4,97,2],[75,6,97,2,"key"],[75,9,97,2],[76,6,97,2,"value"],[76,11,97,2],[76,13,104,2],[76,22,104,2,"emit"],[76,27,105,4,"eventType"],[76,36,105,21],[76,38,107,10],[77,8,108,4],[77,12,108,10,"registrations"],[77,25,110,5],[77,28,110,8],[77,32,110,12],[77,33,110,13,"_registry"],[77,42,110,22],[77,43,110,23,"eventType"],[77,52,110,32],[77,53,110,33],[78,8,111,4],[78,12,111,8,"registrations"],[78,25,111,21],[78,29,111,25],[78,33,111,29],[78,35,111,31],[79,10,111,31],[79,19,111,31,"_len"],[79,23,111,31],[79,26,111,31,"arguments"],[79,35,111,31],[79,36,111,31,"length"],[79,42,111,31],[79,44,106,7,"args"],[79,48,106,11],[79,55,106,11,"Array"],[79,60,106,11],[79,61,106,11,"_len"],[79,65,106,11],[79,72,106,11,"_len"],[79,76,106,11],[79,87,106,11,"_key"],[79,91,106,11],[79,97,106,11,"_key"],[79,101,106,11],[79,104,106,11,"_len"],[79,108,106,11],[79,110,106,11,"_key"],[79,114,106,11],[80,12,106,7,"args"],[80,16,106,11],[80,17,106,11,"_key"],[80,21,106,11],[80,29,106,11,"arguments"],[80,38,106,11],[80,39,106,11,"_key"],[80,43,106,11],[81,10,106,11],[82,10,112,6],[82,15,112,11],[82,19,112,17,"registration"],[82,31,112,29],[82,39,112,29,"_toConsumableArray2"],[82,58,112,29],[82,59,112,29,"default"],[82,66,112,29],[82,68,112,37,"registrations"],[82,81,112,50],[82,84,112,53],[83,12,113,8,"registration"],[83,24,113,20],[83,25,113,21,"listener"],[83,33,113,29],[83,34,113,30,"apply"],[83,39,113,35],[83,40,113,36,"registration"],[83,52,113,48],[83,53,113,49,"context"],[83,60,113,56],[83,62,113,58,"args"],[83,66,113,62],[83,67,113,63],[84,10,114,6],[85,8,115,4],[86,6,116,2],[88,6,118,2],[89,0,119,0],[90,0,120,0],[91,4,118,2],[92,6,118,2,"key"],[92,9,118,2],[93,6,118,2,"value"],[93,11,118,2],[93,13,121,2],[93,22,121,2,"removeAllListeners"],[93,41,122,4,"eventType"],[93,50,122,23],[93,52,123,10],[94,8,124,4],[94,12,124,8,"eventType"],[94,21,124,17],[94,25,124,21],[94,29,124,25],[94,31,124,27],[95,10,125,6],[95,14,125,10],[95,15,125,11,"_registry"],[95,24,125,20],[95,27,125,23],[95,28,125,24],[95,29,125,25],[96,8,126,4],[96,9,126,5],[96,15,126,11],[97,10,127,6],[97,17,127,13],[97,21,127,17],[97,22,127,18,"_registry"],[97,31,127,27],[97,32,127,28,"eventType"],[97,41,127,37],[97,42,127,38],[98,8,128,4],[99,6,129,2],[101,6,131,2],[102,0,132,0],[103,0,133,0],[104,4,131,2],[105,6,131,2,"key"],[105,9,131,2],[106,6,131,2,"value"],[106,11,131,2],[106,13,134,2],[106,22,134,2,"listenerCount"],[106,36,134,48,"eventType"],[106,45,134,65],[106,47,134,75],[107,8,135,4],[107,12,135,10,"registrations"],[107,25,135,50],[107,28,135,53],[107,32,135,57],[107,33,135,58,"_registry"],[107,42,135,67],[107,43,135,68,"eventType"],[107,52,135,77],[107,53,135,78],[108,8,136,4],[108,15,136,11,"registrations"],[108,28,136,24],[108,32,136,28],[108,36,136,32],[108,39,136,35],[108,40,136,36],[108,43,136,39,"registrations"],[108,56,136,52],[108,57,136,53,"size"],[108,61,136,57],[109,6,137,2],[110,4,137,3],[111,4,137,3],[111,11,137,3,"EventEmitter"],[111,23,137,3],[112,2,137,3],[113,2,140,0],[113,11,140,9,"allocate"],[113,19,140,17,"allocate"],[113,20,145,2,"registry"],[113,28,145,37],[113,30,146,2,"eventType"],[113,39,146,19],[113,41,147,33],[114,4,148,2],[114,8,148,6,"registrations"],[114,21,148,51],[114,24,148,54,"registry"],[114,32,148,62],[114,33,148,63,"eventType"],[114,42,148,72],[114,43,148,73],[115,4,149,2],[115,8,149,6,"registrations"],[115,21,149,19],[115,25,149,23],[115,29,149,27],[115,31,149,29],[116,6,150,4,"registrations"],[116,19,150,17],[116,22,150,20],[116,26,150,24,"Set"],[116,29,150,27],[116,30,150,28],[116,31,150,29],[117,6,151,4,"registry"],[117,14,151,12],[117,15,151,13,"eventType"],[117,24,151,22],[117,25,151,23],[117,28,151,26,"registrations"],[117,41,151,39],[118,4,152,2],[119,4,153,2],[119,11,153,9,"registrations"],[119,24,153,22],[120,2,154,0],[121,0,154,1]],"functionMap":{"names":["<global>","EventEmitter","addListener","registration.remove","emit","removeAllListeners","listenerCount","allocate"],"mappings":"AAA;eC8D;ECS;MCiB;ODE;GDI;EGS;GHY;EIK;GJQ;EKK;GLG;CDC;AOE;CPc"}},"type":"js/module"}]}