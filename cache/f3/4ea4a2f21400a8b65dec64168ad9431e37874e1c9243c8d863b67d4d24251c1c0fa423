{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":79,"column":0,"index":2135}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":79,"column":0,"index":2135}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":79,"column":0,"index":2135}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./NativePerformanceObserver","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":68,"index":290}}],"key":"+npX2Ui+iNVclanReXTyyCh0Pkw="}},{"name":"./PerformanceObserver","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":0,"index":291},"end":{"line":12,"column":70,"index":361}}],"key":"dZd/Qr9hEmOi9AeTIps7GE30VG4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./NativePerformanceObserver\"));\n  var _PerformanceObserver = _$$_REQUIRE(_dependencyMap[4], \"./PerformanceObserver\");\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  var cachedEventCounts;\n  function getCachedEventCounts() {\n    var _cachedEventCounts;\n    if (cachedEventCounts) {\n      return cachedEventCounts;\n    }\n    if (!_NativePerformanceObserver.default) {\n      (0, _PerformanceObserver.warnNoNativePerformanceObserver)();\n      return new Map();\n    }\n    cachedEventCounts = new Map(_NativePerformanceObserver.default.getEventCounts());\n    // $FlowFixMe[incompatible-call]\n    global.queueMicrotask(function () {\n      // To be consistent with the calls to the API from the same task,\n      // but also not to refetch the data from native too often,\n      // schedule to invalidate the cache later,\n      // after the current task is guaranteed to have finished.\n      cachedEventCounts = null;\n    });\n    return (_cachedEventCounts = cachedEventCounts) != null ? _cachedEventCounts : new Map();\n  }\n  /**\n   * Implementation of the EventCounts Web Performance API\n   * corresponding to the standard in\n   * https://www.w3.org/TR/event-timing/#eventcounts\n   */\n  var EventCounts = exports.default = /*#__PURE__*/function () {\n    function EventCounts() {\n      (0, _classCallCheck2.default)(this, EventCounts);\n    }\n    (0, _createClass2.default)(EventCounts, [{\n      key: \"size\",\n      get:\n      // flowlint unsafe-getters-setters:off\n      function get() {\n        return getCachedEventCounts().size;\n      }\n    }, {\n      key: \"entries\",\n      value: function entries() {\n        return getCachedEventCounts().entries();\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        return getCachedEventCounts().forEach(callback);\n      }\n    }, {\n      key: \"get\",\n      value: function get(key) {\n        return getCachedEventCounts().get(key);\n      }\n    }, {\n      key: \"has\",\n      value: function has(key) {\n        return getCachedEventCounts().has(key);\n      }\n    }, {\n      key: \"keys\",\n      value: function keys() {\n        return getCachedEventCounts().keys();\n      }\n    }, {\n      key: \"values\",\n      value: function values() {\n        return getCachedEventCounts().values();\n      }\n    }]);\n    return EventCounts;\n  }();\n});","lineCount":91,"map":[[9,2,11,0],[9,6,11,0,"_NativePerformanceObserver"],[9,32,11,0],[9,35,11,0,"_interopRequireDefault"],[9,57,11,0],[9,58,11,0,"_$$_REQUIRE"],[9,69,11,0],[9,70,11,0,"_dependencyMap"],[9,84,11,0],[10,2,12,0],[10,6,12,0,"_PerformanceObserver"],[10,26,12,0],[10,29,12,0,"_$$_REQUIRE"],[10,40,12,0],[10,41,12,0,"_dependencyMap"],[10,55,12,0],[11,2,1,0],[12,0,2,0],[13,0,3,0],[14,0,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[18,0,8,0],[19,0,9,0],[21,2,20,0],[21,6,20,4,"cachedEventCounts"],[21,23,20,43],[22,2,22,0],[22,11,22,9,"getCachedEventCounts"],[22,31,22,29,"getCachedEventCounts"],[22,32,22,29],[22,34,22,53],[23,4,22,53],[23,8,22,53,"_cachedEventCounts"],[23,26,22,53],[24,4,23,2],[24,8,23,6,"cachedEventCounts"],[24,25,23,23],[24,27,23,25],[25,6,24,4],[25,13,24,11,"cachedEventCounts"],[25,30,24,28],[26,4,25,2],[27,4,26,2],[27,8,26,6],[27,9,26,7,"NativePerformanceObserver"],[27,43,26,32],[27,45,26,34],[28,6,27,4],[28,10,27,4,"warnNoNativePerformanceObserver"],[28,62,27,35],[28,64,27,36],[28,65,27,37],[29,6,28,4],[29,13,28,11],[29,17,28,15,"Map"],[29,20,28,18],[29,21,28,19],[29,22,28,20],[30,4,29,2],[31,4,31,2,"cachedEventCounts"],[31,21,31,19],[31,24,31,22],[31,28,31,26,"Map"],[31,31,31,29],[31,32,32,4,"NativePerformanceObserver"],[31,66,32,29],[31,67,32,30,"getEventCounts"],[31,81,32,44],[31,82,32,45],[31,83,33,2],[31,84,33,3],[32,4,34,2],[33,4,35,2,"global"],[33,10,35,8],[33,11,35,9,"queueMicrotask"],[33,25,35,23],[33,26,35,24],[33,38,35,30],[34,6,36,4],[35,6,37,4],[36,6,38,4],[37,6,39,4],[38,6,40,4,"cachedEventCounts"],[38,23,40,21],[38,26,40,24],[38,30,40,28],[39,4,41,2],[39,5,41,3],[39,6,41,4],[40,4,42,2],[40,12,42,2,"_cachedEventCounts"],[40,30,42,2],[40,33,42,9,"cachedEventCounts"],[40,50,42,26],[40,62,42,26,"_cachedEventCounts"],[40,80,42,26],[40,83,42,30],[40,87,42,34,"Map"],[40,90,42,37],[40,91,42,38],[40,92,42,39],[41,2,43,0],[42,2,44,0],[43,0,45,0],[44,0,46,0],[45,0,47,0],[46,0,48,0],[47,2,44,0],[47,6,49,21,"EventCounts"],[47,17,49,32],[47,20,49,32,"exports"],[47,27,49,32],[47,28,49,32,"default"],[47,35,49,32],[48,4,49,32],[48,13,49,32,"EventCounts"],[48,25,49,32],[49,6,49,32],[49,10,49,32,"_classCallCheck2"],[49,26,49,32],[49,27,49,32,"default"],[49,34,49,32],[49,42,49,32,"EventCounts"],[49,53,49,32],[50,4,49,32],[51,4,49,32],[51,8,49,32,"_createClass2"],[51,21,49,32],[51,22,49,32,"default"],[51,29,49,32],[51,31,49,32,"EventCounts"],[51,42,49,32],[52,6,49,32,"key"],[52,9,49,32],[53,6,49,32,"get"],[53,9,49,32],[54,6,50,2],[55,6,51,2],[55,15,51,2,"get"],[55,19,51,2],[55,21,51,21],[56,8,52,4],[56,15,52,11,"getCachedEventCounts"],[56,35,52,31],[56,36,52,32],[56,37,52,33],[56,38,52,34,"size"],[56,42,52,38],[57,6,53,2],[58,4,53,3],[59,6,53,3,"key"],[59,9,53,3],[60,6,53,3,"value"],[60,11,53,3],[60,13,55,2],[60,22,55,2,"entries"],[60,30,55,2],[60,32,55,40],[61,8,56,4],[61,15,56,11,"getCachedEventCounts"],[61,35,56,31],[61,36,56,32],[61,37,56,33],[61,38,56,34,"entries"],[61,45,56,41],[61,46,56,42],[61,47,56,43],[62,6,57,2],[63,4,57,3],[64,6,57,3,"key"],[64,9,57,3],[65,6,57,3,"value"],[65,11,57,3],[65,13,59,2],[65,22,59,2,"forEach"],[65,30,59,10,"callback"],[65,38,59,50],[65,40,59,58],[66,8,60,4],[66,15,60,11,"getCachedEventCounts"],[66,35,60,31],[66,36,60,32],[66,37,60,33],[66,38,60,34,"forEach"],[66,45,60,41],[66,46,60,42,"callback"],[66,54,60,50],[66,55,60,51],[67,6,61,2],[68,4,61,3],[69,6,61,3,"key"],[69,9,61,3],[70,6,61,3,"value"],[70,11,61,3],[70,13,63,2],[70,22,63,2,"get"],[70,26,63,6,"key"],[70,29,63,17],[70,31,63,28],[71,8,64,4],[71,15,64,11,"getCachedEventCounts"],[71,35,64,31],[71,36,64,32],[71,37,64,33],[71,38,64,34,"get"],[71,41,64,37],[71,42,64,38,"key"],[71,45,64,41],[71,46,64,42],[72,6,65,2],[73,4,65,3],[74,6,65,3,"key"],[74,9,65,3],[75,6,65,3,"value"],[75,11,65,3],[75,13,67,2],[75,22,67,2,"has"],[75,26,67,6,"key"],[75,29,67,17],[75,31,67,28],[76,8,68,4],[76,15,68,11,"getCachedEventCounts"],[76,35,68,31],[76,36,68,32],[76,37,68,33],[76,38,68,34,"has"],[76,41,68,37],[76,42,68,38,"key"],[76,45,68,41],[76,46,68,42],[77,6,69,2],[78,4,69,3],[79,6,69,3,"key"],[79,9,69,3],[80,6,69,3,"value"],[80,11,69,3],[80,13,71,2],[80,22,71,2,"keys"],[80,27,71,2],[80,29,71,27],[81,8,72,4],[81,15,72,11,"getCachedEventCounts"],[81,35,72,31],[81,36,72,32],[81,37,72,33],[81,38,72,34,"keys"],[81,42,72,38],[81,43,72,39],[81,44,72,40],[82,6,73,2],[83,4,73,3],[84,6,73,3,"key"],[84,9,73,3],[85,6,73,3,"value"],[85,11,73,3],[85,13,75,2],[85,22,75,2,"values"],[85,29,75,2],[85,31,75,29],[86,8,76,4],[86,15,76,11,"getCachedEventCounts"],[86,35,76,31],[86,36,76,32],[86,37,76,33],[86,38,76,34,"values"],[86,44,76,40],[86,45,76,41],[86,46,76,42],[87,6,77,2],[88,4,77,3],[89,4,77,3],[89,11,77,3,"EventCounts"],[89,22,77,3],[90,2,77,3],[91,0,77,3]],"functionMap":{"names":["<global>","getCachedEventCounts","global.queueMicrotask$argument_0","EventCounts","get__size","entries","forEach","get","has","keys","values"],"mappings":"AAA;ACqB;wBCa;GDM;CDE;eGM;ECE;GDE;EEE;GFE;EGE;GHE;EIE;GJE;EKE;GLE;EME;GNE;EOE;GPE;CHC"}},"type":"js/module"}]}