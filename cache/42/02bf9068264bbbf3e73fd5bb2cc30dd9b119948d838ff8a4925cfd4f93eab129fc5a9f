{"dependencies":[{"name":"../common/List","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}}],"key":"s8REEucKQH/rRdxXA/HW1Z+K46E="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var List = _$$_REQUIRE(_dependencyMap[0], \"../common/List\");\n  function getFirstMatchNode(matchNode) {\n    if ('node' in matchNode) {\n      return matchNode.node;\n    }\n    return getFirstMatchNode(matchNode.match[0]);\n  }\n  function getLastMatchNode(matchNode) {\n    if ('node' in matchNode) {\n      return matchNode.node;\n    }\n    return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);\n  }\n  function matchFragments(lexer, ast, match, type, name) {\n    function findFragments(matchNode) {\n      if (matchNode.syntax !== null && matchNode.syntax.type === type && matchNode.syntax.name === name) {\n        var start = getFirstMatchNode(matchNode);\n        var end = getLastMatchNode(matchNode);\n        lexer.syntax.walk(ast, function (node, item, list) {\n          if (node === start) {\n            var nodes = new List();\n            do {\n              nodes.appendData(item.data);\n              if (item.data === end) {\n                break;\n              }\n              item = item.next;\n            } while (item !== null);\n            fragments.push({\n              parent: list,\n              nodes: nodes\n            });\n          }\n        });\n      }\n      if (Array.isArray(matchNode.match)) {\n        matchNode.match.forEach(findFragments);\n      }\n    }\n    var fragments = [];\n    if (match.matched !== null) {\n      findFragments(match.matched);\n    }\n    return fragments;\n  }\n  module.exports = {\n    matchFragments: matchFragments\n  };\n});","lineCount":50,"map":[[2,2,1,0],[2,6,1,4,"List"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,25,1,18,"_dependencyMap"],[2,39,1,18],[2,60,1,35],[2,61,1,36],[3,2,3,0],[3,11,3,9,"getFirstMatchNode"],[3,28,3,26,"getFirstMatchNode"],[3,29,3,27,"matchNode"],[3,38,3,36],[3,40,3,38],[4,4,4,4],[4,8,4,8],[4,14,4,14],[4,18,4,18,"matchNode"],[4,27,4,27],[4,29,4,29],[5,6,5,8],[5,13,5,15,"matchNode"],[5,22,5,24],[5,23,5,25,"node"],[5,27,5,29],[6,4,6,4],[7,4,8,4],[7,11,8,11,"getFirstMatchNode"],[7,28,8,28],[7,29,8,29,"matchNode"],[7,38,8,38],[7,39,8,39,"match"],[7,44,8,44],[7,45,8,45],[7,46,8,46],[7,47,8,47],[7,48,8,48],[8,2,9,0],[9,2,11,0],[9,11,11,9,"getLastMatchNode"],[9,27,11,25,"getLastMatchNode"],[9,28,11,26,"matchNode"],[9,37,11,35],[9,39,11,37],[10,4,12,4],[10,8,12,8],[10,14,12,14],[10,18,12,18,"matchNode"],[10,27,12,27],[10,29,12,29],[11,6,13,8],[11,13,13,15,"matchNode"],[11,22,13,24],[11,23,13,25,"node"],[11,27,13,29],[12,4,14,4],[13,4,16,4],[13,11,16,11,"getLastMatchNode"],[13,27,16,27],[13,28,16,28,"matchNode"],[13,37,16,37],[13,38,16,38,"match"],[13,43,16,43],[13,44,16,44,"matchNode"],[13,53,16,53],[13,54,16,54,"match"],[13,59,16,59],[13,60,16,60,"length"],[13,66,16,66],[13,69,16,69],[13,70,16,70],[13,71,16,71],[13,72,16,72],[14,2,17,0],[15,2,19,0],[15,11,19,9,"matchFragments"],[15,25,19,23,"matchFragments"],[15,26,19,24,"lexer"],[15,31,19,29],[15,33,19,31,"ast"],[15,36,19,34],[15,38,19,36,"match"],[15,43,19,41],[15,45,19,43,"type"],[15,49,19,47],[15,51,19,49,"name"],[15,55,19,53],[15,57,19,55],[16,4,20,4],[16,13,20,13,"findFragments"],[16,26,20,26,"findFragments"],[16,27,20,27,"matchNode"],[16,36,20,36],[16,38,20,38],[17,6,21,8],[17,10,21,12,"matchNode"],[17,19,21,21],[17,20,21,22,"syntax"],[17,26,21,28],[17,31,21,33],[17,35,21,37],[17,39,22,12,"matchNode"],[17,48,22,21],[17,49,22,22,"syntax"],[17,55,22,28],[17,56,22,29,"type"],[17,60,22,33],[17,65,22,38,"type"],[17,69,22,42],[17,73,23,12,"matchNode"],[17,82,23,21],[17,83,23,22,"syntax"],[17,89,23,28],[17,90,23,29,"name"],[17,94,23,33],[17,99,23,38,"name"],[17,103,23,42],[17,105,23,44],[18,8,24,12],[18,12,24,16,"start"],[18,17,24,21],[18,20,24,24,"getFirstMatchNode"],[18,37,24,41],[18,38,24,42,"matchNode"],[18,47,24,51],[18,48,24,52],[19,8,25,12],[19,12,25,16,"end"],[19,15,25,19],[19,18,25,22,"getLastMatchNode"],[19,34,25,38],[19,35,25,39,"matchNode"],[19,44,25,48],[19,45,25,49],[20,8,27,12,"lexer"],[20,13,27,17],[20,14,27,18,"syntax"],[20,20,27,24],[20,21,27,25,"walk"],[20,25,27,29],[20,26,27,30,"ast"],[20,29,27,33],[20,31,27,35],[20,41,27,44,"node"],[20,45,27,48],[20,47,27,50,"item"],[20,51,27,54],[20,53,27,56,"list"],[20,57,27,60],[20,59,27,62],[21,10,28,16],[21,14,28,20,"node"],[21,18,28,24],[21,23,28,29,"start"],[21,28,28,34],[21,30,28,36],[22,12,29,20],[22,16,29,24,"nodes"],[22,21,29,29],[22,24,29,32],[22,28,29,36,"List"],[22,32,29,40],[22,33,29,41],[22,34,29,42],[23,12,31,20],[23,15,31,23],[24,14,32,24,"nodes"],[24,19,32,29],[24,20,32,30,"appendData"],[24,30,32,40],[24,31,32,41,"item"],[24,35,32,45],[24,36,32,46,"data"],[24,40,32,50],[24,41,32,51],[25,14,34,24],[25,18,34,28,"item"],[25,22,34,32],[25,23,34,33,"data"],[25,27,34,37],[25,32,34,42,"end"],[25,35,34,45],[25,37,34,47],[26,16,35,28],[27,14,36,24],[28,14,38,24,"item"],[28,18,38,28],[28,21,38,31,"item"],[28,25,38,35],[28,26,38,36,"next"],[28,30,38,40],[29,12,39,20],[29,13,39,21],[29,21,39,29,"item"],[29,25,39,33],[29,30,39,38],[29,34,39,42],[30,12,41,20,"fragments"],[30,21,41,29],[30,22,41,30,"push"],[30,26,41,34],[30,27,41,35],[31,14,42,24,"parent"],[31,20,42,30],[31,22,42,32,"list"],[31,26,42,36],[32,14,43,24,"nodes"],[32,19,43,29],[32,21,43,31,"nodes"],[33,12,44,20],[33,13,44,21],[33,14,44,22],[34,10,45,16],[35,8,46,12],[35,9,46,13],[35,10,46,14],[36,6,47,8],[37,6,49,8],[37,10,49,12,"Array"],[37,15,49,17],[37,16,49,18,"isArray"],[37,23,49,25],[37,24,49,26,"matchNode"],[37,33,49,35],[37,34,49,36,"match"],[37,39,49,41],[37,40,49,42],[37,42,49,44],[38,8,50,12,"matchNode"],[38,17,50,21],[38,18,50,22,"match"],[38,23,50,27],[38,24,50,28,"forEach"],[38,31,50,35],[38,32,50,36,"findFragments"],[38,45,50,49],[38,46,50,50],[39,6,51,8],[40,4,52,4],[41,4,54,4],[41,8,54,8,"fragments"],[41,17,54,17],[41,20,54,20],[41,22,54,22],[42,4,56,4],[42,8,56,8,"match"],[42,13,56,13],[42,14,56,14,"matched"],[42,21,56,21],[42,26,56,26],[42,30,56,30],[42,32,56,32],[43,6,57,8,"findFragments"],[43,19,57,21],[43,20,57,22,"match"],[43,25,57,27],[43,26,57,28,"matched"],[43,33,57,35],[43,34,57,36],[44,4,58,4],[45,4,60,4],[45,11,60,11,"fragments"],[45,20,60,20],[46,2,61,0],[47,2,63,0,"module"],[47,8,63,6],[47,9,63,7,"exports"],[47,16,63,14],[47,19,63,17],[48,4,64,4,"matchFragments"],[48,18,64,18],[48,20,64,20,"matchFragments"],[49,2,65,0],[49,3,65,1],[50,0,65,2]],"functionMap":{"names":["<global>","getFirstMatchNode","getLastMatchNode","matchFragments","findFragments","lexer.syntax.walk$argument_1"],"mappings":"AAA;ACE;CDM;AEE;CFM;AGE;ICC;mCCO;aDmB;KDM;CHS"}},"type":"js/module"}]}