{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":319,"column":0,"index":9788}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":319,"column":0,"index":9788}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":319,"column":0,"index":9788}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":319,"column":0,"index":9788}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":319,"column":0,"index":9788}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../Utilities/warnOnce","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":0,"index":303},"end":{"line":13,"column":45,"index":348}}],"key":"kNjwaOGu6RTuhRe1hOzDj+Zr/e4="}},{"name":"./NativePerformanceObserver","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":0,"index":349},"end":{"line":14,"column":68,"index":417}}],"key":"+npX2Ui+iNVclanReXTyyCh0Pkw="}},{"name":"./PerformanceEntry","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":0,"index":418},"end":{"line":15,"column":52,"index":470}}],"key":"limm2T+T1Tv0g3goGjXkwAZT0/A="}},{"name":"./RawPerformanceEntry","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":0,"index":471},"end":{"line":19,"column":31,"index":565}}],"key":"zrkCAbiGCMzHpBgnI/Ykq8YEer4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.PerformanceObserverEntryList = void 0;\n  exports.warnNoNativePerformanceObserver = warnNoNativePerformanceObserver;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _warnOnce = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"../Utilities/warnOnce\"));\n  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./NativePerformanceObserver\"));\n  var _PerformanceEntry = _$$_REQUIRE(_dependencyMap[7], \"./PerformanceEntry\");\n  var _RawPerformanceEntry = _$$_REQUIRE(_dependencyMap[8], \"./RawPerformanceEntry\");\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n  var PerformanceObserverEntryList = exports.PerformanceObserverEntryList = /*#__PURE__*/function () {\n    function PerformanceObserverEntryList(entries) {\n      (0, _classCallCheck2.default)(this, PerformanceObserverEntryList);\n      this._entries = entries;\n    }\n    (0, _createClass2.default)(PerformanceObserverEntryList, [{\n      key: \"getEntries\",\n      value: function getEntries() {\n        return this._entries;\n      }\n    }, {\n      key: \"getEntriesByType\",\n      value: function getEntriesByType(type) {\n        return this._entries.filter(function (entry) {\n          return entry.entryType === type;\n        });\n      }\n    }, {\n      key: \"getEntriesByName\",\n      value: function getEntriesByName(name, type) {\n        if (type === undefined) {\n          return this._entries.filter(function (entry) {\n            return entry.name === name;\n          });\n        } else {\n          return this._entries.filter(function (entry) {\n            return entry.name === name && entry.entryType === type;\n          });\n        }\n      }\n    }]);\n    return PerformanceObserverEntryList;\n  }();\n  var observerCountPerEntryType = new Map();\n  var registeredObservers = new Map();\n  var isOnPerformanceEntryCallbackSet = false;\n\n  // This is a callback that gets scheduled and periodically called from the native side\n  var onPerformanceEntry = function onPerformanceEntry() {\n    var _entryResult$entries;\n    if (!_NativePerformanceObserver.default) {\n      return;\n    }\n    var entryResult = _NativePerformanceObserver.default.popPendingEntries();\n    var rawEntries = (_entryResult$entries = entryResult == null ? void 0 : entryResult.entries) != null ? _entryResult$entries : [];\n    var droppedEntriesCount = entryResult == null ? void 0 : entryResult.droppedEntriesCount;\n    if (rawEntries.length === 0) {\n      return;\n    }\n    var entries = rawEntries.map(_RawPerformanceEntry.rawToPerformanceEntry);\n    var _loop = function _loop(observerConfig) {\n      var entriesForObserver = entries.filter(function (entry) {\n        if (!observerConfig.entryTypes.has(entry.entryType)) {\n          return false;\n        }\n        var durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n        return entry.duration >= (durationThreshold != null ? durationThreshold : 0);\n      });\n      observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), _observer, droppedEntriesCount);\n    };\n    for (var _ref of registeredObservers.entries()) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n      var _observer = _ref2[0];\n      var observerConfig = _ref2[1];\n      _loop(observerConfig);\n    }\n  };\n  function warnNoNativePerformanceObserver() {\n    (0, _warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');\n  }\n  function applyDurationThresholds() {\n    var durationThresholds = Array.from(registeredObservers.values()).map(function (config) {\n      return config.entryTypes;\n    }).reduce(function (accumulator, currentValue) {\n      return union(accumulator, currentValue);\n    }, new Map());\n    for (var _ref3 of durationThresholds) {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);\n      var entryType = _ref4[0];\n      var durationThreshold = _ref4[1];\n      _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.setDurationThreshold((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType), durationThreshold != null ? durationThreshold : 0);\n    }\n  }\n\n  /**\n   * Implementation of the PerformanceObserver interface for RN,\n   * corresponding to the standard in https://www.w3.org/TR/performance-timeline/\n   *\n   * @example\n   * const observer = new PerformanceObserver((list, _observer) => {\n   *   const entries = list.getEntries();\n   *   entries.forEach(entry => {\n   *     reportEvent({\n   *       eventName: entry.name,\n   *       startTime: entry.startTime,\n   *       endTime: entry.startTime + entry.duration,\n   *       processingStart: entry.processingStart,\n   *       processingEnd: entry.processingEnd,\n   *       interactionId: entry.interactionId,\n   *     });\n   *   });\n   * });\n   * observer.observe({ type: \"event\" });\n   */\n  var PerformanceObserver = exports.default = /*#__PURE__*/function () {\n    function PerformanceObserver(callback) {\n      (0, _classCallCheck2.default)(this, PerformanceObserver);\n      this._callback = callback;\n    }\n    (0, _createClass2.default)(PerformanceObserver, [{\n      key: \"observe\",\n      value: function observe(options) {\n        var _registeredObservers$;\n        if (!_NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        this._validateObserveOptions(options);\n        var requestedEntryTypes;\n        if (options.entryTypes) {\n          this._type = 'multiple';\n          requestedEntryTypes = new Map(options.entryTypes.map(function (t) {\n            return [t, undefined];\n          }));\n        } else {\n          this._type = 'single';\n          requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);\n        }\n\n        // The same observer may receive multiple calls to \"observe\", so we need\n        // to check what is new on this call vs. previous ones.\n        var currentEntryTypes = (_registeredObservers$ = registeredObservers.get(this)) == null ? void 0 : _registeredObservers$.entryTypes;\n        var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;\n\n        // This `observe` call is a no-op because there are no new things to observe.\n        if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n          return;\n        }\n        registeredObservers.set(this, {\n          callback: this._callback,\n          entryTypes: nextEntryTypes\n        });\n        if (!isOnPerformanceEntryCallbackSet) {\n          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);\n          isOnPerformanceEntryCallbackSet = true;\n        }\n\n        // We only need to start listenening to new entry types being observed in\n        // this observer.\n        var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());\n        for (var type of newEntryTypes) {\n          var _observerCountPerEntr;\n          if (!observerCountPerEntryType.has(type)) {\n            var rawType = (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type);\n            _NativePerformanceObserver.default.startReporting(rawType);\n          }\n          observerCountPerEntryType.set(type, ((_observerCountPerEntr = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr : 0) + 1);\n        }\n        applyDurationThresholds();\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        if (!_NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        var observerConfig = registeredObservers.get(this);\n        if (!observerConfig) {\n          return;\n        }\n\n        // Disconnect this observer\n        for (var type of observerConfig.entryTypes.keys()) {\n          var _observerCountPerEntr2;\n          var numberOfObserversForThisType = (_observerCountPerEntr2 = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr2 : 0;\n          if (numberOfObserversForThisType === 1) {\n            observerCountPerEntryType.delete(type);\n            _NativePerformanceObserver.default.stopReporting((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type));\n          } else if (numberOfObserversForThisType !== 0) {\n            observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n          }\n        }\n\n        // Disconnect all observers if this was the last one\n        registeredObservers.delete(this);\n        if (registeredObservers.size === 0) {\n          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);\n          isOnPerformanceEntryCallbackSet = false;\n        }\n        applyDurationThresholds();\n      }\n    }, {\n      key: \"_validateObserveOptions\",\n      value: function _validateObserveOptions(options) {\n        var type = options.type,\n          entryTypes = options.entryTypes,\n          durationThreshold = options.durationThreshold;\n        if (!type && !entryTypes) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\");\n        }\n        if (entryTypes && type) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\");\n        }\n        if (this._type === 'multiple' && type) {\n          throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\");\n        }\n        if (this._type === 'single' && entryTypes) {\n          throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\");\n        }\n        if (entryTypes && durationThreshold !== undefined) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\");\n        }\n      }\n    }]);\n    return PerformanceObserver;\n  }(); // As a Set union, except if value exists in both, we take minimum\n  PerformanceObserver.supportedEntryTypes = Object.freeze(['mark', 'measure', 'event']);\n  function union(a, b) {\n    var res = new Map();\n    for (var _ref5 of a) {\n      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);\n      var k = _ref6[0];\n      var v = _ref6[1];\n      if (!b.has(k)) {\n        res.set(k, v);\n      } else {\n        var _b$get;\n        res.set(k, Math.min(v != null ? v : 0, (_b$get = b.get(k)) != null ? _b$get : 0));\n      }\n    }\n    return res;\n  }\n  function difference(a, b) {\n    return new Set((0, _toConsumableArray2.default)(a).filter(function (x) {\n      return !b.has(x);\n    }));\n  }\n});","lineCount":263,"map":[[12,2,13,0],[12,6,13,0,"_warnOnce"],[12,15,13,0],[12,18,13,0,"_interopRequireDefault"],[12,40,13,0],[12,41,13,0,"_$$_REQUIRE"],[12,52,13,0],[12,53,13,0,"_dependencyMap"],[12,67,13,0],[13,2,14,0],[13,6,14,0,"_NativePerformanceObserver"],[13,32,14,0],[13,35,14,0,"_interopRequireDefault"],[13,57,14,0],[13,58,14,0,"_$$_REQUIRE"],[13,69,14,0],[13,70,14,0,"_dependencyMap"],[13,84,14,0],[14,2,15,0],[14,6,15,0,"_PerformanceEntry"],[14,23,15,0],[14,26,15,0,"_$$_REQUIRE"],[14,37,15,0],[14,38,15,0,"_dependencyMap"],[14,52,15,0],[15,2,16,0],[15,6,16,0,"_RawPerformanceEntry"],[15,26,16,0],[15,29,16,0,"_$$_REQUIRE"],[15,40,16,0],[15,41,16,0,"_dependencyMap"],[15,55,16,0],[16,2,1,0],[17,0,2,0],[18,0,3,0],[19,0,4,0],[20,0,5,0],[21,0,6,0],[22,0,7,0],[23,0,8,0],[24,0,9,0],[25,2,1,0],[25,6,23,13,"PerformanceObserverEntryList"],[25,34,23,41],[25,37,23,41,"exports"],[25,44,23,41],[25,45,23,41,"PerformanceObserverEntryList"],[25,73,23,41],[26,4,26,2],[26,13,26,2,"PerformanceObserverEntryList"],[26,42,26,14,"entries"],[26,49,26,43],[26,51,26,45],[27,6,26,45],[27,10,26,45,"_classCallCheck2"],[27,26,26,45],[27,27,26,45,"default"],[27,34,26,45],[27,42,26,45,"PerformanceObserverEntryList"],[27,70,26,45],[28,6,27,4],[28,10,27,8],[28,11,27,9,"_entries"],[28,19,27,17],[28,22,27,20,"entries"],[28,29,27,27],[29,4,28,2],[30,4,28,3],[30,8,28,3,"_createClass2"],[30,21,28,3],[30,22,28,3,"default"],[30,29,28,3],[30,31,28,3,"PerformanceObserverEntryList"],[30,59,28,3],[31,6,28,3,"key"],[31,9,28,3],[32,6,28,3,"value"],[32,11,28,3],[32,13,30,2],[32,22,30,2,"getEntries"],[32,33,30,2],[32,35,30,37],[33,8,31,4],[33,15,31,11],[33,19,31,15],[33,20,31,16,"_entries"],[33,28,31,24],[34,6,32,2],[35,4,32,3],[36,6,32,3,"key"],[36,9,32,3],[37,6,32,3,"value"],[37,11,32,3],[37,13,34,2],[37,22,34,2,"getEntriesByType"],[37,39,34,19,"type"],[37,43,34,45],[37,45,34,69],[38,8,35,4],[38,15,35,11],[38,19,35,15],[38,20,35,16,"_entries"],[38,28,35,24],[38,29,35,25,"filter"],[38,35,35,31],[38,36,35,32],[38,46,35,32,"entry"],[38,51,35,37],[39,10,35,37],[39,17,35,41,"entry"],[39,22,35,46],[39,23,35,47,"entryType"],[39,32,35,56],[39,37,35,61,"type"],[39,41,35,65],[40,8,35,65],[40,10,35,66],[41,6,36,2],[42,4,36,3],[43,6,36,3,"key"],[43,9,36,3],[44,6,36,3,"value"],[44,11,36,3],[44,13,38,2],[44,22,38,2,"getEntriesByName"],[44,39,39,4,"name"],[44,43,39,16],[44,45,40,4,"type"],[44,49,40,31],[44,51,41,26],[45,8,42,4],[45,12,42,8,"type"],[45,16,42,12],[45,21,42,17,"undefined"],[45,30,42,26],[45,32,42,28],[46,10,43,6],[46,17,43,13],[46,21,43,17],[46,22,43,18,"_entries"],[46,30,43,26],[46,31,43,27,"filter"],[46,37,43,33],[46,38,43,34],[46,48,43,34,"entry"],[46,53,43,39],[47,12,43,39],[47,19,43,43,"entry"],[47,24,43,48],[47,25,43,49,"name"],[47,29,43,53],[47,34,43,58,"name"],[47,38,43,62],[48,10,43,62],[48,12,43,63],[49,8,44,4],[49,9,44,5],[49,15,44,11],[50,10,45,6],[50,17,45,13],[50,21,45,17],[50,22,45,18,"_entries"],[50,30,45,26],[50,31,45,27,"filter"],[50,37,45,33],[50,38,46,8],[50,48,46,8,"entry"],[50,53,46,13],[51,12,46,13],[51,19,46,17,"entry"],[51,24,46,22],[51,25,46,23,"name"],[51,29,46,27],[51,34,46,32,"name"],[51,38,46,36],[51,42,46,40,"entry"],[51,47,46,45],[51,48,46,46,"entryType"],[51,57,46,55],[51,62,46,60,"type"],[51,66,46,64],[52,10,46,64],[52,11,47,6],[52,12,47,7],[53,8,48,4],[54,6,49,2],[55,4,49,3],[56,4,49,3],[56,11,49,3,"PerformanceObserverEntryList"],[56,39,49,3],[57,2,49,3],[58,2,74,0],[58,6,74,6,"observerCountPerEntryType"],[58,31,74,66],[58,34,74,69],[58,38,74,73,"Map"],[58,41,74,76],[58,42,74,77],[58,43,74,78],[59,2,75,0],[59,6,75,6,"registeredObservers"],[59,25,75,78],[59,28,76,2],[59,32,76,6,"Map"],[59,35,76,9],[59,36,76,10],[59,37,76,11],[60,2,77,0],[60,6,77,4,"isOnPerformanceEntryCallbackSet"],[60,37,77,44],[60,40,77,47],[60,45,77,52],[62,2,79,0],[63,2,80,0],[63,6,80,6,"onPerformanceEntry"],[63,24,80,24],[63,27,80,27],[63,36,80,6,"onPerformanceEntry"],[63,54,80,24,"onPerformanceEntry"],[63,55,80,24],[63,57,80,33],[64,4,80,33],[64,8,80,33,"_entryResult$entries"],[64,28,80,33],[65,4,81,2],[65,8,81,6],[65,9,81,7,"NativePerformanceObserver"],[65,43,81,32],[65,45,81,34],[66,6,82,4],[67,4,83,2],[68,4,84,2],[68,8,84,8,"entryResult"],[68,19,84,19],[68,22,84,22,"NativePerformanceObserver"],[68,56,84,47],[68,57,84,48,"popPendingEntries"],[68,74,84,65],[68,75,84,66],[68,76,84,67],[69,4,85,2],[69,8,85,8,"rawEntries"],[69,18,85,18],[69,22,85,18,"_entryResult$entries"],[69,42,85,18],[69,45,85,21,"entryResult"],[69,56,85,32],[69,76,85,21,"entryResult"],[69,87,85,32],[69,88,85,34,"entries"],[69,95,85,41],[69,107,85,41,"_entryResult$entries"],[69,127,85,41],[69,130,85,45],[69,132,85,47],[70,4,86,2],[70,8,86,8,"droppedEntriesCount"],[70,27,86,27],[70,30,86,30,"entryResult"],[70,41,86,41],[70,61,86,30,"entryResult"],[70,72,86,41],[70,73,86,43,"droppedEntriesCount"],[70,92,86,62],[71,4,87,2],[71,8,87,6,"rawEntries"],[71,18,87,16],[71,19,87,17,"length"],[71,25,87,23],[71,30,87,28],[71,31,87,29],[71,33,87,31],[72,6,88,4],[73,4,89,2],[74,4,90,2],[74,8,90,8,"entries"],[74,15,90,15],[74,18,90,18,"rawEntries"],[74,28,90,28],[74,29,90,29,"map"],[74,32,90,32],[74,33,90,33,"rawToPerformanceEntry"],[74,75,90,54],[74,76,90,55],[75,4,90,56],[75,8,90,56,"_loop"],[75,13,90,56],[75,25,90,56,"_loop"],[75,31,90,56,"observerConfig"],[75,45,90,56],[75,47,91,74],[76,6,92,4],[76,10,92,10,"entriesForObserver"],[76,28,92,50],[76,31,92,53,"entries"],[76,38,92,60],[76,39,92,61,"filter"],[76,45,92,67],[76,46,92,68],[76,56,92,68,"entry"],[76,61,92,73],[76,63,92,77],[77,8,93,6],[77,12,93,10],[77,13,93,11,"observerConfig"],[77,27,93,25],[77,28,93,26,"entryTypes"],[77,38,93,36],[77,39,93,37,"has"],[77,42,93,40],[77,43,93,41,"entry"],[77,48,93,46],[77,49,93,47,"entryType"],[77,58,93,56],[77,59,93,57],[77,61,93,59],[78,10,94,8],[78,17,94,15],[78,22,94,20],[79,8,95,6],[80,8,96,6],[80,12,96,12,"durationThreshold"],[80,29,96,29],[80,32,96,32,"observerConfig"],[80,46,96,46],[80,47,96,47,"entryTypes"],[80,57,96,57],[80,58,96,58,"get"],[80,61,96,61],[80,62,96,62,"entry"],[80,67,96,67],[80,68,96,68,"entryType"],[80,77,96,77],[80,78,96,78],[81,8,97,6],[81,15,97,13,"entry"],[81,20,97,18],[81,21,97,19,"duration"],[81,29,97,27],[81,34,97,32,"durationThreshold"],[81,51,97,49],[81,62,97,32,"durationThreshold"],[81,79,97,49],[81,82,97,53],[81,83,97,54],[81,84,97,55],[82,6,98,4],[82,7,98,5],[82,8,98,6],[83,6,99,4,"observerConfig"],[83,20,99,18],[83,21,99,19,"callback"],[83,29,99,27],[83,30,100,6],[83,34,100,10,"PerformanceObserverEntryList"],[83,62,100,38],[83,63,100,39,"entriesForObserver"],[83,81,100,57],[83,82,100,58],[83,84,101,6,"observer"],[83,93,101,14],[83,95,102,6,"droppedEntriesCount"],[83,114,103,4],[83,115,103,5],[84,4,104,2],[84,5,104,3],[85,4,91,2],[85,13,91,2,"_ref"],[85,17,91,2],[85,21,91,43,"registeredObservers"],[85,40,91,62],[85,41,91,63,"entries"],[85,48,91,70],[85,49,91,71],[85,50,91,72],[86,6,91,72],[86,10,91,72,"_ref2"],[86,15,91,72],[86,22,91,72,"_slicedToArray2"],[86,37,91,72],[86,38,91,72,"default"],[86,45,91,72],[86,47,91,72,"_ref"],[86,51,91,72],[87,6,91,72],[87,10,91,14,"observer"],[87,19,91,22],[87,22,91,22,"_ref2"],[87,27,91,22],[88,6,91,22],[88,10,91,24,"observerConfig"],[88,24,91,38],[88,27,91,38,"_ref2"],[88,32,91,38],[89,6,91,38,"_loop"],[89,11,91,38],[89,12,91,38,"observerConfig"],[89,26,91,38],[90,4,91,38],[91,2,105,0],[91,3,105,1],[92,2,107,7],[92,11,107,16,"warnNoNativePerformanceObserver"],[92,42,107,47,"warnNoNativePerformanceObserver"],[92,43,107,47],[92,45,107,50],[93,4,108,2],[93,8,108,2,"warnOnce"],[93,25,108,10],[93,27,109,4],[93,64,109,41],[93,66,110,4],[93,120,111,2],[93,121,111,3],[94,2,112,0],[95,2,114,0],[95,11,114,9,"applyDurationThresholds"],[95,34,114,32,"applyDurationThresholds"],[95,35,114,32],[95,37,114,35],[96,4,115,2],[96,8,115,8,"durationThresholds"],[96,26,115,62],[96,29,115,65,"Array"],[96,34,115,70],[96,35,115,71,"from"],[96,39,115,75],[96,40,116,4,"registeredObservers"],[96,59,116,23],[96,60,116,24,"values"],[96,66,116,30],[96,67,116,31],[96,68,117,2],[96,69,117,3],[96,70,118,5,"map"],[96,73,118,8],[96,74,118,9],[96,84,118,9,"config"],[96,90,118,15],[97,6,118,15],[97,13,118,19,"config"],[97,19,118,25],[97,20,118,26,"entryTypes"],[97,30,118,36],[98,4,118,36],[98,6,118,37],[98,7,119,5,"reduce"],[98,13,119,11],[98,14,120,6],[98,24,120,7,"accumulator"],[98,35,120,18],[98,37,120,20,"currentValue"],[98,49,120,32],[99,6,120,32],[99,13,120,37,"union"],[99,18,120,42],[99,19,120,43,"accumulator"],[99,30,120,54],[99,32,120,56,"currentValue"],[99,44,120,68],[99,45,120,69],[100,4,120,69],[100,7,121,6],[100,11,121,10,"Map"],[100,14,121,13],[100,15,121,14],[100,16,122,4],[100,17,122,5],[101,4,124,2],[101,13,124,2,"_ref3"],[101,18,124,2],[101,22,124,47,"durationThresholds"],[101,40,124,65],[101,42,124,67],[102,6,124,67],[102,10,124,67,"_ref4"],[102,15,124,67],[102,22,124,67,"_slicedToArray2"],[102,37,124,67],[102,38,124,67,"default"],[102,45,124,67],[102,47,124,67,"_ref3"],[102,52,124,67],[103,6,124,67],[103,10,124,14,"entryType"],[103,19,124,23],[103,22,124,23,"_ref4"],[103,27,124,23],[104,6,124,23],[104,10,124,25,"durationThreshold"],[104,27,124,42],[104,30,124,42,"_ref4"],[104,35,124,42],[105,6,125,4,"NativePerformanceObserver"],[105,40,125,29],[105,60,125,4,"NativePerformanceObserver"],[105,94,125,29],[105,95,125,31,"setDurationThreshold"],[105,115,125,51],[105,116,126,6],[105,120,126,6,"performanceEntryTypeToRaw"],[105,166,126,31],[105,168,126,32,"entryType"],[105,177,126,41],[105,178,126,42],[105,180,127,6,"durationThreshold"],[105,197,127,23],[105,208,127,6,"durationThreshold"],[105,225,127,23],[105,228,127,27],[105,229,128,4],[105,230,128,5],[106,4,129,2],[107,2,130,0],[109,2,132,0],[110,0,133,0],[111,0,134,0],[112,0,135,0],[113,0,136,0],[114,0,137,0],[115,0,138,0],[116,0,139,0],[117,0,140,0],[118,0,141,0],[119,0,142,0],[120,0,143,0],[121,0,144,0],[122,0,145,0],[123,0,146,0],[124,0,147,0],[125,0,148,0],[126,0,149,0],[127,0,150,0],[128,0,151,0],[129,2,132,0],[129,6,152,21,"PerformanceObserver"],[129,25,152,40],[129,28,152,40,"exports"],[129,35,152,40],[129,36,152,40,"default"],[129,43,152,40],[130,4,156,2],[130,13,156,2,"PerformanceObserver"],[130,33,156,14,"callback"],[130,41,156,51],[130,43,156,53],[131,6,156,53],[131,10,156,53,"_classCallCheck2"],[131,26,156,53],[131,27,156,53,"default"],[131,34,156,53],[131,42,156,53,"PerformanceObserver"],[131,61,156,53],[132,6,157,4],[132,10,157,8],[132,11,157,9,"_callback"],[132,20,157,18],[132,23,157,21,"callback"],[132,31,157,29],[133,4,158,2],[134,4,158,3],[134,8,158,3,"_createClass2"],[134,21,158,3],[134,22,158,3,"default"],[134,29,158,3],[134,31,158,3,"PerformanceObserver"],[134,50,158,3],[135,6,158,3,"key"],[135,9,158,3],[136,6,158,3,"value"],[136,11,158,3],[136,13,160,2],[136,22,160,2,"observe"],[136,30,160,10,"options"],[136,37,160,42],[136,39,160,50],[137,8,160,50],[137,12,160,50,"_registeredObservers$"],[137,33,160,50],[138,8,161,4],[138,12,161,8],[138,13,161,9,"NativePerformanceObserver"],[138,47,161,34],[138,49,161,36],[139,10,162,6,"warnNoNativePerformanceObserver"],[139,41,162,37],[139,42,162,38],[139,43,162,39],[140,10,163,6],[141,8,164,4],[142,8,166,4],[142,12,166,8],[142,13,166,9,"_validateObserveOptions"],[142,36,166,32],[142,37,166,33,"options"],[142,44,166,40],[142,45,166,41],[143,8,168,4],[143,12,168,8,"requestedEntryTypes"],[143,31,168,27],[144,8,170,4],[144,12,170,8,"options"],[144,19,170,15],[144,20,170,16,"entryTypes"],[144,30,170,26],[144,32,170,28],[145,10,171,6],[145,14,171,10],[145,15,171,11,"_type"],[145,20,171,16],[145,23,171,19],[145,33,171,29],[146,10,172,6,"requestedEntryTypes"],[146,29,172,25],[146,32,172,28],[146,36,172,32,"Map"],[146,39,172,35],[146,40,173,8,"options"],[146,47,173,15],[146,48,173,16,"entryTypes"],[146,58,173,26],[146,59,173,27,"map"],[146,62,173,30],[146,63,173,31],[146,73,173,31,"t"],[146,74,173,32],[147,12,173,32],[147,19,173,36],[147,20,173,37,"t"],[147,21,173,38],[147,23,173,40,"undefined"],[147,32,173,49],[147,33,173,50],[148,10,173,50],[148,12,174,6],[148,13,174,7],[149,8,175,4],[149,9,175,5],[149,15,175,11],[150,10,176,6],[150,14,176,10],[150,15,176,11,"_type"],[150,20,176,16],[150,23,176,19],[150,31,176,27],[151,10,177,6,"requestedEntryTypes"],[151,29,177,25],[151,32,177,28],[151,36,177,32,"Map"],[151,39,177,35],[151,40,177,36],[151,41,178,8],[151,42,178,9,"options"],[151,49,178,16],[151,50,178,17,"type"],[151,54,178,21],[151,56,178,23,"options"],[151,63,178,30],[151,64,178,31,"durationThreshold"],[151,81,178,48],[151,82,178,49],[151,83,179,7],[151,84,179,8],[152,8,180,4],[154,8,182,4],[155,8,183,4],[156,8,184,4],[156,12,184,10,"currentEntryTypes"],[156,29,184,27],[156,33,184,27,"_registeredObservers$"],[156,54,184,27],[156,57,184,30,"registeredObservers"],[156,76,184,49],[156,77,184,50,"get"],[156,80,184,53],[156,81,184,54],[156,85,184,58],[156,86,184,59],[156,107,184,30,"_registeredObservers$"],[156,128,184,30],[156,129,184,61,"entryTypes"],[156,139,184,71],[157,8,185,4],[157,12,185,10,"nextEntryTypes"],[157,26,185,24],[157,29,185,27,"currentEntryTypes"],[157,46,185,44],[157,49,186,8,"union"],[157,54,186,13],[157,55,186,14,"requestedEntryTypes"],[157,74,186,33],[157,76,186,35,"currentEntryTypes"],[157,93,186,52],[157,94,186,53],[157,97,187,8,"requestedEntryTypes"],[157,116,187,27],[159,8,189,4],[160,8,190,4],[160,12,190,8,"currentEntryTypes"],[160,29,190,25],[160,33,190,29,"currentEntryTypes"],[160,50,190,46],[160,51,190,47,"size"],[160,55,190,51],[160,60,190,56,"nextEntryTypes"],[160,74,190,70],[160,75,190,71,"size"],[160,79,190,75],[160,81,190,77],[161,10,191,6],[162,8,192,4],[163,8,194,4,"registeredObservers"],[163,27,194,23],[163,28,194,24,"set"],[163,31,194,27],[163,32,194,28],[163,36,194,32],[163,38,194,34],[164,10,195,6,"callback"],[164,18,195,14],[164,20,195,16],[164,24,195,20],[164,25,195,21,"_callback"],[164,34,195,30],[165,10,196,6,"entryTypes"],[165,20,196,16],[165,22,196,18,"nextEntryTypes"],[166,8,197,4],[166,9,197,5],[166,10,197,6],[167,8,199,4],[167,12,199,8],[167,13,199,9,"isOnPerformanceEntryCallbackSet"],[167,44,199,40],[167,46,199,42],[168,10,200,6,"NativePerformanceObserver"],[168,44,200,31],[168,45,200,32,"setOnPerformanceEntryCallback"],[168,74,200,61],[168,75,201,8,"onPerformanceEntry"],[168,93,202,6],[168,94,202,7],[169,10,203,6,"isOnPerformanceEntryCallbackSet"],[169,41,203,37],[169,44,203,40],[169,48,203,44],[170,8,204,4],[172,8,206,4],[173,8,207,4],[174,8,208,4],[174,12,208,10,"newEntryTypes"],[174,25,208,23],[174,28,208,26,"currentEntryTypes"],[174,45,208,43],[174,48,209,8,"difference"],[174,58,209,18],[174,59,210,10],[174,63,210,14,"Set"],[174,66,210,17],[174,67,210,18,"requestedEntryTypes"],[174,86,210,37],[174,87,210,38,"keys"],[174,91,210,42],[174,92,210,43],[174,93,210,44],[174,94,210,45],[174,96,211,10],[174,100,211,14,"Set"],[174,103,211,17],[174,104,211,18,"currentEntryTypes"],[174,121,211,35],[174,122,211,36,"keys"],[174,126,211,40],[174,127,211,41],[174,128,211,42],[174,129,212,8],[174,130,212,9],[174,133,213,8],[174,137,213,12,"Set"],[174,140,213,15],[174,141,213,16,"requestedEntryTypes"],[174,160,213,35],[174,161,213,36,"keys"],[174,165,213,40],[174,166,213,41],[174,167,213,42],[174,168,213,43],[175,8,214,4],[175,13,214,9],[175,17,214,15,"type"],[175,21,214,19],[175,25,214,23,"newEntryTypes"],[175,38,214,36],[175,40,214,38],[176,10,214,38],[176,14,214,38,"_observerCountPerEntr"],[176,35,214,38],[177,10,215,6],[177,14,215,10],[177,15,215,11,"observerCountPerEntryType"],[177,40,215,36],[177,41,215,37,"has"],[177,44,215,40],[177,45,215,41,"type"],[177,49,215,45],[177,50,215,46],[177,52,215,48],[178,12,216,8],[178,16,216,14,"rawType"],[178,23,216,21],[178,26,216,24],[178,30,216,24,"performanceEntryTypeToRaw"],[178,76,216,49],[178,78,216,50,"type"],[178,82,216,54],[178,83,216,55],[179,12,217,8,"NativePerformanceObserver"],[179,46,217,33],[179,47,217,34,"startReporting"],[179,61,217,48],[179,62,217,49,"rawType"],[179,69,217,56],[179,70,217,57],[180,10,218,6],[181,10,219,6,"observerCountPerEntryType"],[181,35,219,31],[181,36,219,32,"set"],[181,39,219,35],[181,40,220,8,"type"],[181,44,220,12],[181,46,221,8],[181,48,221,8,"_observerCountPerEntr"],[181,69,221,8],[181,72,221,9,"observerCountPerEntryType"],[181,97,221,34],[181,98,221,35,"get"],[181,101,221,38],[181,102,221,39,"type"],[181,106,221,43],[181,107,221,44],[181,119,221,44,"_observerCountPerEntr"],[181,140,221,44],[181,143,221,48],[181,144,221,49],[181,148,221,53],[181,149,222,6],[181,150,222,7],[182,8,223,4],[183,8,224,4,"applyDurationThresholds"],[183,31,224,27],[183,32,224,28],[183,33,224,29],[184,6,225,2],[185,4,225,3],[186,6,225,3,"key"],[186,9,225,3],[187,6,225,3,"value"],[187,11,225,3],[187,13,227,2],[187,22,227,2,"disconnect"],[187,33,227,2],[187,35,227,21],[188,8,228,4],[188,12,228,8],[188,13,228,9,"NativePerformanceObserver"],[188,47,228,34],[188,49,228,36],[189,10,229,6,"warnNoNativePerformanceObserver"],[189,41,229,37],[189,42,229,38],[189,43,229,39],[190,10,230,6],[191,8,231,4],[192,8,233,4],[192,12,233,10,"observerConfig"],[192,26,233,24],[192,29,233,27,"registeredObservers"],[192,48,233,46],[192,49,233,47,"get"],[192,52,233,50],[192,53,233,51],[192,57,233,55],[192,58,233,56],[193,8,234,4],[193,12,234,8],[193,13,234,9,"observerConfig"],[193,27,234,23],[193,29,234,25],[194,10,235,6],[195,8,236,4],[197,8,238,4],[198,8,239,4],[198,13,239,9],[198,17,239,15,"type"],[198,21,239,19],[198,25,239,23,"observerConfig"],[198,39,239,37],[198,40,239,38,"entryTypes"],[198,50,239,48],[198,51,239,49,"keys"],[198,55,239,53],[198,56,239,54],[198,57,239,55],[198,59,239,57],[199,10,239,57],[199,14,239,57,"_observerCountPerEntr2"],[199,36,239,57],[200,10,240,6],[200,14,240,12,"numberOfObserversForThisType"],[200,42,240,40],[200,46,240,40,"_observerCountPerEntr2"],[200,68,240,40],[200,71,241,8,"observerCountPerEntryType"],[200,96,241,33],[200,97,241,34,"get"],[200,100,241,37],[200,101,241,38,"type"],[200,105,241,42],[200,106,241,43],[200,118,241,43,"_observerCountPerEntr2"],[200,140,241,43],[200,143,241,47],[200,144,241,48],[201,10,242,6],[201,14,242,10,"numberOfObserversForThisType"],[201,42,242,38],[201,47,242,43],[201,48,242,44],[201,50,242,46],[202,12,243,8,"observerCountPerEntryType"],[202,37,243,33],[202,38,243,34,"delete"],[202,44,243,40],[202,45,243,41,"type"],[202,49,243,45],[202,50,243,46],[203,12,244,8,"NativePerformanceObserver"],[203,46,244,33],[203,47,244,34,"stopReporting"],[203,60,244,47],[203,61,245,10],[203,65,245,10,"performanceEntryTypeToRaw"],[203,111,245,35],[203,113,245,36,"type"],[203,117,245,40],[203,118,246,8],[203,119,246,9],[204,10,247,6],[204,11,247,7],[204,17,247,13],[204,21,247,17,"numberOfObserversForThisType"],[204,49,247,45],[204,54,247,50],[204,55,247,51],[204,57,247,53],[205,12,248,8,"observerCountPerEntryType"],[205,37,248,33],[205,38,248,34,"set"],[205,41,248,37],[205,42,248,38,"type"],[205,46,248,42],[205,48,248,44,"numberOfObserversForThisType"],[205,76,248,72],[205,79,248,75],[205,80,248,76],[205,81,248,77],[206,10,249,6],[207,8,250,4],[209,8,252,4],[210,8,253,4,"registeredObservers"],[210,27,253,23],[210,28,253,24,"delete"],[210,34,253,30],[210,35,253,31],[210,39,253,35],[210,40,253,36],[211,8,254,4],[211,12,254,8,"registeredObservers"],[211,31,254,27],[211,32,254,28,"size"],[211,36,254,32],[211,41,254,37],[211,42,254,38],[211,44,254,40],[212,10,255,6,"NativePerformanceObserver"],[212,44,255,31],[212,45,255,32,"setOnPerformanceEntryCallback"],[212,74,255,61],[212,75,255,62,"undefined"],[212,84,255,71],[212,85,255,72],[213,10,256,6,"isOnPerformanceEntryCallbackSet"],[213,41,256,37],[213,44,256,40],[213,49,256,45],[214,8,257,4],[215,8,259,4,"applyDurationThresholds"],[215,31,259,27],[215,32,259,28],[215,33,259,29],[216,6,260,2],[217,4,260,3],[218,6,260,3,"key"],[218,9,260,3],[219,6,260,3,"value"],[219,11,260,3],[219,13,262,2],[219,22,262,2,"_validateObserveOptions"],[219,46,262,26,"options"],[219,53,262,58],[219,55,262,66],[220,8,263,4],[220,12,263,11,"type"],[220,16,263,15],[220,19,263,50,"options"],[220,26,263,57],[220,27,263,11,"type"],[220,31,263,15],[221,10,263,17,"entryTypes"],[221,20,263,27],[221,23,263,50,"options"],[221,30,263,57],[221,31,263,17,"entryTypes"],[221,41,263,27],[222,10,263,29,"durationThreshold"],[222,27,263,46],[222,30,263,50,"options"],[222,37,263,57],[222,38,263,29,"durationThreshold"],[222,55,263,46],[223,8,265,4],[223,12,265,8],[223,13,265,9,"type"],[223,17,265,13],[223,21,265,17],[223,22,265,18,"entryTypes"],[223,32,265,28],[223,34,265,30],[224,10,266,6],[224,16,266,12],[224,20,266,16,"TypeError"],[224,29,266,25],[224,30,267,8],[224,156,268,6],[224,157,268,7],[225,8,269,4],[226,8,271,4],[226,12,271,8,"entryTypes"],[226,22,271,18],[226,26,271,22,"type"],[226,30,271,26],[226,32,271,28],[227,10,272,6],[227,16,272,12],[227,20,272,16,"TypeError"],[227,29,272,25],[227,30,273,8],[227,153,274,6],[227,154,274,7],[228,8,275,4],[229,8,277,4],[229,12,277,8],[229,16,277,12],[229,17,277,13,"_type"],[229,22,277,18],[229,27,277,23],[229,37,277,33],[229,41,277,37,"type"],[229,45,277,41],[229,47,277,43],[230,10,278,6],[230,16,278,12],[230,20,278,16,"Error"],[230,25,278,21],[230,26,279,8],[230,183,280,6],[230,184,280,7],[231,8,281,4],[232,8,283,4],[232,12,283,8],[232,16,283,12],[232,17,283,13,"_type"],[232,22,283,18],[232,27,283,23],[232,35,283,31],[232,39,283,35,"entryTypes"],[232,49,283,45],[232,51,283,47],[233,10,284,6],[233,16,284,12],[233,20,284,16,"Error"],[233,25,284,21],[233,26,285,8],[233,194,286,6],[233,195,286,7],[234,8,287,4],[235,8,289,4],[235,12,289,8,"entryTypes"],[235,22,289,18],[235,26,289,22,"durationThreshold"],[235,43,289,39],[235,48,289,44,"undefined"],[235,57,289,53],[235,59,289,55],[236,10,290,6],[236,16,290,12],[236,20,290,16,"TypeError"],[236,29,290,25],[236,30,291,8],[236,169,292,6],[236,170,292,7],[237,8,293,4],[238,6,294,2],[239,4,294,3],[240,4,294,3],[240,11,294,3,"PerformanceObserver"],[240,30,294,3],[241,2,294,3],[241,7,300,0],[242,2,152,21,"PerformanceObserver"],[242,21,152,40],[242,22,296,9,"supportedEntryTypes"],[242,41,296,28],[242,44,297,4,"Object"],[242,50,297,10],[242,51,297,11,"freeze"],[242,57,297,17],[242,58,297,18],[242,59,297,19],[242,65,297,25],[242,67,297,27],[242,76,297,36],[242,78,297,38],[242,85,297,45],[242,86,297,46],[242,87,297,47],[243,2,301,0],[243,11,301,9,"union"],[243,16,301,14,"union"],[243,17,302,2,"a"],[243,18,302,29],[243,20,303,2,"b"],[243,21,303,29],[243,23,304,19],[244,4,305,2],[244,8,305,8,"res"],[244,11,305,11],[244,14,305,14],[244,18,305,18,"Map"],[244,21,305,21],[244,22,305,34],[244,23,305,35],[245,4,306,2],[245,13,306,2,"_ref5"],[245,18,306,2],[245,22,306,23,"a"],[245,23,306,24],[245,25,306,26],[246,6,306,26],[246,10,306,26,"_ref6"],[246,15,306,26],[246,22,306,26,"_slicedToArray2"],[246,37,306,26],[246,38,306,26,"default"],[246,45,306,26],[246,47,306,26,"_ref5"],[246,52,306,26],[247,6,306,26],[247,10,306,14,"k"],[247,11,306,15],[247,14,306,15,"_ref6"],[247,19,306,15],[248,6,306,15],[248,10,306,17,"v"],[248,11,306,18],[248,14,306,18,"_ref6"],[248,19,306,18],[249,6,307,4],[249,10,307,8],[249,11,307,9,"b"],[249,12,307,10],[249,13,307,11,"has"],[249,16,307,14],[249,17,307,15,"k"],[249,18,307,16],[249,19,307,17],[249,21,307,19],[250,8,308,6,"res"],[250,11,308,9],[250,12,308,10,"set"],[250,15,308,13],[250,16,308,14,"k"],[250,17,308,15],[250,19,308,17,"v"],[250,20,308,18],[250,21,308,19],[251,6,309,4],[251,7,309,5],[251,13,309,11],[252,8,309,11],[252,12,309,11,"_b$get"],[252,18,309,11],[253,8,310,6,"res"],[253,11,310,9],[253,12,310,10,"set"],[253,15,310,13],[253,16,310,14,"k"],[253,17,310,15],[253,19,310,17,"Math"],[253,23,310,21],[253,24,310,22,"min"],[253,27,310,25],[253,28,310,26,"v"],[253,29,310,27],[253,40,310,26,"v"],[253,41,310,27],[253,44,310,31],[253,45,310,32],[253,48,310,32,"_b$get"],[253,54,310,32],[253,57,310,34,"b"],[253,58,310,35],[253,59,310,36,"get"],[253,62,310,39],[253,63,310,40,"k"],[253,64,310,41],[253,65,310,42],[253,77,310,42,"_b$get"],[253,83,310,42],[253,86,310,46],[253,87,310,47],[253,88,310,48],[253,89,310,49],[254,6,311,4],[255,4,312,2],[256,4,313,2],[256,11,313,9,"res"],[256,14,313,12],[257,2,314,0],[258,2,316,0],[258,11,316,9,"difference"],[258,21,316,19,"difference"],[258,22,316,23,"a"],[258,23,316,41],[258,25,316,43,"b"],[258,26,316,61],[258,28,316,71],[259,4,317,2],[259,11,317,9],[259,15,317,13,"Set"],[259,18,317,16],[259,19,317,17],[259,23,317,17,"_toConsumableArray2"],[259,42,317,17],[259,43,317,17,"default"],[259,50,317,17],[259,52,317,21,"a"],[259,53,317,22],[259,55,317,24,"filter"],[259,61,317,30],[259,62,317,31],[259,72,317,31,"x"],[259,73,317,32],[260,6,317,32],[260,13,317,36],[260,14,317,37,"b"],[260,15,317,38],[260,16,317,39,"has"],[260,19,317,42],[260,20,317,43,"x"],[260,21,317,44],[260,22,317,45],[261,4,317,45],[261,6,317,46],[261,7,317,47],[262,2,318,0],[263,0,318,1]],"functionMap":{"names":["<global>","PerformanceObserverEntryList","PerformanceObserverEntryList#constructor","PerformanceObserverEntryList#getEntries","PerformanceObserverEntryList#getEntriesByType","_entries.filter$argument_0","PerformanceObserverEntryList#getEntriesByName","onPerformanceEntry","entries.filter$argument_0","warnNoNativePerformanceObserver","applyDurationThresholds","Array.from.map$argument_0","Array.from.map.reduce$argument_0","PerformanceObserver","constructor","observe","options.entryTypes.map$argument_0","disconnect","_validateObserveOptions","union","difference","filter$argument_0"],"mappings":"AAA;OCsB;ECG;GDE;EEE;GFE;EGE;gCCC,iCD;GHC;EKE;kCDK,4BC;QDG,wDC;GLG;CDC;2BO8B;oECY;KDM;CPO;OSE;CTK;AUE;SCI,2BD;MEE,+DF;CVU;easB;ECI;GDE;EEE;+BCa,mBD;GFoD;EIE;GJiC;EKE;GLgC;CbI;AmBG;CnBa;AoBE;+BCC,cD;CpBC"}},"type":"js/module"}]}