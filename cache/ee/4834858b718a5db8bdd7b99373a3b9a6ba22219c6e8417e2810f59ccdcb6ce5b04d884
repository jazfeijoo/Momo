{"dependencies":[{"name":"../../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":37,"index":37}}],"key":"llq4nuOBKCCL4A7IFpRswh14toM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var TYPE = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE;\n  var WHITESPACE = TYPE.WhiteSpace;\n  var COMMENT = TYPE.Comment;\n  var IDENT = TYPE.Ident;\n  var FUNCTION = TYPE.Function;\n  var COLON = TYPE.Colon;\n  var LEFTPARENTHESIS = TYPE.LeftParenthesis;\n  function consumeRaw() {\n    return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex, null, false));\n  }\n  function parentheses() {\n    this.scanner.skipSC();\n    if (this.scanner.tokenType === IDENT && this.lookupNonWSType(1) === COLON) {\n      return this.createSingleNodeList(this.Declaration());\n    }\n    return readSequence.call(this);\n  }\n  function readSequence() {\n    var children = this.createList();\n    var space = null;\n    var child;\n    this.scanner.skipSC();\n    scan: while (!this.scanner.eof) {\n      switch (this.scanner.tokenType) {\n        case WHITESPACE:\n          space = this.WhiteSpace();\n          continue;\n        case COMMENT:\n          this.scanner.next();\n          continue;\n        case FUNCTION:\n          child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n          break;\n        case IDENT:\n          child = this.Identifier();\n          break;\n        case LEFTPARENTHESIS:\n          child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n          break;\n        default:\n          break scan;\n      }\n      if (space !== null) {\n        children.push(space);\n        space = null;\n      }\n      children.push(child);\n    }\n    return children;\n  }\n  module.exports = {\n    parse: {\n      prelude: function prelude() {\n        var children = readSequence.call(this);\n        if (this.getFirstListNode(children) === null) {\n          this.error('Condition is expected');\n        }\n        return children;\n      },\n      block: function block() {\n        return this.Block(false);\n      }\n    }\n  };\n});","lineCount":66,"map":[[2,2,1,0],[2,6,1,4,"TYPE"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,25,1,18,"_dependencyMap"],[2,39,1,18],[2,61,1,36],[2,62,1,37],[2,63,1,38,"TYPE"],[2,67,1,42],[3,2,3,0],[3,6,3,4,"WHITESPACE"],[3,16,3,14],[3,19,3,17,"TYPE"],[3,23,3,21],[3,24,3,22,"WhiteSpace"],[3,34,3,32],[4,2,4,0],[4,6,4,4,"COMMENT"],[4,13,4,11],[4,16,4,14,"TYPE"],[4,20,4,18],[4,21,4,19,"Comment"],[4,28,4,26],[5,2,5,0],[5,6,5,4,"IDENT"],[5,11,5,9],[5,14,5,12,"TYPE"],[5,18,5,16],[5,19,5,17,"Ident"],[5,24,5,22],[6,2,6,0],[6,6,6,4,"FUNCTION"],[6,14,6,12],[6,17,6,15,"TYPE"],[6,21,6,19],[6,22,6,20,"Function"],[6,30,6,28],[7,2,7,0],[7,6,7,4,"COLON"],[7,11,7,9],[7,14,7,12,"TYPE"],[7,18,7,16],[7,19,7,17,"Colon"],[7,24,7,22],[8,2,8,0],[8,6,8,4,"LEFTPARENTHESIS"],[8,21,8,19],[8,24,8,22,"TYPE"],[8,28,8,26],[8,29,8,27,"LeftParenthesis"],[8,44,8,42],[9,2,10,0],[9,11,10,9,"consumeRaw"],[9,21,10,19,"consumeRaw"],[9,22,10,19],[9,24,10,22],[10,4,11,4],[10,11,11,11],[10,15,11,15],[10,16,11,16,"createSingleNodeList"],[10,36,11,36],[10,37,12,8],[10,41,12,12],[10,42,12,13,"Raw"],[10,45,12,16],[10,46,12,17],[10,50,12,21],[10,51,12,22,"scanner"],[10,58,12,29],[10,59,12,30,"tokenIndex"],[10,69,12,40],[10,71,12,42],[10,75,12,46],[10,77,12,48],[10,82,12,53],[10,83,13,4],[10,84,13,5],[11,2,14,0],[12,2,16,0],[12,11,16,9,"parentheses"],[12,22,16,20,"parentheses"],[12,23,16,20],[12,25,16,23],[13,4,17,4],[13,8,17,8],[13,9,17,9,"scanner"],[13,16,17,16],[13,17,17,17,"skipSC"],[13,23,17,23],[13,24,17,24],[13,25,17,25],[14,4,19,4],[14,8,19,8],[14,12,19,12],[14,13,19,13,"scanner"],[14,20,19,20],[14,21,19,21,"tokenType"],[14,30,19,30],[14,35,19,35,"IDENT"],[14,40,19,40],[14,44,20,8],[14,48,20,12],[14,49,20,13,"lookupNonWSType"],[14,64,20,28],[14,65,20,29],[14,66,20,30],[14,67,20,31],[14,72,20,36,"COLON"],[14,77,20,41],[14,79,20,43],[15,6,21,8],[15,13,21,15],[15,17,21,19],[15,18,21,20,"createSingleNodeList"],[15,38,21,40],[15,39,22,12],[15,43,22,16],[15,44,22,17,"Declaration"],[15,55,22,28],[15,56,22,29],[15,57,23,8],[15,58,23,9],[16,4,24,4],[17,4,26,4],[17,11,26,11,"readSequence"],[17,23,26,23],[17,24,26,24,"call"],[17,28,26,28],[17,29,26,29],[17,33,26,33],[17,34,26,34],[18,2,27,0],[19,2,29,0],[19,11,29,9,"readSequence"],[19,23,29,21,"readSequence"],[19,24,29,21],[19,26,29,24],[20,4,30,4],[20,8,30,8,"children"],[20,16,30,16],[20,19,30,19],[20,23,30,23],[20,24,30,24,"createList"],[20,34,30,34],[20,35,30,35],[20,36,30,36],[21,4,31,4],[21,8,31,8,"space"],[21,13,31,13],[21,16,31,16],[21,20,31,20],[22,4,32,4],[22,8,32,8,"child"],[22,13,32,13],[23,4,34,4],[23,8,34,8],[23,9,34,9,"scanner"],[23,16,34,16],[23,17,34,17,"skipSC"],[23,23,34,23],[23,24,34,24],[23,25,34,25],[24,4,36,4,"scan"],[24,8,36,8],[24,10,37,4],[24,17,37,11],[24,18,37,12],[24,22,37,16],[24,23,37,17,"scanner"],[24,30,37,24],[24,31,37,25,"eof"],[24,34,37,28],[24,36,37,30],[25,6,38,8],[25,14,38,16],[25,18,38,20],[25,19,38,21,"scanner"],[25,26,38,28],[25,27,38,29,"tokenType"],[25,36,38,38],[26,8,39,12],[26,13,39,17,"WHITESPACE"],[26,23,39,27],[27,10,40,16,"space"],[27,15,40,21],[27,18,40,24],[27,22,40,28],[27,23,40,29,"WhiteSpace"],[27,33,40,39],[27,34,40,40],[27,35,40,41],[28,10,41,16],[29,8,43,12],[29,13,43,17,"COMMENT"],[29,20,43,24],[30,10,44,16],[30,14,44,20],[30,15,44,21,"scanner"],[30,22,44,28],[30,23,44,29,"next"],[30,27,44,33],[30,28,44,34],[30,29,44,35],[31,10,45,16],[32,8,47,12],[32,13,47,17,"FUNCTION"],[32,21,47,25],[33,10,48,16,"child"],[33,15,48,21],[33,18,48,24],[33,22,48,28],[33,23,48,29,"Function"],[33,31,48,37],[33,32,48,38,"consumeRaw"],[33,42,48,48],[33,44,48,50],[33,48,48,54],[33,49,48,55,"scope"],[33,54,48,60],[33,55,48,61,"AtrulePrelude"],[33,68,48,74],[33,69,48,75],[34,10,49,16],[35,8,51,12],[35,13,51,17,"IDENT"],[35,18,51,22],[36,10,52,16,"child"],[36,15,52,21],[36,18,52,24],[36,22,52,28],[36,23,52,29,"Identifier"],[36,33,52,39],[36,34,52,40],[36,35,52,41],[37,10,53,16],[38,8,55,12],[38,13,55,17,"LEFTPARENTHESIS"],[38,28,55,32],[39,10,56,16,"child"],[39,15,56,21],[39,18,56,24],[39,22,56,28],[39,23,56,29,"Parentheses"],[39,34,56,40],[39,35,56,41,"parentheses"],[39,46,56,52],[39,48,56,54],[39,52,56,58],[39,53,56,59,"scope"],[39,58,56,64],[39,59,56,65,"AtrulePrelude"],[39,72,56,78],[39,73,56,79],[40,10,57,16],[41,8,59,12],[42,10,60,16],[42,16,60,22,"scan"],[42,20,60,26],[43,6,61,8],[44,6,63,8],[44,10,63,12,"space"],[44,15,63,17],[44,20,63,22],[44,24,63,26],[44,26,63,28],[45,8,64,12,"children"],[45,16,64,20],[45,17,64,21,"push"],[45,21,64,25],[45,22,64,26,"space"],[45,27,64,31],[45,28,64,32],[46,8,65,12,"space"],[46,13,65,17],[46,16,65,20],[46,20,65,24],[47,6,66,8],[48,6,68,8,"children"],[48,14,68,16],[48,15,68,17,"push"],[48,19,68,21],[48,20,68,22,"child"],[48,25,68,27],[48,26,68,28],[49,4,69,4],[50,4,71,4],[50,11,71,11,"children"],[50,19,71,19],[51,2,72,0],[52,2,74,0,"module"],[52,8,74,6],[52,9,74,7,"exports"],[52,16,74,14],[52,19,74,17],[53,4,75,4,"parse"],[53,9,75,9],[53,11,75,11],[54,6,76,8,"prelude"],[54,13,76,15],[54,15,76,17],[54,24,76,17,"prelude"],[54,32,76,17],[54,34,76,28],[55,8,77,12],[55,12,77,16,"children"],[55,20,77,24],[55,23,77,27,"readSequence"],[55,35,77,39],[55,36,77,40,"call"],[55,40,77,44],[55,41,77,45],[55,45,77,49],[55,46,77,50],[56,8,79,12],[56,12,79,16],[56,16,79,20],[56,17,79,21,"getFirstListNode"],[56,33,79,37],[56,34,79,38,"children"],[56,42,79,46],[56,43,79,47],[56,48,79,52],[56,52,79,56],[56,54,79,58],[57,10,80,16],[57,14,80,20],[57,15,80,21,"error"],[57,20,80,26],[57,21,80,27],[57,44,80,50],[57,45,80,51],[58,8,81,12],[59,8,83,12],[59,15,83,19,"children"],[59,23,83,27],[60,6,84,8],[60,7,84,9],[61,6,85,8,"block"],[61,11,85,13],[61,13,85,15],[61,22,85,15,"block"],[61,28,85,15],[61,30,85,26],[62,8,86,12],[62,15,86,19],[62,19,86,23],[62,20,86,24,"Block"],[62,25,86,29],[62,26,86,30],[62,31,86,35],[62,32,86,36],[63,6,87,8],[64,4,88,4],[65,2,89,0],[65,3,89,1],[66,0,89,2]],"functionMap":{"names":["<global>","consumeRaw","parentheses","readSequence","module.exports.parse.prelude","module.exports.parse.block"],"mappings":"AAA;ACS;CDI;AEE;CFW;AGE;CH2C;iBII;SJQ;eKC;SLE"}},"type":"js/module"}]}