{"dependencies":[{"name":"domhandler","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":19,"index":215},"end":{"line":4,"column":40,"index":236}}],"key":"JhlTxQPoKjLr/Si5MjJ4YoDUcd0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\n  var domhandler_1 = _$$_REQUIRE(_dependencyMap[0], \"domhandler\");\n  /**\n   * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param node Node to search. Will be included in the result set if it matches.\n   * @param recurse Also consider child nodes.\n   * @param limit Maximum number of nodes to return.\n   * @returns All nodes passing `test`.\n   */\n  function filter(test, node, recurse, limit) {\n    if (recurse === void 0) {\n      recurse = true;\n    }\n    if (limit === void 0) {\n      limit = Infinity;\n    }\n    return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n  }\n  exports.filter = filter;\n  /**\n   * Search an array of nodes and their children for nodes passing a test function.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @param recurse Also consider child nodes.\n   * @param limit Maximum number of nodes to return.\n   * @returns All nodes passing `test`.\n   */\n  function find(test, nodes, recurse, limit) {\n    var result = [];\n    /** Stack of the arrays we are looking at. */\n    var nodeStack = [nodes];\n    /** Stack of the indices within the arrays. */\n    var indexStack = [0];\n    for (;;) {\n      // First, check if the current array has any more elements to look at.\n      if (indexStack[0] >= nodeStack[0].length) {\n        // If we have no more arrays to look at, we are done.\n        if (indexStack.length === 1) {\n          return result;\n        }\n        // Otherwise, remove the current array from the stack.\n        nodeStack.shift();\n        indexStack.shift();\n        // Loop back to the start to continue with the next array.\n        continue;\n      }\n      var elem = nodeStack[0][indexStack[0]++];\n      if (test(elem)) {\n        result.push(elem);\n        if (--limit <= 0) return result;\n      }\n      if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n        /*\n         * Add the children to the stack. We are depth-first, so this is\n         * the next array we look at.\n         */\n        indexStack.unshift(0);\n        nodeStack.unshift(elem.children);\n      }\n    }\n  }\n  exports.find = find;\n  /**\n   * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns The first node in the array that passes `test`.\n   * @deprecated Use `Array.prototype.find` directly.\n   */\n  function findOneChild(test, nodes) {\n    return nodes.find(test);\n  }\n  exports.findOneChild = findOneChild;\n  /**\n   * Finds one element in a tree that passes a test.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Node or array of nodes to search.\n   * @param recurse Also consider child nodes.\n   * @returns The first node that passes `test`.\n   */\n  function findOne(test, nodes, recurse) {\n    if (recurse === void 0) {\n      recurse = true;\n    }\n    var elem = null;\n    for (var i = 0; i < nodes.length && !elem; i++) {\n      var node = nodes[i];\n      if (!(0, domhandler_1.isTag)(node)) {\n        continue;\n      } else if (test(node)) {\n        elem = node;\n      } else if (recurse && node.children.length > 0) {\n        elem = findOne(test, node.children, true);\n      }\n    }\n    return elem;\n  }\n  exports.findOne = findOne;\n  /**\n   * Checks if a tree of nodes contains at least one node passing a test.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns Whether a tree of nodes contains at least one node passing the test.\n   */\n  function existsOne(test, nodes) {\n    return nodes.some(function (checked) {\n      return (0, domhandler_1.isTag)(checked) && (test(checked) || existsOne(test, checked.children));\n    });\n  }\n  exports.existsOne = existsOne;\n  /**\n   * Search an array of nodes and their children for elements passing a test function.\n   *\n   * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns All nodes passing `test`.\n   */\n  function findAll(test, nodes) {\n    var result = [];\n    var nodeStack = [nodes];\n    var indexStack = [0];\n    for (;;) {\n      if (indexStack[0] >= nodeStack[0].length) {\n        if (nodeStack.length === 1) {\n          return result;\n        }\n        // Otherwise, remove the current array from the stack.\n        nodeStack.shift();\n        indexStack.shift();\n        // Loop back to the start to continue with the next array.\n        continue;\n      }\n      var elem = nodeStack[0][indexStack[0]++];\n      if (!(0, domhandler_1.isTag)(elem)) continue;\n      if (test(elem)) result.push(elem);\n      if (elem.children.length > 0) {\n        indexStack.unshift(0);\n        nodeStack.unshift(elem.children);\n      }\n    }\n  }\n  exports.findAll = findAll;\n});","lineCount":163,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"findAll"],[7,17,3,15],[7,20,3,18,"exports"],[7,27,3,25],[7,28,3,26,"existsOne"],[7,37,3,35],[7,40,3,38,"exports"],[7,47,3,45],[7,48,3,46,"findOne"],[7,55,3,53],[7,58,3,56,"exports"],[7,65,3,63],[7,66,3,64,"findOneChild"],[7,78,3,76],[7,81,3,79,"exports"],[7,88,3,86],[7,89,3,87,"find"],[7,93,3,91],[7,96,3,94,"exports"],[7,103,3,101],[7,104,3,102,"filter"],[7,110,3,108],[7,113,3,111],[7,118,3,116],[7,119,3,117],[8,2,4,0],[8,6,4,4,"domhandler_1"],[8,18,4,16],[8,21,4,19,"require"],[8,32,4,26],[8,33,4,26,"_dependencyMap"],[8,47,4,26],[8,64,4,39],[8,65,4,40],[9,2,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,2,15,0],[19,11,15,9,"filter"],[19,17,15,15,"filter"],[19,18,15,16,"test"],[19,22,15,20],[19,24,15,22,"node"],[19,28,15,26],[19,30,15,28,"recurse"],[19,37,15,35],[19,39,15,37,"limit"],[19,44,15,42],[19,46,15,44],[20,4,16,4],[20,8,16,8,"recurse"],[20,15,16,15],[20,20,16,20],[20,25,16,25],[20,26,16,26],[20,28,16,28],[21,6,16,30,"recurse"],[21,13,16,37],[21,16,16,40],[21,20,16,44],[22,4,16,46],[23,4,17,4],[23,8,17,8,"limit"],[23,13,17,13],[23,18,17,18],[23,23,17,23],[23,24,17,24],[23,26,17,26],[24,6,17,28,"limit"],[24,11,17,33],[24,14,17,36,"Infinity"],[24,22,17,44],[25,4,17,46],[26,4,18,4],[26,11,18,11,"find"],[26,15,18,15],[26,16,18,16,"test"],[26,20,18,20],[26,22,18,22,"Array"],[26,27,18,27],[26,28,18,28,"isArray"],[26,35,18,35],[26,36,18,36,"node"],[26,40,18,40],[26,41,18,41],[26,44,18,44,"node"],[26,48,18,48],[26,51,18,51],[26,52,18,52,"node"],[26,56,18,56],[26,57,18,57],[26,59,18,59,"recurse"],[26,66,18,66],[26,68,18,68,"limit"],[26,73,18,73],[26,74,18,74],[27,2,19,0],[28,2,20,0,"exports"],[28,9,20,7],[28,10,20,8,"filter"],[28,16,20,14],[28,19,20,17,"filter"],[28,25,20,23],[29,2,21,0],[30,0,22,0],[31,0,23,0],[32,0,24,0],[33,0,25,0],[34,0,26,0],[35,0,27,0],[36,0,28,0],[37,0,29,0],[38,0,30,0],[39,2,31,0],[39,11,31,9,"find"],[39,15,31,13,"find"],[39,16,31,14,"test"],[39,20,31,18],[39,22,31,20,"nodes"],[39,27,31,25],[39,29,31,27,"recurse"],[39,36,31,34],[39,38,31,36,"limit"],[39,43,31,41],[39,45,31,43],[40,4,32,4],[40,8,32,8,"result"],[40,14,32,14],[40,17,32,17],[40,19,32,19],[41,4,33,4],[42,4,34,4],[42,8,34,8,"nodeStack"],[42,17,34,17],[42,20,34,20],[42,21,34,21,"nodes"],[42,26,34,26],[42,27,34,27],[43,4,35,4],[44,4,36,4],[44,8,36,8,"indexStack"],[44,18,36,18],[44,21,36,21],[44,22,36,22],[44,23,36,23],[44,24,36,24],[45,4,37,4],[45,13,37,13],[46,6,38,8],[47,6,39,8],[47,10,39,12,"indexStack"],[47,20,39,22],[47,21,39,23],[47,22,39,24],[47,23,39,25],[47,27,39,29,"nodeStack"],[47,36,39,38],[47,37,39,39],[47,38,39,40],[47,39,39,41],[47,40,39,42,"length"],[47,46,39,48],[47,48,39,50],[48,8,40,12],[49,8,41,12],[49,12,41,16,"indexStack"],[49,22,41,26],[49,23,41,27,"length"],[49,29,41,33],[49,34,41,38],[49,35,41,39],[49,37,41,41],[50,10,42,16],[50,17,42,23,"result"],[50,23,42,29],[51,8,43,12],[52,8,44,12],[53,8,45,12,"nodeStack"],[53,17,45,21],[53,18,45,22,"shift"],[53,23,45,27],[53,24,45,28],[53,25,45,29],[54,8,46,12,"indexStack"],[54,18,46,22],[54,19,46,23,"shift"],[54,24,46,28],[54,25,46,29],[54,26,46,30],[55,8,47,12],[56,8,48,12],[57,6,49,8],[58,6,50,8],[58,10,50,12,"elem"],[58,14,50,16],[58,17,50,19,"nodeStack"],[58,26,50,28],[58,27,50,29],[58,28,50,30],[58,29,50,31],[58,30,50,32,"indexStack"],[58,40,50,42],[58,41,50,43],[58,42,50,44],[58,43,50,45],[58,45,50,47],[58,46,50,48],[59,6,51,8],[59,10,51,12,"test"],[59,14,51,16],[59,15,51,17,"elem"],[59,19,51,21],[59,20,51,22],[59,22,51,24],[60,8,52,12,"result"],[60,14,52,18],[60,15,52,19,"push"],[60,19,52,23],[60,20,52,24,"elem"],[60,24,52,28],[60,25,52,29],[61,8,53,12],[61,12,53,16],[61,14,53,18,"limit"],[61,19,53,23],[61,23,53,27],[61,24,53,28],[61,26,54,16],[61,33,54,23,"result"],[61,39,54,29],[62,6,55,8],[63,6,56,8],[63,10,56,12,"recurse"],[63,17,56,19],[63,21,56,23],[63,22,56,24],[63,23,56,25],[63,25,56,27,"domhandler_1"],[63,37,56,39],[63,38,56,40,"hasChildren"],[63,49,56,51],[63,51,56,53,"elem"],[63,55,56,57],[63,56,56,58],[63,60,56,62,"elem"],[63,64,56,66],[63,65,56,67,"children"],[63,73,56,75],[63,74,56,76,"length"],[63,80,56,82],[63,83,56,85],[63,84,56,86],[63,86,56,88],[64,8,57,12],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,8,61,12,"indexStack"],[68,18,61,22],[68,19,61,23,"unshift"],[68,26,61,30],[68,27,61,31],[68,28,61,32],[68,29,61,33],[69,8,62,12,"nodeStack"],[69,17,62,21],[69,18,62,22,"unshift"],[69,25,62,29],[69,26,62,30,"elem"],[69,30,62,34],[69,31,62,35,"children"],[69,39,62,43],[69,40,62,44],[70,6,63,8],[71,4,64,4],[72,2,65,0],[73,2,66,0,"exports"],[73,9,66,7],[73,10,66,8,"find"],[73,14,66,12],[73,17,66,15,"find"],[73,21,66,19],[74,2,67,0],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,0,72,0],[80,0,73,0],[81,0,74,0],[82,0,75,0],[83,2,76,0],[83,11,76,9,"findOneChild"],[83,23,76,21,"findOneChild"],[83,24,76,22,"test"],[83,28,76,26],[83,30,76,28,"nodes"],[83,35,76,33],[83,37,76,35],[84,4,77,4],[84,11,77,11,"nodes"],[84,16,77,16],[84,17,77,17,"find"],[84,21,77,21],[84,22,77,22,"test"],[84,26,77,26],[84,27,77,27],[85,2,78,0],[86,2,79,0,"exports"],[86,9,79,7],[86,10,79,8,"findOneChild"],[86,22,79,20],[86,25,79,23,"findOneChild"],[86,37,79,35],[87,2,80,0],[88,0,81,0],[89,0,82,0],[90,0,83,0],[91,0,84,0],[92,0,85,0],[93,0,86,0],[94,0,87,0],[95,0,88,0],[96,2,89,0],[96,11,89,9,"findOne"],[96,18,89,16,"findOne"],[96,19,89,17,"test"],[96,23,89,21],[96,25,89,23,"nodes"],[96,30,89,28],[96,32,89,30,"recurse"],[96,39,89,37],[96,41,89,39],[97,4,90,4],[97,8,90,8,"recurse"],[97,15,90,15],[97,20,90,20],[97,25,90,25],[97,26,90,26],[97,28,90,28],[98,6,90,30,"recurse"],[98,13,90,37],[98,16,90,40],[98,20,90,44],[99,4,90,46],[100,4,91,4],[100,8,91,8,"elem"],[100,12,91,12],[100,15,91,15],[100,19,91,19],[101,4,92,4],[101,9,92,9],[101,13,92,13,"i"],[101,14,92,14],[101,17,92,17],[101,18,92,18],[101,20,92,20,"i"],[101,21,92,21],[101,24,92,24,"nodes"],[101,29,92,29],[101,30,92,30,"length"],[101,36,92,36],[101,40,92,40],[101,41,92,41,"elem"],[101,45,92,45],[101,47,92,47,"i"],[101,48,92,48],[101,50,92,50],[101,52,92,52],[102,6,93,8],[102,10,93,12,"node"],[102,14,93,16],[102,17,93,19,"nodes"],[102,22,93,24],[102,23,93,25,"i"],[102,24,93,26],[102,25,93,27],[103,6,94,8],[103,10,94,12],[103,11,94,13],[103,12,94,14],[103,13,94,15],[103,15,94,17,"domhandler_1"],[103,27,94,29],[103,28,94,30,"isTag"],[103,33,94,35],[103,35,94,37,"node"],[103,39,94,41],[103,40,94,42],[103,42,94,44],[104,8,95,12],[105,6,96,8],[105,7,96,9],[105,13,97,13],[105,17,97,17,"test"],[105,21,97,21],[105,22,97,22,"node"],[105,26,97,26],[105,27,97,27],[105,29,97,29],[106,8,98,12,"elem"],[106,12,98,16],[106,15,98,19,"node"],[106,19,98,23],[107,6,99,8],[107,7,99,9],[107,13,100,13],[107,17,100,17,"recurse"],[107,24,100,24],[107,28,100,28,"node"],[107,32,100,32],[107,33,100,33,"children"],[107,41,100,41],[107,42,100,42,"length"],[107,48,100,48],[107,51,100,51],[107,52,100,52],[107,54,100,54],[108,8,101,12,"elem"],[108,12,101,16],[108,15,101,19,"findOne"],[108,22,101,26],[108,23,101,27,"test"],[108,27,101,31],[108,29,101,33,"node"],[108,33,101,37],[108,34,101,38,"children"],[108,42,101,46],[108,44,101,48],[108,48,101,52],[108,49,101,53],[109,6,102,8],[110,4,103,4],[111,4,104,4],[111,11,104,11,"elem"],[111,15,104,15],[112,2,105,0],[113,2,106,0,"exports"],[113,9,106,7],[113,10,106,8,"findOne"],[113,17,106,15],[113,20,106,18,"findOne"],[113,27,106,25],[114,2,107,0],[115,0,108,0],[116,0,109,0],[117,0,110,0],[118,0,111,0],[119,0,112,0],[120,0,113,0],[121,0,114,0],[122,2,115,0],[122,11,115,9,"existsOne"],[122,20,115,18,"existsOne"],[122,21,115,19,"test"],[122,25,115,23],[122,27,115,25,"nodes"],[122,32,115,30],[122,34,115,32],[123,4,116,4],[123,11,116,11,"nodes"],[123,16,116,16],[123,17,116,17,"some"],[123,21,116,21],[123,22,116,22],[123,32,116,32,"checked"],[123,39,116,39],[123,41,116,41],[124,6,117,8],[124,13,117,15],[124,14,117,16],[124,15,117,17],[124,17,117,19,"domhandler_1"],[124,29,117,31],[124,30,117,32,"isTag"],[124,35,117,37],[124,37,117,39,"checked"],[124,44,117,46],[124,45,117,47],[124,50,118,13,"test"],[124,54,118,17],[124,55,118,18,"checked"],[124,62,118,25],[124,63,118,26],[124,67,118,30,"existsOne"],[124,76,118,39],[124,77,118,40,"test"],[124,81,118,44],[124,83,118,46,"checked"],[124,90,118,53],[124,91,118,54,"children"],[124,99,118,62],[124,100,118,63],[124,101,118,64],[125,4,119,4],[125,5,119,5],[125,6,119,6],[126,2,120,0],[127,2,121,0,"exports"],[127,9,121,7],[127,10,121,8,"existsOne"],[127,19,121,17],[127,22,121,20,"existsOne"],[127,31,121,29],[128,2,122,0],[129,0,123,0],[130,0,124,0],[131,0,125,0],[132,0,126,0],[133,0,127,0],[134,0,128,0],[135,0,129,0],[136,0,130,0],[137,0,131,0],[138,2,132,0],[138,11,132,9,"findAll"],[138,18,132,16,"findAll"],[138,19,132,17,"test"],[138,23,132,21],[138,25,132,23,"nodes"],[138,30,132,28],[138,32,132,30],[139,4,133,4],[139,8,133,8,"result"],[139,14,133,14],[139,17,133,17],[139,19,133,19],[140,4,134,4],[140,8,134,8,"nodeStack"],[140,17,134,17],[140,20,134,20],[140,21,134,21,"nodes"],[140,26,134,26],[140,27,134,27],[141,4,135,4],[141,8,135,8,"indexStack"],[141,18,135,18],[141,21,135,21],[141,22,135,22],[141,23,135,23],[141,24,135,24],[142,4,136,4],[142,13,136,13],[143,6,137,8],[143,10,137,12,"indexStack"],[143,20,137,22],[143,21,137,23],[143,22,137,24],[143,23,137,25],[143,27,137,29,"nodeStack"],[143,36,137,38],[143,37,137,39],[143,38,137,40],[143,39,137,41],[143,40,137,42,"length"],[143,46,137,48],[143,48,137,50],[144,8,138,12],[144,12,138,16,"nodeStack"],[144,21,138,25],[144,22,138,26,"length"],[144,28,138,32],[144,33,138,37],[144,34,138,38],[144,36,138,40],[145,10,139,16],[145,17,139,23,"result"],[145,23,139,29],[146,8,140,12],[147,8,141,12],[148,8,142,12,"nodeStack"],[148,17,142,21],[148,18,142,22,"shift"],[148,23,142,27],[148,24,142,28],[148,25,142,29],[149,8,143,12,"indexStack"],[149,18,143,22],[149,19,143,23,"shift"],[149,24,143,28],[149,25,143,29],[149,26,143,30],[150,8,144,12],[151,8,145,12],[152,6,146,8],[153,6,147,8],[153,10,147,12,"elem"],[153,14,147,16],[153,17,147,19,"nodeStack"],[153,26,147,28],[153,27,147,29],[153,28,147,30],[153,29,147,31],[153,30,147,32,"indexStack"],[153,40,147,42],[153,41,147,43],[153,42,147,44],[153,43,147,45],[153,45,147,47],[153,46,147,48],[154,6,148,8],[154,10,148,12],[154,11,148,13],[154,12,148,14],[154,13,148,15],[154,15,148,17,"domhandler_1"],[154,27,148,29],[154,28,148,30,"isTag"],[154,33,148,35],[154,35,148,37,"elem"],[154,39,148,41],[154,40,148,42],[154,42,149,12],[155,6,150,8],[155,10,150,12,"test"],[155,14,150,16],[155,15,150,17,"elem"],[155,19,150,21],[155,20,150,22],[155,22,151,12,"result"],[155,28,151,18],[155,29,151,19,"push"],[155,33,151,23],[155,34,151,24,"elem"],[155,38,151,28],[155,39,151,29],[156,6,152,8],[156,10,152,12,"elem"],[156,14,152,16],[156,15,152,17,"children"],[156,23,152,25],[156,24,152,26,"length"],[156,30,152,32],[156,33,152,35],[156,34,152,36],[156,36,152,38],[157,8,153,12,"indexStack"],[157,18,153,22],[157,19,153,23,"unshift"],[157,26,153,30],[157,27,153,31],[157,28,153,32],[157,29,153,33],[158,8,154,12,"nodeStack"],[158,17,154,21],[158,18,154,22,"unshift"],[158,25,154,29],[158,26,154,30,"elem"],[158,30,154,34],[158,31,154,35,"children"],[158,39,154,43],[158,40,154,44],[159,6,155,8],[160,4,156,4],[161,2,157,0],[162,2,158,0,"exports"],[162,9,158,7],[162,10,158,8,"findAll"],[162,17,158,15],[162,20,158,18,"findAll"],[162,27,158,25],[163,0,158,26]],"functionMap":{"names":["<global>","filter","find","findOneChild","findOne","existsOne","nodes.some$argument_0","findAll"],"mappings":"AAA;ACc;CDI;AEY;CFkC;AGW;CHE;AIW;CJgB;AKU;sBCC;KDG;CLC;AOY;CPyB"}},"type":"js/module"}]}