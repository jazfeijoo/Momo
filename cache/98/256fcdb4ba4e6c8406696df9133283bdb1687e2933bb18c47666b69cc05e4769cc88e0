{"dependencies":[{"name":"../common/TokenStream","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":50,"index":50}}],"key":"ENdWRVnyjrd3VEfJJi1X+aaQbZI="}},{"name":"../common/adopt-buffer","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":18,"index":70},"end":{"line":2,"column":51,"index":103}}],"key":"UugeCQM15ZCYM9r8dplB8+MhYio="}},{"name":"./const","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":16,"index":122},"end":{"line":4,"column":34,"index":140}}],"key":"r39jcII3m4e0v7lnJ+qf8EQIFzE="}},{"name":"./char-code-definitions","data":{"asyncType":null,"locs":[{"start":{"line":7,"column":26,"index":196},"end":{"line":7,"column":60,"index":230}}],"key":"NfOviVtQpFy6J6SQ3kQf3UUCl4Y="}},{"name":"./utils","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":12,"index":606},"end":{"line":16,"column":30,"index":624}}],"key":"FH4oXkS7WdR5kG0v+Eku8TWcu80="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var TokenStream = _$$_REQUIRE(_dependencyMap[0], \"../common/TokenStream\");\n  var adoptBuffer = _$$_REQUIRE(_dependencyMap[1], \"../common/adopt-buffer\");\n  var constants = _$$_REQUIRE(_dependencyMap[2], \"./const\");\n  var TYPE = constants.TYPE;\n  var charCodeDefinitions = _$$_REQUIRE(_dependencyMap[3], \"./char-code-definitions\");\n  var isNewline = charCodeDefinitions.isNewline;\n  var isName = charCodeDefinitions.isName;\n  var isValidEscape = charCodeDefinitions.isValidEscape;\n  var isNumberStart = charCodeDefinitions.isNumberStart;\n  var isIdentifierStart = charCodeDefinitions.isIdentifierStart;\n  var charCodeCategory = charCodeDefinitions.charCodeCategory;\n  var isBOM = charCodeDefinitions.isBOM;\n  var utils = _$$_REQUIRE(_dependencyMap[4], \"./utils\");\n  var cmpStr = utils.cmpStr;\n  var getNewlineLength = utils.getNewlineLength;\n  var findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\n  var consumeEscaped = utils.consumeEscaped;\n  var consumeName = utils.consumeName;\n  var consumeNumber = utils.consumeNumber;\n  var consumeBadUrlRemnants = utils.consumeBadUrlRemnants;\n  var OFFSET_MASK = 0x00FFFFFF;\n  var TYPE_SHIFT = 24;\n  function tokenize(source, stream) {\n    function getCharCode(offset) {\n      return offset < sourceLength ? source.charCodeAt(offset) : 0;\n    }\n\n    // § 4.3.3. Consume a numeric token\n    function consumeNumericToken() {\n      // Consume a number and let number be the result.\n      offset = consumeNumber(source, offset);\n\n      // If the next 3 input code points would start an identifier, then:\n      if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n        // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n        // Consume a name. Set the <dimension-token>’s unit to the returned value.\n        // Return the <dimension-token>.\n        type = TYPE.Dimension;\n        offset = consumeName(source, offset);\n        return;\n      }\n\n      // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n      if (getCharCode(offset) === 0x0025) {\n        // Create a <percentage-token> with the same value as number, and return it.\n        type = TYPE.Percentage;\n        offset++;\n        return;\n      }\n\n      // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n      type = TYPE.Number;\n    }\n\n    // § 4.3.4. Consume an ident-like token\n    function consumeIdentLikeToken() {\n      var nameStartOffset = offset;\n\n      // Consume a name, and let string be the result.\n      offset = consumeName(source, offset);\n\n      // If string’s value is an ASCII case-insensitive match for \"url\",\n      // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n      if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n        // While the next two input code points are whitespace, consume the next input code point.\n        offset = findWhiteSpaceEnd(source, offset + 1);\n\n        // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n        // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n        // then create a <function-token> with its value set to string and return it.\n        if (getCharCode(offset) === 0x0022 || getCharCode(offset) === 0x0027) {\n          type = TYPE.Function;\n          offset = nameStartOffset + 4;\n          return;\n        }\n\n        // Otherwise, consume a url token, and return it.\n        consumeUrlToken();\n        return;\n      }\n\n      // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n      // Create a <function-token> with its value set to string and return it.\n      if (getCharCode(offset) === 0x0028) {\n        type = TYPE.Function;\n        offset++;\n        return;\n      }\n\n      // Otherwise, create an <ident-token> with its value set to string and return it.\n      type = TYPE.Ident;\n    }\n\n    // § 4.3.5. Consume a string token\n    function consumeStringToken(endingCodePoint) {\n      // This algorithm may be called with an ending code point, which denotes the code point\n      // that ends the string. If an ending code point is not specified,\n      // the current input code point is used.\n      if (!endingCodePoint) {\n        endingCodePoint = getCharCode(offset++);\n      }\n\n      // Initially create a <string-token> with its value set to the empty string.\n      type = TYPE.String;\n\n      // Repeatedly consume the next input code point from the stream:\n      for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n        switch (charCodeCategory(code)) {\n          // ending code point\n          case endingCodePoint:\n            // Return the <string-token>.\n            offset++;\n            return;\n\n          // EOF\n          case charCodeCategory.Eof:\n            // This is a parse error. Return the <string-token>.\n            return;\n\n          // newline\n          case charCodeCategory.WhiteSpace:\n            if (isNewline(code)) {\n              // This is a parse error. Reconsume the current input code point,\n              // create a <bad-string-token>, and return it.\n              offset += getNewlineLength(source, offset, code);\n              type = TYPE.BadString;\n              return;\n            }\n            break;\n\n          // U+005C REVERSE SOLIDUS (\\)\n          case 0x005C:\n            // If the next input code point is EOF, do nothing.\n            if (offset === source.length - 1) {\n              break;\n            }\n            var nextCode = getCharCode(offset + 1);\n\n            // Otherwise, if the next input code point is a newline, consume it.\n            if (isNewline(nextCode)) {\n              offset += getNewlineLength(source, offset + 1, nextCode);\n            } else if (isValidEscape(code, nextCode)) {\n              // Otherwise, (the stream starts with a valid escape) consume\n              // an escaped code point and append the returned code point to\n              // the <string-token>’s value.\n              offset = consumeEscaped(source, offset) - 1;\n            }\n            break;\n\n          // anything else\n          // Append the current input code point to the <string-token>’s value.\n        }\n      }\n    }\n\n    // § 4.3.6. Consume a url token\n    // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n    // This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n    // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n    // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n    function consumeUrlToken() {\n      // Initially create a <url-token> with its value set to the empty string.\n      type = TYPE.Url;\n\n      // Consume as much whitespace as possible.\n      offset = findWhiteSpaceEnd(source, offset);\n\n      // Repeatedly consume the next input code point from the stream:\n      for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n        switch (charCodeCategory(code)) {\n          // U+0029 RIGHT PARENTHESIS ())\n          case 0x0029:\n            // Return the <url-token>.\n            offset++;\n            return;\n\n          // EOF\n          case charCodeCategory.Eof:\n            // This is a parse error. Return the <url-token>.\n            return;\n\n          // whitespace\n          case charCodeCategory.WhiteSpace:\n            // Consume as much whitespace as possible.\n            offset = findWhiteSpaceEnd(source, offset);\n\n            // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n            // consume it and return the <url-token>\n            // (if EOF was encountered, this is a parse error);\n            if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n              if (offset < source.length) {\n                offset++;\n              }\n              return;\n            }\n\n            // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n            // and return it.\n            offset = consumeBadUrlRemnants(source, offset);\n            type = TYPE.BadUrl;\n            return;\n\n          // U+0022 QUOTATION MARK (\")\n          // U+0027 APOSTROPHE (')\n          // U+0028 LEFT PARENTHESIS (()\n          // non-printable code point\n          case 0x0022:\n          case 0x0027:\n          case 0x0028:\n          case charCodeCategory.NonPrintable:\n            // This is a parse error. Consume the remnants of a bad url,\n            // create a <bad-url-token>, and return it.\n            offset = consumeBadUrlRemnants(source, offset);\n            type = TYPE.BadUrl;\n            return;\n\n          // U+005C REVERSE SOLIDUS (\\)\n          case 0x005C:\n            // If the stream starts with a valid escape, consume an escaped code point and\n            // append the returned code point to the <url-token>’s value.\n            if (isValidEscape(code, getCharCode(offset + 1))) {\n              offset = consumeEscaped(source, offset) - 1;\n              break;\n            }\n\n            // Otherwise, this is a parse error. Consume the remnants of a bad url,\n            // create a <bad-url-token>, and return it.\n            offset = consumeBadUrlRemnants(source, offset);\n            type = TYPE.BadUrl;\n            return;\n\n          // anything else\n          // Append the current input code point to the <url-token>’s value.\n        }\n      }\n    }\n\n    if (!stream) {\n      stream = new TokenStream();\n    }\n\n    // ensure source is a string\n    source = String(source || '');\n    var sourceLength = source.length;\n    var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token\n    var balance = adoptBuffer(stream.balance, sourceLength + 1);\n    var tokenCount = 0;\n    var start = isBOM(getCharCode(0));\n    var offset = start;\n    var balanceCloseType = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    // https://drafts.csswg.org/css-syntax-3/#consume-token\n    // § 4.3.1. Consume a token\n    while (offset < sourceLength) {\n      var code = source.charCodeAt(offset);\n      var type = 0;\n      balance[tokenCount] = sourceLength;\n      switch (charCodeCategory(code)) {\n        // whitespace\n        case charCodeCategory.WhiteSpace:\n          // Consume as much whitespace as possible. Return a <whitespace-token>.\n          type = TYPE.WhiteSpace;\n          offset = findWhiteSpaceEnd(source, offset + 1);\n          break;\n\n        // U+0022 QUOTATION MARK (\")\n        case 0x0022:\n          // Consume a string token and return it.\n          consumeStringToken();\n          break;\n\n        // U+0023 NUMBER SIGN (#)\n        case 0x0023:\n          // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n          if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // Create a <hash-token>.\n            type = TYPE.Hash;\n\n            // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n            // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n            //     // TODO: set id flag\n            // }\n\n            // Consume a name, and set the <hash-token>’s value to the returned string.\n            offset = consumeName(source, offset + 1);\n\n            // Return the <hash-token>.\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+0027 APOSTROPHE (')\n        case 0x0027:\n          // Consume a string token and return it.\n          consumeStringToken();\n          break;\n\n        // U+0028 LEFT PARENTHESIS (()\n        case 0x0028:\n          // Return a <(-token>.\n          type = TYPE.LeftParenthesis;\n          offset++;\n          break;\n\n        // U+0029 RIGHT PARENTHESIS ())\n        case 0x0029:\n          // Return a <)-token>.\n          type = TYPE.RightParenthesis;\n          offset++;\n          break;\n\n        // U+002B PLUS SIGN (+)\n        case 0x002B:\n          // If the input stream starts with a number, ...\n          if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // ... reconsume the current input code point, consume a numeric token, and return it.\n            consumeNumericToken();\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+002C COMMA (,)\n        case 0x002C:\n          // Return a <comma-token>.\n          type = TYPE.Comma;\n          offset++;\n          break;\n\n        // U+002D HYPHEN-MINUS (-)\n        case 0x002D:\n          // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n          if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            consumeNumericToken();\n          } else {\n            // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n            if (getCharCode(offset + 1) === 0x002D && getCharCode(offset + 2) === 0x003E) {\n              type = TYPE.CDC;\n              offset = offset + 3;\n            } else {\n              // Otherwise, if the input stream starts with an identifier, ...\n              if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                // ... reconsume the current input code point, consume an ident-like token, and return it.\n                consumeIdentLikeToken();\n              } else {\n                // Otherwise, return a <delim-token> with its value set to the current input code point.\n                type = TYPE.Delim;\n                offset++;\n              }\n            }\n          }\n          break;\n\n        // U+002E FULL STOP (.)\n        case 0x002E:\n          // If the input stream starts with a number, ...\n          if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // ... reconsume the current input code point, consume a numeric token, and return it.\n            consumeNumericToken();\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+002F SOLIDUS (/)\n        case 0x002F:\n          // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n          if (getCharCode(offset + 1) === 0x002A) {\n            // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n            // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n            type = TYPE.Comment;\n            offset = source.indexOf('*/', offset + 2) + 2;\n            if (offset === 1) {\n              offset = source.length;\n            }\n          } else {\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+003A COLON (:)\n        case 0x003A:\n          // Return a <colon-token>.\n          type = TYPE.Colon;\n          offset++;\n          break;\n\n        // U+003B SEMICOLON (;)\n        case 0x003B:\n          // Return a <semicolon-token>.\n          type = TYPE.Semicolon;\n          offset++;\n          break;\n\n        // U+003C LESS-THAN SIGN (<)\n        case 0x003C:\n          // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n          if (getCharCode(offset + 1) === 0x0021 && getCharCode(offset + 2) === 0x002D && getCharCode(offset + 3) === 0x002D) {\n            // ... consume them and return a <CDO-token>.\n            type = TYPE.CDO;\n            offset = offset + 4;\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+0040 COMMERCIAL AT (@)\n        case 0x0040:\n          // If the next 3 input code points would start an identifier, ...\n          if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n            // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n            type = TYPE.AtKeyword;\n            offset = consumeName(source, offset + 1);\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+005B LEFT SQUARE BRACKET ([)\n        case 0x005B:\n          // Return a <[-token>.\n          type = TYPE.LeftSquareBracket;\n          offset++;\n          break;\n\n        // U+005C REVERSE SOLIDUS (\\)\n        case 0x005C:\n          // If the input stream starts with a valid escape, ...\n          if (isValidEscape(code, getCharCode(offset + 1))) {\n            // ... reconsume the current input code point, consume an ident-like token, and return it.\n            consumeIdentLikeToken();\n          } else {\n            // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+005D RIGHT SQUARE BRACKET (])\n        case 0x005D:\n          // Return a <]-token>.\n          type = TYPE.RightSquareBracket;\n          offset++;\n          break;\n\n        // U+007B LEFT CURLY BRACKET ({)\n        case 0x007B:\n          // Return a <{-token>.\n          type = TYPE.LeftCurlyBracket;\n          offset++;\n          break;\n\n        // U+007D RIGHT CURLY BRACKET (})\n        case 0x007D:\n          // Return a <}-token>.\n          type = TYPE.RightCurlyBracket;\n          offset++;\n          break;\n\n        // digit\n        case charCodeCategory.Digit:\n          // Reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n          break;\n\n        // name-start code point\n        case charCodeCategory.NameStart:\n          // Reconsume the current input code point, consume an ident-like token, and return it.\n          consumeIdentLikeToken();\n          break;\n\n        // EOF\n        case charCodeCategory.Eof:\n          // Return an <EOF-token>.\n          break;\n\n        // anything else\n        default:\n          // Return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n      }\n      switch (type) {\n        case balanceCloseType:\n          balancePrev = balanceStart & OFFSET_MASK;\n          balanceStart = balance[balancePrev];\n          balanceCloseType = balanceStart >> TYPE_SHIFT;\n          balance[tokenCount] = balancePrev;\n          balance[balancePrev++] = tokenCount;\n          for (; balancePrev < tokenCount; balancePrev++) {\n            if (balance[balancePrev] === sourceLength) {\n              balance[balancePrev] = tokenCount;\n            }\n          }\n          break;\n        case TYPE.LeftParenthesis:\n        case TYPE.Function:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = TYPE.RightParenthesis;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n        case TYPE.LeftSquareBracket:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = TYPE.RightSquareBracket;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n        case TYPE.LeftCurlyBracket:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = TYPE.RightCurlyBracket;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n      }\n      offsetAndType[tokenCount++] = type << TYPE_SHIFT | offset;\n    }\n\n    // finalize buffers\n    offsetAndType[tokenCount] = TYPE.EOF << TYPE_SHIFT | offset; // <EOF-token>\n    balance[tokenCount] = sourceLength;\n    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n    while (balanceStart !== 0) {\n      balancePrev = balanceStart & OFFSET_MASK;\n      balanceStart = balance[balancePrev];\n      balance[balancePrev] = sourceLength;\n    }\n\n    // update stream\n    stream.source = source;\n    stream.firstCharOffset = start;\n    stream.offsetAndType = offsetAndType;\n    stream.tokenCount = tokenCount;\n    stream.balance = balance;\n    stream.reset();\n    stream.next();\n    return stream;\n  }\n\n  // extend tokenizer with constants\n  Object.keys(constants).forEach(function (key) {\n    tokenize[key] = constants[key];\n  });\n\n  // extend tokenizer with static methods from utils\n  Object.keys(charCodeDefinitions).forEach(function (key) {\n    tokenize[key] = charCodeDefinitions[key];\n  });\n  Object.keys(utils).forEach(function (key) {\n    tokenize[key] = utils[key];\n  });\n  module.exports = tokenize;\n});","lineCount":567,"map":[[2,2,1,0],[2,6,1,4,"TokenStream"],[2,17,1,15],[2,20,1,18,"require"],[2,31,1,25],[2,32,1,25,"_dependencyMap"],[2,46,1,25],[2,74,1,49],[2,75,1,50],[3,2,2,0],[3,6,2,4,"adoptBuffer"],[3,17,2,15],[3,20,2,18,"require"],[3,31,2,25],[3,32,2,25,"_dependencyMap"],[3,46,2,25],[3,75,2,50],[3,76,2,51],[4,2,4,0],[4,6,4,4,"constants"],[4,15,4,13],[4,18,4,16,"require"],[4,29,4,23],[4,30,4,23,"_dependencyMap"],[4,44,4,23],[4,58,4,33],[4,59,4,34],[5,2,5,0],[5,6,5,4,"TYPE"],[5,10,5,8],[5,13,5,11,"constants"],[5,22,5,20],[5,23,5,21,"TYPE"],[5,27,5,25],[6,2,7,0],[6,6,7,4,"charCodeDefinitions"],[6,25,7,23],[6,28,7,26,"require"],[6,39,7,33],[6,40,7,33,"_dependencyMap"],[6,54,7,33],[6,84,7,59],[6,85,7,60],[7,2,8,0],[7,6,8,4,"isNewline"],[7,15,8,13],[7,18,8,16,"charCodeDefinitions"],[7,37,8,35],[7,38,8,36,"isNewline"],[7,47,8,45],[8,2,9,0],[8,6,9,4,"isName"],[8,12,9,10],[8,15,9,13,"charCodeDefinitions"],[8,34,9,32],[8,35,9,33,"isName"],[8,41,9,39],[9,2,10,0],[9,6,10,4,"isValidEscape"],[9,19,10,17],[9,22,10,20,"charCodeDefinitions"],[9,41,10,39],[9,42,10,40,"isValidEscape"],[9,55,10,53],[10,2,11,0],[10,6,11,4,"isNumberStart"],[10,19,11,17],[10,22,11,20,"charCodeDefinitions"],[10,41,11,39],[10,42,11,40,"isNumberStart"],[10,55,11,53],[11,2,12,0],[11,6,12,4,"isIdentifierStart"],[11,23,12,21],[11,26,12,24,"charCodeDefinitions"],[11,45,12,43],[11,46,12,44,"isIdentifierStart"],[11,63,12,61],[12,2,13,0],[12,6,13,4,"charCodeCategory"],[12,22,13,20],[12,25,13,23,"charCodeDefinitions"],[12,44,13,42],[12,45,13,43,"charCodeCategory"],[12,61,13,59],[13,2,14,0],[13,6,14,4,"isBOM"],[13,11,14,9],[13,14,14,12,"charCodeDefinitions"],[13,33,14,31],[13,34,14,32,"isBOM"],[13,39,14,37],[14,2,16,0],[14,6,16,4,"utils"],[14,11,16,9],[14,14,16,12,"require"],[14,25,16,19],[14,26,16,19,"_dependencyMap"],[14,40,16,19],[14,54,16,29],[14,55,16,30],[15,2,17,0],[15,6,17,4,"cmpStr"],[15,12,17,10],[15,15,17,13,"utils"],[15,20,17,18],[15,21,17,19,"cmpStr"],[15,27,17,25],[16,2,18,0],[16,6,18,4,"getNewlineLength"],[16,22,18,20],[16,25,18,23,"utils"],[16,30,18,28],[16,31,18,29,"getNewlineLength"],[16,47,18,45],[17,2,19,0],[17,6,19,4,"findWhiteSpaceEnd"],[17,23,19,21],[17,26,19,24,"utils"],[17,31,19,29],[17,32,19,30,"findWhiteSpaceEnd"],[17,49,19,47],[18,2,20,0],[18,6,20,4,"consumeEscaped"],[18,20,20,18],[18,23,20,21,"utils"],[18,28,20,26],[18,29,20,27,"consumeEscaped"],[18,43,20,41],[19,2,21,0],[19,6,21,4,"consumeName"],[19,17,21,15],[19,20,21,18,"utils"],[19,25,21,23],[19,26,21,24,"consumeName"],[19,37,21,35],[20,2,22,0],[20,6,22,4,"consumeNumber"],[20,19,22,17],[20,22,22,20,"utils"],[20,27,22,25],[20,28,22,26,"consumeNumber"],[20,41,22,39],[21,2,23,0],[21,6,23,4,"consumeBadUrlRemnants"],[21,27,23,25],[21,30,23,28,"utils"],[21,35,23,33],[21,36,23,34,"consumeBadUrlRemnants"],[21,57,23,55],[22,2,25,0],[22,6,25,4,"OFFSET_MASK"],[22,17,25,15],[22,20,25,18],[22,30,25,28],[23,2,26,0],[23,6,26,4,"TYPE_SHIFT"],[23,16,26,14],[23,19,26,17],[23,21,26,19],[24,2,28,0],[24,11,28,9,"tokenize"],[24,19,28,17,"tokenize"],[24,20,28,18,"source"],[24,26,28,24],[24,28,28,26,"stream"],[24,34,28,32],[24,36,28,34],[25,4,29,4],[25,13,29,13,"getCharCode"],[25,24,29,24,"getCharCode"],[25,25,29,25,"offset"],[25,31,29,31],[25,33,29,33],[26,6,30,8],[26,13,30,15,"offset"],[26,19,30,21],[26,22,30,24,"sourceLength"],[26,34,30,36],[26,37,30,39,"source"],[26,43,30,45],[26,44,30,46,"charCodeAt"],[26,54,30,56],[26,55,30,57,"offset"],[26,61,30,63],[26,62,30,64],[26,65,30,67],[26,66,30,68],[27,4,31,4],[29,4,33,4],[30,4,34,4],[30,13,34,13,"consumeNumericToken"],[30,32,34,32,"consumeNumericToken"],[30,33,34,32],[30,35,34,35],[31,6,35,8],[32,6,36,8,"offset"],[32,12,36,14],[32,15,36,17,"consumeNumber"],[32,28,36,30],[32,29,36,31,"source"],[32,35,36,37],[32,37,36,39,"offset"],[32,43,36,45],[32,44,36,46],[34,6,38,8],[35,6,39,8],[35,10,39,12,"isIdentifierStart"],[35,27,39,29],[35,28,39,30,"getCharCode"],[35,39,39,41],[35,40,39,42,"offset"],[35,46,39,48],[35,47,39,49],[35,49,39,51,"getCharCode"],[35,60,39,62],[35,61,39,63,"offset"],[35,67,39,69],[35,70,39,72],[35,71,39,73],[35,72,39,74],[35,74,39,76,"getCharCode"],[35,85,39,87],[35,86,39,88,"offset"],[35,92,39,94],[35,95,39,97],[35,96,39,98],[35,97,39,99],[35,98,39,100],[35,100,39,102],[36,8,40,12],[37,8,41,12],[38,8,42,12],[39,8,43,12,"type"],[39,12,43,16],[39,15,43,19,"TYPE"],[39,19,43,23],[39,20,43,24,"Dimension"],[39,29,43,33],[40,8,44,12,"offset"],[40,14,44,18],[40,17,44,21,"consumeName"],[40,28,44,32],[40,29,44,33,"source"],[40,35,44,39],[40,37,44,41,"offset"],[40,43,44,47],[40,44,44,48],[41,8,45,12],[42,6,46,8],[44,6,48,8],[45,6,49,8],[45,10,49,12,"getCharCode"],[45,21,49,23],[45,22,49,24,"offset"],[45,28,49,30],[45,29,49,31],[45,34,49,36],[45,40,49,42],[45,42,49,44],[46,8,50,12],[47,8,51,12,"type"],[47,12,51,16],[47,15,51,19,"TYPE"],[47,19,51,23],[47,20,51,24,"Percentage"],[47,30,51,34],[48,8,52,12,"offset"],[48,14,52,18],[48,16,52,20],[49,8,53,12],[50,6,54,8],[52,6,56,8],[53,6,57,8,"type"],[53,10,57,12],[53,13,57,15,"TYPE"],[53,17,57,19],[53,18,57,20,"Number"],[53,24,57,26],[54,4,58,4],[56,4,60,4],[57,4,61,4],[57,13,61,13,"consumeIdentLikeToken"],[57,34,61,34,"consumeIdentLikeToken"],[57,35,61,34],[57,37,61,37],[58,6,62,8],[58,10,62,14,"nameStartOffset"],[58,25,62,29],[58,28,62,32,"offset"],[58,34,62,38],[60,6,64,8],[61,6,65,8,"offset"],[61,12,65,14],[61,15,65,17,"consumeName"],[61,26,65,28],[61,27,65,29,"source"],[61,33,65,35],[61,35,65,37,"offset"],[61,41,65,43],[61,42,65,44],[63,6,67,8],[64,6,68,8],[65,6,69,8],[65,10,69,12,"cmpStr"],[65,16,69,18],[65,17,69,19,"source"],[65,23,69,25],[65,25,69,27,"nameStartOffset"],[65,40,69,42],[65,42,69,44,"offset"],[65,48,69,50],[65,50,69,52],[65,55,69,57],[65,56,69,58],[65,60,69,62,"getCharCode"],[65,71,69,73],[65,72,69,74,"offset"],[65,78,69,80],[65,79,69,81],[65,84,69,86],[65,90,69,92],[65,92,69,94],[66,8,70,12],[67,8,71,12,"offset"],[67,14,71,18],[67,17,71,21,"findWhiteSpaceEnd"],[67,34,71,38],[67,35,71,39,"source"],[67,41,71,45],[67,43,71,47,"offset"],[67,49,71,53],[67,52,71,56],[67,53,71,57],[67,54,71,58],[69,8,73,12],[70,8,74,12],[71,8,75,12],[72,8,76,12],[72,12,76,16,"getCharCode"],[72,23,76,27],[72,24,76,28,"offset"],[72,30,76,34],[72,31,76,35],[72,36,76,40],[72,42,76,46],[72,46,77,16,"getCharCode"],[72,57,77,27],[72,58,77,28,"offset"],[72,64,77,34],[72,65,77,35],[72,70,77,40],[72,76,77,46],[72,78,77,48],[73,10,78,16,"type"],[73,14,78,20],[73,17,78,23,"TYPE"],[73,21,78,27],[73,22,78,28,"Function"],[73,30,78,36],[74,10,79,16,"offset"],[74,16,79,22],[74,19,79,25,"nameStartOffset"],[74,34,79,40],[74,37,79,43],[74,38,79,44],[75,10,80,16],[76,8,81,12],[78,8,83,12],[79,8,84,12,"consumeUrlToken"],[79,23,84,27],[79,24,84,28],[79,25,84,29],[80,8,85,12],[81,6,86,8],[83,6,88,8],[84,6,89,8],[85,6,90,8],[85,10,90,12,"getCharCode"],[85,21,90,23],[85,22,90,24,"offset"],[85,28,90,30],[85,29,90,31],[85,34,90,36],[85,40,90,42],[85,42,90,44],[86,8,91,12,"type"],[86,12,91,16],[86,15,91,19,"TYPE"],[86,19,91,23],[86,20,91,24,"Function"],[86,28,91,32],[87,8,92,12,"offset"],[87,14,92,18],[87,16,92,20],[88,8,93,12],[89,6,94,8],[91,6,96,8],[92,6,97,8,"type"],[92,10,97,12],[92,13,97,15,"TYPE"],[92,17,97,19],[92,18,97,20,"Ident"],[92,23,97,25],[93,4,98,4],[95,4,100,4],[96,4,101,4],[96,13,101,13,"consumeStringToken"],[96,31,101,31,"consumeStringToken"],[96,32,101,32,"endingCodePoint"],[96,47,101,47],[96,49,101,49],[97,6,102,8],[98,6,103,8],[99,6,104,8],[100,6,105,8],[100,10,105,12],[100,11,105,13,"endingCodePoint"],[100,26,105,28],[100,28,105,30],[101,8,106,12,"endingCodePoint"],[101,23,106,27],[101,26,106,30,"getCharCode"],[101,37,106,41],[101,38,106,42,"offset"],[101,44,106,48],[101,46,106,50],[101,47,106,51],[102,6,107,8],[104,6,109,8],[105,6,110,8,"type"],[105,10,110,12],[105,13,110,15,"TYPE"],[105,17,110,19],[105,18,110,20,"String"],[105,24,110,26],[107,6,112,8],[108,6,113,8],[108,13,113,15,"offset"],[108,19,113,21],[108,22,113,24,"source"],[108,28,113,30],[108,29,113,31,"length"],[108,35,113,37],[108,37,113,39,"offset"],[108,43,113,45],[108,45,113,47],[108,47,113,49],[109,8,114,12],[109,12,114,16,"code"],[109,16,114,20],[109,19,114,23,"source"],[109,25,114,29],[109,26,114,30,"charCodeAt"],[109,36,114,40],[109,37,114,41,"offset"],[109,43,114,47],[109,44,114,48],[110,8,116,12],[110,16,116,20,"charCodeCategory"],[110,32,116,36],[110,33,116,37,"code"],[110,37,116,41],[110,38,116,42],[111,10,117,16],[112,10,118,16],[112,15,118,21,"endingCodePoint"],[112,30,118,36],[113,12,119,20],[114,12,120,20,"offset"],[114,18,120,26],[114,20,120,28],[115,12,121,20],[117,10,123,16],[118,10,124,16],[118,15,124,21,"charCodeCategory"],[118,31,124,37],[118,32,124,38,"Eof"],[118,35,124,41],[119,12,125,20],[120,12,126,20],[122,10,128,16],[123,10,129,16],[123,15,129,21,"charCodeCategory"],[123,31,129,37],[123,32,129,38,"WhiteSpace"],[123,42,129,48],[124,12,130,20],[124,16,130,24,"isNewline"],[124,25,130,33],[124,26,130,34,"code"],[124,30,130,38],[124,31,130,39],[124,33,130,41],[125,14,131,24],[126,14,132,24],[127,14,133,24,"offset"],[127,20,133,30],[127,24,133,34,"getNewlineLength"],[127,40,133,50],[127,41,133,51,"source"],[127,47,133,57],[127,49,133,59,"offset"],[127,55,133,65],[127,57,133,67,"code"],[127,61,133,71],[127,62,133,72],[128,14,134,24,"type"],[128,18,134,28],[128,21,134,31,"TYPE"],[128,25,134,35],[128,26,134,36,"BadString"],[128,35,134,45],[129,14,135,24],[130,12,136,20],[131,12,137,20],[133,10,139,16],[134,10,140,16],[134,15,140,21],[134,21,140,27],[135,12,141,20],[136,12,142,20],[136,16,142,24,"offset"],[136,22,142,30],[136,27,142,35,"source"],[136,33,142,41],[136,34,142,42,"length"],[136,40,142,48],[136,43,142,51],[136,44,142,52],[136,46,142,54],[137,14,143,24],[138,12,144,20],[139,12,146,20],[139,16,146,24,"nextCode"],[139,24,146,32],[139,27,146,35,"getCharCode"],[139,38,146,46],[139,39,146,47,"offset"],[139,45,146,53],[139,48,146,56],[139,49,146,57],[139,50,146,58],[141,12,148,20],[142,12,149,20],[142,16,149,24,"isNewline"],[142,25,149,33],[142,26,149,34,"nextCode"],[142,34,149,42],[142,35,149,43],[142,37,149,45],[143,14,150,24,"offset"],[143,20,150,30],[143,24,150,34,"getNewlineLength"],[143,40,150,50],[143,41,150,51,"source"],[143,47,150,57],[143,49,150,59,"offset"],[143,55,150,65],[143,58,150,68],[143,59,150,69],[143,61,150,71,"nextCode"],[143,69,150,79],[143,70,150,80],[144,12,151,20],[144,13,151,21],[144,19,151,27],[144,23,151,31,"isValidEscape"],[144,36,151,44],[144,37,151,45,"code"],[144,41,151,49],[144,43,151,51,"nextCode"],[144,51,151,59],[144,52,151,60],[144,54,151,62],[145,14,152,24],[146,14,153,24],[147,14,154,24],[148,14,155,24,"offset"],[148,20,155,30],[148,23,155,33,"consumeEscaped"],[148,37,155,47],[148,38,155,48,"source"],[148,44,155,54],[148,46,155,56,"offset"],[148,52,155,62],[148,53,155,63],[148,56,155,66],[148,57,155,67],[149,12,156,20],[150,12,157,20],[152,10,159,16],[153,10,160,16],[154,8,161,12],[155,6,162,8],[156,4,163,4],[158,4,165,4],[159,4,166,4],[160,4,167,4],[161,4,168,4],[162,4,169,4],[163,4,170,4],[163,13,170,13,"consumeUrlToken"],[163,28,170,28,"consumeUrlToken"],[163,29,170,28],[163,31,170,31],[164,6,171,8],[165,6,172,8,"type"],[165,10,172,12],[165,13,172,15,"TYPE"],[165,17,172,19],[165,18,172,20,"Url"],[165,21,172,23],[167,6,174,8],[168,6,175,8,"offset"],[168,12,175,14],[168,15,175,17,"findWhiteSpaceEnd"],[168,32,175,34],[168,33,175,35,"source"],[168,39,175,41],[168,41,175,43,"offset"],[168,47,175,49],[168,48,175,50],[170,6,177,8],[171,6,178,8],[171,13,178,15,"offset"],[171,19,178,21],[171,22,178,24,"source"],[171,28,178,30],[171,29,178,31,"length"],[171,35,178,37],[171,37,178,39,"offset"],[171,43,178,45],[171,45,178,47],[171,47,178,49],[172,8,179,12],[172,12,179,16,"code"],[172,16,179,20],[172,19,179,23,"source"],[172,25,179,29],[172,26,179,30,"charCodeAt"],[172,36,179,40],[172,37,179,41,"offset"],[172,43,179,47],[172,44,179,48],[173,8,181,12],[173,16,181,20,"charCodeCategory"],[173,32,181,36],[173,33,181,37,"code"],[173,37,181,41],[173,38,181,42],[174,10,182,16],[175,10,183,16],[175,15,183,21],[175,21,183,27],[176,12,184,20],[177,12,185,20,"offset"],[177,18,185,26],[177,20,185,28],[178,12,186,20],[180,10,188,16],[181,10,189,16],[181,15,189,21,"charCodeCategory"],[181,31,189,37],[181,32,189,38,"Eof"],[181,35,189,41],[182,12,190,20],[183,12,191,20],[185,10,193,16],[186,10,194,16],[186,15,194,21,"charCodeCategory"],[186,31,194,37],[186,32,194,38,"WhiteSpace"],[186,42,194,48],[187,12,195,20],[188,12,196,20,"offset"],[188,18,196,26],[188,21,196,29,"findWhiteSpaceEnd"],[188,38,196,46],[188,39,196,47,"source"],[188,45,196,53],[188,47,196,55,"offset"],[188,53,196,61],[188,54,196,62],[190,12,198,20],[191,12,199,20],[192,12,200,20],[193,12,201,20],[193,16,201,24,"getCharCode"],[193,27,201,35],[193,28,201,36,"offset"],[193,34,201,42],[193,35,201,43],[193,40,201,48],[193,46,201,54],[193,50,201,58,"offset"],[193,56,201,64],[193,60,201,68,"source"],[193,66,201,74],[193,67,201,75,"length"],[193,73,201,81],[193,75,201,83],[194,14,202,24],[194,18,202,28,"offset"],[194,24,202,34],[194,27,202,37,"source"],[194,33,202,43],[194,34,202,44,"length"],[194,40,202,50],[194,42,202,52],[195,16,203,28,"offset"],[195,22,203,34],[195,24,203,36],[196,14,204,24],[197,14,205,24],[198,12,206,20],[200,12,208,20],[201,12,209,20],[202,12,210,20,"offset"],[202,18,210,26],[202,21,210,29,"consumeBadUrlRemnants"],[202,42,210,50],[202,43,210,51,"source"],[202,49,210,57],[202,51,210,59,"offset"],[202,57,210,65],[202,58,210,66],[203,12,211,20,"type"],[203,16,211,24],[203,19,211,27,"TYPE"],[203,23,211,31],[203,24,211,32,"BadUrl"],[203,30,211,38],[204,12,212,20],[206,10,214,16],[207,10,215,16],[208,10,216,16],[209,10,217,16],[210,10,218,16],[210,15,218,21],[210,21,218,27],[211,10,219,16],[211,15,219,21],[211,21,219,27],[212,10,220,16],[212,15,220,21],[212,21,220,27],[213,10,221,16],[213,15,221,21,"charCodeCategory"],[213,31,221,37],[213,32,221,38,"NonPrintable"],[213,44,221,50],[214,12,222,20],[215,12,223,20],[216,12,224,20,"offset"],[216,18,224,26],[216,21,224,29,"consumeBadUrlRemnants"],[216,42,224,50],[216,43,224,51,"source"],[216,49,224,57],[216,51,224,59,"offset"],[216,57,224,65],[216,58,224,66],[217,12,225,20,"type"],[217,16,225,24],[217,19,225,27,"TYPE"],[217,23,225,31],[217,24,225,32,"BadUrl"],[217,30,225,38],[218,12,226,20],[220,10,228,16],[221,10,229,16],[221,15,229,21],[221,21,229,27],[222,12,230,20],[223,12,231,20],[224,12,232,20],[224,16,232,24,"isValidEscape"],[224,29,232,37],[224,30,232,38,"code"],[224,34,232,42],[224,36,232,44,"getCharCode"],[224,47,232,55],[224,48,232,56,"offset"],[224,54,232,62],[224,57,232,65],[224,58,232,66],[224,59,232,67],[224,60,232,68],[224,62,232,70],[225,14,233,24,"offset"],[225,20,233,30],[225,23,233,33,"consumeEscaped"],[225,37,233,47],[225,38,233,48,"source"],[225,44,233,54],[225,46,233,56,"offset"],[225,52,233,62],[225,53,233,63],[225,56,233,66],[225,57,233,67],[226,14,234,24],[227,12,235,20],[229,12,237,20],[230,12,238,20],[231,12,239,20,"offset"],[231,18,239,26],[231,21,239,29,"consumeBadUrlRemnants"],[231,42,239,50],[231,43,239,51,"source"],[231,49,239,57],[231,51,239,59,"offset"],[231,57,239,65],[231,58,239,66],[232,12,240,20,"type"],[232,16,240,24],[232,19,240,27,"TYPE"],[232,23,240,31],[232,24,240,32,"BadUrl"],[232,30,240,38],[233,12,241,20],[235,10,243,16],[236,10,244,16],[237,8,245,12],[238,6,246,8],[239,4,247,4],[241,4,249,4],[241,8,249,8],[241,9,249,9,"stream"],[241,15,249,15],[241,17,249,17],[242,6,250,8,"stream"],[242,12,250,14],[242,15,250,17],[242,19,250,21,"TokenStream"],[242,30,250,32],[242,31,250,33],[242,32,250,34],[243,4,251,4],[245,4,253,4],[246,4,254,4,"source"],[246,10,254,10],[246,13,254,13,"String"],[246,19,254,19],[246,20,254,20,"source"],[246,26,254,26],[246,30,254,30],[246,32,254,32],[246,33,254,33],[247,4,256,4],[247,8,256,8,"sourceLength"],[247,20,256,20],[247,23,256,23,"source"],[247,29,256,29],[247,30,256,30,"length"],[247,36,256,36],[248,4,257,4],[248,8,257,8,"offsetAndType"],[248,21,257,21],[248,24,257,24,"adoptBuffer"],[248,35,257,35],[248,36,257,36,"stream"],[248,42,257,42],[248,43,257,43,"offsetAndType"],[248,56,257,56],[248,58,257,58,"sourceLength"],[248,70,257,70],[248,73,257,73],[248,74,257,74],[248,75,257,75],[248,76,257,76],[248,77,257,77],[249,4,258,4],[249,8,258,8,"balance"],[249,15,258,15],[249,18,258,18,"adoptBuffer"],[249,29,258,29],[249,30,258,30,"stream"],[249,36,258,36],[249,37,258,37,"balance"],[249,44,258,44],[249,46,258,46,"sourceLength"],[249,58,258,58],[249,61,258,61],[249,62,258,62],[249,63,258,63],[250,4,259,4],[250,8,259,8,"tokenCount"],[250,18,259,18],[250,21,259,21],[250,22,259,22],[251,4,260,4],[251,8,260,8,"start"],[251,13,260,13],[251,16,260,16,"isBOM"],[251,21,260,21],[251,22,260,22,"getCharCode"],[251,33,260,33],[251,34,260,34],[251,35,260,35],[251,36,260,36],[251,37,260,37],[252,4,261,4],[252,8,261,8,"offset"],[252,14,261,14],[252,17,261,17,"start"],[252,22,261,22],[253,4,262,4],[253,8,262,8,"balanceCloseType"],[253,24,262,24],[253,27,262,27],[253,28,262,28],[254,4,263,4],[254,8,263,8,"balanceStart"],[254,20,263,20],[254,23,263,23],[254,24,263,24],[255,4,264,4],[255,8,264,8,"balancePrev"],[255,19,264,19],[255,22,264,22],[255,23,264,23],[257,4,266,4],[258,4,267,4],[259,4,268,4],[259,11,268,11,"offset"],[259,17,268,17],[259,20,268,20,"sourceLength"],[259,32,268,32],[259,34,268,34],[260,6,269,8],[260,10,269,12,"code"],[260,14,269,16],[260,17,269,19,"source"],[260,23,269,25],[260,24,269,26,"charCodeAt"],[260,34,269,36],[260,35,269,37,"offset"],[260,41,269,43],[260,42,269,44],[261,6,270,8],[261,10,270,12,"type"],[261,14,270,16],[261,17,270,19],[261,18,270,20],[262,6,272,8,"balance"],[262,13,272,15],[262,14,272,16,"tokenCount"],[262,24,272,26],[262,25,272,27],[262,28,272,30,"sourceLength"],[262,40,272,42],[263,6,274,8],[263,14,274,16,"charCodeCategory"],[263,30,274,32],[263,31,274,33,"code"],[263,35,274,37],[263,36,274,38],[264,8,275,12],[265,8,276,12],[265,13,276,17,"charCodeCategory"],[265,29,276,33],[265,30,276,34,"WhiteSpace"],[265,40,276,44],[266,10,277,16],[267,10,278,16,"type"],[267,14,278,20],[267,17,278,23,"TYPE"],[267,21,278,27],[267,22,278,28,"WhiteSpace"],[267,32,278,38],[268,10,279,16,"offset"],[268,16,279,22],[268,19,279,25,"findWhiteSpaceEnd"],[268,36,279,42],[268,37,279,43,"source"],[268,43,279,49],[268,45,279,51,"offset"],[268,51,279,57],[268,54,279,60],[268,55,279,61],[268,56,279,62],[269,10,280,16],[271,8,282,12],[272,8,283,12],[272,13,283,17],[272,19,283,23],[273,10,284,16],[274,10,285,16,"consumeStringToken"],[274,28,285,34],[274,29,285,35],[274,30,285,36],[275,10,286,16],[277,8,288,12],[278,8,289,12],[278,13,289,17],[278,19,289,23],[279,10,290,16],[280,10,291,16],[280,14,291,20,"isName"],[280,20,291,26],[280,21,291,27,"getCharCode"],[280,32,291,38],[280,33,291,39,"offset"],[280,39,291,45],[280,42,291,48],[280,43,291,49],[280,44,291,50],[280,45,291,51],[280,49,291,55,"isValidEscape"],[280,62,291,68],[280,63,291,69,"getCharCode"],[280,74,291,80],[280,75,291,81,"offset"],[280,81,291,87],[280,84,291,90],[280,85,291,91],[280,86,291,92],[280,88,291,94,"getCharCode"],[280,99,291,105],[280,100,291,106,"offset"],[280,106,291,112],[280,109,291,115],[280,110,291,116],[280,111,291,117],[280,112,291,118],[280,114,291,120],[281,12,292,20],[282,12,293,20,"type"],[282,16,293,24],[282,19,293,27,"TYPE"],[282,23,293,31],[282,24,293,32,"Hash"],[282,28,293,36],[284,12,295,20],[285,12,296,20],[286,12,297,20],[287,12,298,20],[289,12,300,20],[290,12,301,20,"offset"],[290,18,301,26],[290,21,301,29,"consumeName"],[290,32,301,40],[290,33,301,41,"source"],[290,39,301,47],[290,41,301,49,"offset"],[290,47,301,55],[290,50,301,58],[290,51,301,59],[290,52,301,60],[292,12,303,20],[293,10,304,16],[293,11,304,17],[293,17,304,23],[294,12,305,20],[295,12,306,20,"type"],[295,16,306,24],[295,19,306,27,"TYPE"],[295,23,306,31],[295,24,306,32,"Delim"],[295,29,306,37],[296,12,307,20,"offset"],[296,18,307,26],[296,20,307,28],[297,10,308,16],[298,10,310,16],[300,8,312,12],[301,8,313,12],[301,13,313,17],[301,19,313,23],[302,10,314,16],[303,10,315,16,"consumeStringToken"],[303,28,315,34],[303,29,315,35],[303,30,315,36],[304,10,316,16],[306,8,318,12],[307,8,319,12],[307,13,319,17],[307,19,319,23],[308,10,320,16],[309,10,321,16,"type"],[309,14,321,20],[309,17,321,23,"TYPE"],[309,21,321,27],[309,22,321,28,"LeftParenthesis"],[309,37,321,43],[310,10,322,16,"offset"],[310,16,322,22],[310,18,322,24],[311,10,323,16],[313,8,325,12],[314,8,326,12],[314,13,326,17],[314,19,326,23],[315,10,327,16],[316,10,328,16,"type"],[316,14,328,20],[316,17,328,23,"TYPE"],[316,21,328,27],[316,22,328,28,"RightParenthesis"],[316,38,328,44],[317,10,329,16,"offset"],[317,16,329,22],[317,18,329,24],[318,10,330,16],[320,8,332,12],[321,8,333,12],[321,13,333,17],[321,19,333,23],[322,10,334,16],[323,10,335,16],[323,14,335,20,"isNumberStart"],[323,27,335,33],[323,28,335,34,"code"],[323,32,335,38],[323,34,335,40,"getCharCode"],[323,45,335,51],[323,46,335,52,"offset"],[323,52,335,58],[323,55,335,61],[323,56,335,62],[323,57,335,63],[323,59,335,65,"getCharCode"],[323,70,335,76],[323,71,335,77,"offset"],[323,77,335,83],[323,80,335,86],[323,81,335,87],[323,82,335,88],[323,83,335,89],[323,85,335,91],[324,12,336,20],[325,12,337,20,"consumeNumericToken"],[325,31,337,39],[325,32,337,40],[325,33,337,41],[326,10,338,16],[326,11,338,17],[326,17,338,23],[327,12,339,20],[328,12,340,20,"type"],[328,16,340,24],[328,19,340,27,"TYPE"],[328,23,340,31],[328,24,340,32,"Delim"],[328,29,340,37],[329,12,341,20,"offset"],[329,18,341,26],[329,20,341,28],[330,10,342,16],[331,10,343,16],[333,8,345,12],[334,8,346,12],[334,13,346,17],[334,19,346,23],[335,10,347,16],[336,10,348,16,"type"],[336,14,348,20],[336,17,348,23,"TYPE"],[336,21,348,27],[336,22,348,28,"Comma"],[336,27,348,33],[337,10,349,16,"offset"],[337,16,349,22],[337,18,349,24],[338,10,350,16],[340,8,352,12],[341,8,353,12],[341,13,353,17],[341,19,353,23],[342,10,354,16],[343,10,355,16],[343,14,355,20,"isNumberStart"],[343,27,355,33],[343,28,355,34,"code"],[343,32,355,38],[343,34,355,40,"getCharCode"],[343,45,355,51],[343,46,355,52,"offset"],[343,52,355,58],[343,55,355,61],[343,56,355,62],[343,57,355,63],[343,59,355,65,"getCharCode"],[343,70,355,76],[343,71,355,77,"offset"],[343,77,355,83],[343,80,355,86],[343,81,355,87],[343,82,355,88],[343,83,355,89],[343,85,355,91],[344,12,356,20,"consumeNumericToken"],[344,31,356,39],[344,32,356,40],[344,33,356,41],[345,10,357,16],[345,11,357,17],[345,17,357,23],[346,12,358,20],[347,12,359,20],[347,16,359,24,"getCharCode"],[347,27,359,35],[347,28,359,36,"offset"],[347,34,359,42],[347,37,359,45],[347,38,359,46],[347,39,359,47],[347,44,359,52],[347,50,359,58],[347,54,360,24,"getCharCode"],[347,65,360,35],[347,66,360,36,"offset"],[347,72,360,42],[347,75,360,45],[347,76,360,46],[347,77,360,47],[347,82,360,52],[347,88,360,58],[347,90,360,60],[348,14,361,24,"type"],[348,18,361,28],[348,21,361,31,"TYPE"],[348,25,361,35],[348,26,361,36,"CDC"],[348,29,361,39],[349,14,362,24,"offset"],[349,20,362,30],[349,23,362,33,"offset"],[349,29,362,39],[349,32,362,42],[349,33,362,43],[350,12,363,20],[350,13,363,21],[350,19,363,27],[351,14,364,24],[352,14,365,24],[352,18,365,28,"isIdentifierStart"],[352,35,365,45],[352,36,365,46,"code"],[352,40,365,50],[352,42,365,52,"getCharCode"],[352,53,365,63],[352,54,365,64,"offset"],[352,60,365,70],[352,63,365,73],[352,64,365,74],[352,65,365,75],[352,67,365,77,"getCharCode"],[352,78,365,88],[352,79,365,89,"offset"],[352,85,365,95],[352,88,365,98],[352,89,365,99],[352,90,365,100],[352,91,365,101],[352,93,365,103],[353,16,366,28],[354,16,367,28,"consumeIdentLikeToken"],[354,37,367,49],[354,38,367,50],[354,39,367,51],[355,14,368,24],[355,15,368,25],[355,21,368,31],[356,16,369,28],[357,16,370,28,"type"],[357,20,370,32],[357,23,370,35,"TYPE"],[357,27,370,39],[357,28,370,40,"Delim"],[357,33,370,45],[358,16,371,28,"offset"],[358,22,371,34],[358,24,371,36],[359,14,372,24],[360,12,373,20],[361,10,374,16],[362,10,375,16],[364,8,377,12],[365,8,378,12],[365,13,378,17],[365,19,378,23],[366,10,379,16],[367,10,380,16],[367,14,380,20,"isNumberStart"],[367,27,380,33],[367,28,380,34,"code"],[367,32,380,38],[367,34,380,40,"getCharCode"],[367,45,380,51],[367,46,380,52,"offset"],[367,52,380,58],[367,55,380,61],[367,56,380,62],[367,57,380,63],[367,59,380,65,"getCharCode"],[367,70,380,76],[367,71,380,77,"offset"],[367,77,380,83],[367,80,380,86],[367,81,380,87],[367,82,380,88],[367,83,380,89],[367,85,380,91],[368,12,381,20],[369,12,382,20,"consumeNumericToken"],[369,31,382,39],[369,32,382,40],[369,33,382,41],[370,10,383,16],[370,11,383,17],[370,17,383,23],[371,12,384,20],[372,12,385,20,"type"],[372,16,385,24],[372,19,385,27,"TYPE"],[372,23,385,31],[372,24,385,32,"Delim"],[372,29,385,37],[373,12,386,20,"offset"],[373,18,386,26],[373,20,386,28],[374,10,387,16],[375,10,389,16],[377,8,391,12],[378,8,392,12],[378,13,392,17],[378,19,392,23],[379,10,393,16],[380,10,394,16],[380,14,394,20,"getCharCode"],[380,25,394,31],[380,26,394,32,"offset"],[380,32,394,38],[380,35,394,41],[380,36,394,42],[380,37,394,43],[380,42,394,48],[380,48,394,54],[380,50,394,56],[381,12,395,20],[382,12,396,20],[383,12,397,20,"type"],[383,16,397,24],[383,19,397,27,"TYPE"],[383,23,397,31],[383,24,397,32,"Comment"],[383,31,397,39],[384,12,398,20,"offset"],[384,18,398,26],[384,21,398,29,"source"],[384,27,398,35],[384,28,398,36,"indexOf"],[384,35,398,43],[384,36,398,44],[384,40,398,48],[384,42,398,50,"offset"],[384,48,398,56],[384,51,398,59],[384,52,398,60],[384,53,398,61],[384,56,398,64],[384,57,398,65],[385,12,399,20],[385,16,399,24,"offset"],[385,22,399,30],[385,27,399,35],[385,28,399,36],[385,30,399,38],[386,14,400,24,"offset"],[386,20,400,30],[386,23,400,33,"source"],[386,29,400,39],[386,30,400,40,"length"],[386,36,400,46],[387,12,401,20],[388,10,402,16],[388,11,402,17],[388,17,402,23],[389,12,403,20,"type"],[389,16,403,24],[389,19,403,27,"TYPE"],[389,23,403,31],[389,24,403,32,"Delim"],[389,29,403,37],[390,12,404,20,"offset"],[390,18,404,26],[390,20,404,28],[391,10,405,16],[392,10,406,16],[394,8,408,12],[395,8,409,12],[395,13,409,17],[395,19,409,23],[396,10,410,16],[397,10,411,16,"type"],[397,14,411,20],[397,17,411,23,"TYPE"],[397,21,411,27],[397,22,411,28,"Colon"],[397,27,411,33],[398,10,412,16,"offset"],[398,16,412,22],[398,18,412,24],[399,10,413,16],[401,8,415,12],[402,8,416,12],[402,13,416,17],[402,19,416,23],[403,10,417,16],[404,10,418,16,"type"],[404,14,418,20],[404,17,418,23,"TYPE"],[404,21,418,27],[404,22,418,28,"Semicolon"],[404,31,418,37],[405,10,419,16,"offset"],[405,16,419,22],[405,18,419,24],[406,10,420,16],[408,8,422,12],[409,8,423,12],[409,13,423,17],[409,19,423,23],[410,10,424,16],[411,10,425,16],[411,14,425,20,"getCharCode"],[411,25,425,31],[411,26,425,32,"offset"],[411,32,425,38],[411,35,425,41],[411,36,425,42],[411,37,425,43],[411,42,425,48],[411,48,425,54],[411,52,426,20,"getCharCode"],[411,63,426,31],[411,64,426,32,"offset"],[411,70,426,38],[411,73,426,41],[411,74,426,42],[411,75,426,43],[411,80,426,48],[411,86,426,54],[411,90,427,20,"getCharCode"],[411,101,427,31],[411,102,427,32,"offset"],[411,108,427,38],[411,111,427,41],[411,112,427,42],[411,113,427,43],[411,118,427,48],[411,124,427,54],[411,126,427,56],[412,12,428,20],[413,12,429,20,"type"],[413,16,429,24],[413,19,429,27,"TYPE"],[413,23,429,31],[413,24,429,32,"CDO"],[413,27,429,35],[414,12,430,20,"offset"],[414,18,430,26],[414,21,430,29,"offset"],[414,27,430,35],[414,30,430,38],[414,31,430,39],[415,10,431,16],[415,11,431,17],[415,17,431,23],[416,12,432,20],[417,12,433,20,"type"],[417,16,433,24],[417,19,433,27,"TYPE"],[417,23,433,31],[417,24,433,32,"Delim"],[417,29,433,37],[418,12,434,20,"offset"],[418,18,434,26],[418,20,434,28],[419,10,435,16],[420,10,437,16],[422,8,439,12],[423,8,440,12],[423,13,440,17],[423,19,440,23],[424,10,441,16],[425,10,442,16],[425,14,442,20,"isIdentifierStart"],[425,31,442,37],[425,32,442,38,"getCharCode"],[425,43,442,49],[425,44,442,50,"offset"],[425,50,442,56],[425,53,442,59],[425,54,442,60],[425,55,442,61],[425,57,442,63,"getCharCode"],[425,68,442,74],[425,69,442,75,"offset"],[425,75,442,81],[425,78,442,84],[425,79,442,85],[425,80,442,86],[425,82,442,88,"getCharCode"],[425,93,442,99],[425,94,442,100,"offset"],[425,100,442,106],[425,103,442,109],[425,104,442,110],[425,105,442,111],[425,106,442,112],[425,108,442,114],[426,12,443,20],[427,12,444,20,"type"],[427,16,444,24],[427,19,444,27,"TYPE"],[427,23,444,31],[427,24,444,32,"AtKeyword"],[427,33,444,41],[428,12,445,20,"offset"],[428,18,445,26],[428,21,445,29,"consumeName"],[428,32,445,40],[428,33,445,41,"source"],[428,39,445,47],[428,41,445,49,"offset"],[428,47,445,55],[428,50,445,58],[428,51,445,59],[428,52,445,60],[429,10,446,16],[429,11,446,17],[429,17,446,23],[430,12,447,20],[431,12,448,20,"type"],[431,16,448,24],[431,19,448,27,"TYPE"],[431,23,448,31],[431,24,448,32,"Delim"],[431,29,448,37],[432,12,449,20,"offset"],[432,18,449,26],[432,20,449,28],[433,10,450,16],[434,10,452,16],[436,8,454,12],[437,8,455,12],[437,13,455,17],[437,19,455,23],[438,10,456,16],[439,10,457,16,"type"],[439,14,457,20],[439,17,457,23,"TYPE"],[439,21,457,27],[439,22,457,28,"LeftSquareBracket"],[439,39,457,45],[440,10,458,16,"offset"],[440,16,458,22],[440,18,458,24],[441,10,459,16],[443,8,461,12],[444,8,462,12],[444,13,462,17],[444,19,462,23],[445,10,463,16],[446,10,464,16],[446,14,464,20,"isValidEscape"],[446,27,464,33],[446,28,464,34,"code"],[446,32,464,38],[446,34,464,40,"getCharCode"],[446,45,464,51],[446,46,464,52,"offset"],[446,52,464,58],[446,55,464,61],[446,56,464,62],[446,57,464,63],[446,58,464,64],[446,60,464,66],[447,12,465,20],[448,12,466,20,"consumeIdentLikeToken"],[448,33,466,41],[448,34,466,42],[448,35,466,43],[449,10,467,16],[449,11,467,17],[449,17,467,23],[450,12,468,20],[451,12,469,20,"type"],[451,16,469,24],[451,19,469,27,"TYPE"],[451,23,469,31],[451,24,469,32,"Delim"],[451,29,469,37],[452,12,470,20,"offset"],[452,18,470,26],[452,20,470,28],[453,10,471,16],[454,10,472,16],[456,8,474,12],[457,8,475,12],[457,13,475,17],[457,19,475,23],[458,10,476,16],[459,10,477,16,"type"],[459,14,477,20],[459,17,477,23,"TYPE"],[459,21,477,27],[459,22,477,28,"RightSquareBracket"],[459,40,477,46],[460,10,478,16,"offset"],[460,16,478,22],[460,18,478,24],[461,10,479,16],[463,8,481,12],[464,8,482,12],[464,13,482,17],[464,19,482,23],[465,10,483,16],[466,10,484,16,"type"],[466,14,484,20],[466,17,484,23,"TYPE"],[466,21,484,27],[466,22,484,28,"LeftCurlyBracket"],[466,38,484,44],[467,10,485,16,"offset"],[467,16,485,22],[467,18,485,24],[468,10,486,16],[470,8,488,12],[471,8,489,12],[471,13,489,17],[471,19,489,23],[472,10,490,16],[473,10,491,16,"type"],[473,14,491,20],[473,17,491,23,"TYPE"],[473,21,491,27],[473,22,491,28,"RightCurlyBracket"],[473,39,491,45],[474,10,492,16,"offset"],[474,16,492,22],[474,18,492,24],[475,10,493,16],[477,8,495,12],[478,8,496,12],[478,13,496,17,"charCodeCategory"],[478,29,496,33],[478,30,496,34,"Digit"],[478,35,496,39],[479,10,497,16],[480,10,498,16,"consumeNumericToken"],[480,29,498,35],[480,30,498,36],[480,31,498,37],[481,10,499,16],[483,8,501,12],[484,8,502,12],[484,13,502,17,"charCodeCategory"],[484,29,502,33],[484,30,502,34,"NameStart"],[484,39,502,43],[485,10,503,16],[486,10,504,16,"consumeIdentLikeToken"],[486,31,504,37],[486,32,504,38],[486,33,504,39],[487,10,505,16],[489,8,507,12],[490,8,508,12],[490,13,508,17,"charCodeCategory"],[490,29,508,33],[490,30,508,34,"Eof"],[490,33,508,37],[491,10,509,16],[492,10,510,16],[494,8,512,12],[495,8,513,12],[496,10,514,16],[497,10,515,16,"type"],[497,14,515,20],[497,17,515,23,"TYPE"],[497,21,515,27],[497,22,515,28,"Delim"],[497,27,515,33],[498,10,516,16,"offset"],[498,16,516,22],[498,18,516,24],[499,6,517,8],[500,6,519,8],[500,14,519,16,"type"],[500,18,519,20],[501,8,520,12],[501,13,520,17,"balanceCloseType"],[501,29,520,33],[502,10,521,16,"balancePrev"],[502,21,521,27],[502,24,521,30,"balanceStart"],[502,36,521,42],[502,39,521,45,"OFFSET_MASK"],[502,50,521,56],[503,10,522,16,"balanceStart"],[503,22,522,28],[503,25,522,31,"balance"],[503,32,522,38],[503,33,522,39,"balancePrev"],[503,44,522,50],[503,45,522,51],[504,10,523,16,"balanceCloseType"],[504,26,523,32],[504,29,523,35,"balanceStart"],[504,41,523,47],[504,45,523,51,"TYPE_SHIFT"],[504,55,523,61],[505,10,524,16,"balance"],[505,17,524,23],[505,18,524,24,"tokenCount"],[505,28,524,34],[505,29,524,35],[505,32,524,38,"balancePrev"],[505,43,524,49],[506,10,525,16,"balance"],[506,17,525,23],[506,18,525,24,"balancePrev"],[506,29,525,35],[506,31,525,37],[506,32,525,38],[506,35,525,41,"tokenCount"],[506,45,525,51],[507,10,526,16],[507,17,526,23,"balancePrev"],[507,28,526,34],[507,31,526,37,"tokenCount"],[507,41,526,47],[507,43,526,49,"balancePrev"],[507,54,526,60],[507,56,526,62],[507,58,526,64],[508,12,527,20],[508,16,527,24,"balance"],[508,23,527,31],[508,24,527,32,"balancePrev"],[508,35,527,43],[508,36,527,44],[508,41,527,49,"sourceLength"],[508,53,527,61],[508,55,527,63],[509,14,528,24,"balance"],[509,21,528,31],[509,22,528,32,"balancePrev"],[509,33,528,43],[509,34,528,44],[509,37,528,47,"tokenCount"],[509,47,528,57],[510,12,529,20],[511,10,530,16],[512,10,531,16],[513,8,533,12],[513,13,533,17,"TYPE"],[513,17,533,21],[513,18,533,22,"LeftParenthesis"],[513,33,533,37],[514,8,534,12],[514,13,534,17,"TYPE"],[514,17,534,21],[514,18,534,22,"Function"],[514,26,534,30],[515,10,535,16,"balance"],[515,17,535,23],[515,18,535,24,"tokenCount"],[515,28,535,34],[515,29,535,35],[515,32,535,38,"balanceStart"],[515,44,535,50],[516,10,536,16,"balanceCloseType"],[516,26,536,32],[516,29,536,35,"TYPE"],[516,33,536,39],[516,34,536,40,"RightParenthesis"],[516,50,536,56],[517,10,537,16,"balanceStart"],[517,22,537,28],[517,25,537,32,"balanceCloseType"],[517,41,537,48],[517,45,537,52,"TYPE_SHIFT"],[517,55,537,62],[517,58,537,66,"tokenCount"],[517,68,537,76],[518,10,538,16],[519,8,540,12],[519,13,540,17,"TYPE"],[519,17,540,21],[519,18,540,22,"LeftSquareBracket"],[519,35,540,39],[520,10,541,16,"balance"],[520,17,541,23],[520,18,541,24,"tokenCount"],[520,28,541,34],[520,29,541,35],[520,32,541,38,"balanceStart"],[520,44,541,50],[521,10,542,16,"balanceCloseType"],[521,26,542,32],[521,29,542,35,"TYPE"],[521,33,542,39],[521,34,542,40,"RightSquareBracket"],[521,52,542,58],[522,10,543,16,"balanceStart"],[522,22,543,28],[522,25,543,32,"balanceCloseType"],[522,41,543,48],[522,45,543,52,"TYPE_SHIFT"],[522,55,543,62],[522,58,543,66,"tokenCount"],[522,68,543,76],[523,10,544,16],[524,8,546,12],[524,13,546,17,"TYPE"],[524,17,546,21],[524,18,546,22,"LeftCurlyBracket"],[524,34,546,38],[525,10,547,16,"balance"],[525,17,547,23],[525,18,547,24,"tokenCount"],[525,28,547,34],[525,29,547,35],[525,32,547,38,"balanceStart"],[525,44,547,50],[526,10,548,16,"balanceCloseType"],[526,26,548,32],[526,29,548,35,"TYPE"],[526,33,548,39],[526,34,548,40,"RightCurlyBracket"],[526,51,548,57],[527,10,549,16,"balanceStart"],[527,22,549,28],[527,25,549,32,"balanceCloseType"],[527,41,549,48],[527,45,549,52,"TYPE_SHIFT"],[527,55,549,62],[527,58,549,66,"tokenCount"],[527,68,549,76],[528,10,550,16],[529,6,551,8],[530,6,553,8,"offsetAndType"],[530,19,553,21],[530,20,553,22,"tokenCount"],[530,30,553,32],[530,32,553,34],[530,33,553,35],[530,36,553,39,"type"],[530,40,553,43],[530,44,553,47,"TYPE_SHIFT"],[530,54,553,57],[530,57,553,61,"offset"],[530,63,553,67],[531,4,554,4],[533,4,556,4],[534,4,557,4,"offsetAndType"],[534,17,557,17],[534,18,557,18,"tokenCount"],[534,28,557,28],[534,29,557,29],[534,32,557,33,"TYPE"],[534,36,557,37],[534,37,557,38,"EOF"],[534,40,557,41],[534,44,557,45,"TYPE_SHIFT"],[534,54,557,55],[534,57,557,59,"offset"],[534,63,557,65],[534,64,557,66],[534,65,557,67],[535,4,558,4,"balance"],[535,11,558,11],[535,12,558,12,"tokenCount"],[535,22,558,22],[535,23,558,23],[535,26,558,26,"sourceLength"],[535,38,558,38],[536,4,559,4,"balance"],[536,11,559,11],[536,12,559,12,"sourceLength"],[536,24,559,24],[536,25,559,25],[536,28,559,28,"sourceLength"],[536,40,559,40],[536,41,559,41],[536,42,559,42],[537,4,560,4],[537,11,560,11,"balanceStart"],[537,23,560,23],[537,28,560,28],[537,29,560,29],[537,31,560,31],[538,6,561,8,"balancePrev"],[538,17,561,19],[538,20,561,22,"balanceStart"],[538,32,561,34],[538,35,561,37,"OFFSET_MASK"],[538,46,561,48],[539,6,562,8,"balanceStart"],[539,18,562,20],[539,21,562,23,"balance"],[539,28,562,30],[539,29,562,31,"balancePrev"],[539,40,562,42],[539,41,562,43],[540,6,563,8,"balance"],[540,13,563,15],[540,14,563,16,"balancePrev"],[540,25,563,27],[540,26,563,28],[540,29,563,31,"sourceLength"],[540,41,563,43],[541,4,564,4],[543,4,566,4],[544,4,567,4,"stream"],[544,10,567,10],[544,11,567,11,"source"],[544,17,567,17],[544,20,567,20,"source"],[544,26,567,26],[545,4,568,4,"stream"],[545,10,568,10],[545,11,568,11,"firstCharOffset"],[545,26,568,26],[545,29,568,29,"start"],[545,34,568,34],[546,4,569,4,"stream"],[546,10,569,10],[546,11,569,11,"offsetAndType"],[546,24,569,24],[546,27,569,27,"offsetAndType"],[546,40,569,40],[547,4,570,4,"stream"],[547,10,570,10],[547,11,570,11,"tokenCount"],[547,21,570,21],[547,24,570,24,"tokenCount"],[547,34,570,34],[548,4,571,4,"stream"],[548,10,571,10],[548,11,571,11,"balance"],[548,18,571,18],[548,21,571,21,"balance"],[548,28,571,28],[549,4,572,4,"stream"],[549,10,572,10],[549,11,572,11,"reset"],[549,16,572,16],[549,17,572,17],[549,18,572,18],[550,4,573,4,"stream"],[550,10,573,10],[550,11,573,11,"next"],[550,15,573,15],[550,16,573,16],[550,17,573,17],[551,4,575,4],[551,11,575,11,"stream"],[551,17,575,17],[552,2,576,0],[554,2,578,0],[555,2,579,0,"Object"],[555,8,579,6],[555,9,579,7,"keys"],[555,13,579,11],[555,14,579,12,"constants"],[555,23,579,21],[555,24,579,22],[555,25,579,23,"forEach"],[555,32,579,30],[555,33,579,31],[555,43,579,40,"key"],[555,46,579,43],[555,48,579,45],[556,4,580,4,"tokenize"],[556,12,580,12],[556,13,580,13,"key"],[556,16,580,16],[556,17,580,17],[556,20,580,20,"constants"],[556,29,580,29],[556,30,580,30,"key"],[556,33,580,33],[556,34,580,34],[557,2,581,0],[557,3,581,1],[557,4,581,2],[559,2,583,0],[560,2,584,0,"Object"],[560,8,584,6],[560,9,584,7,"keys"],[560,13,584,11],[560,14,584,12,"charCodeDefinitions"],[560,33,584,31],[560,34,584,32],[560,35,584,33,"forEach"],[560,42,584,40],[560,43,584,41],[560,53,584,50,"key"],[560,56,584,53],[560,58,584,55],[561,4,585,4,"tokenize"],[561,12,585,12],[561,13,585,13,"key"],[561,16,585,16],[561,17,585,17],[561,20,585,20,"charCodeDefinitions"],[561,39,585,39],[561,40,585,40,"key"],[561,43,585,43],[561,44,585,44],[562,2,586,0],[562,3,586,1],[562,4,586,2],[563,2,587,0,"Object"],[563,8,587,6],[563,9,587,7,"keys"],[563,13,587,11],[563,14,587,12,"utils"],[563,19,587,17],[563,20,587,18],[563,21,587,19,"forEach"],[563,28,587,26],[563,29,587,27],[563,39,587,36,"key"],[563,42,587,39],[563,44,587,41],[564,4,588,4,"tokenize"],[564,12,588,12],[564,13,588,13,"key"],[564,16,588,16],[564,17,588,17],[564,20,588,20,"utils"],[564,25,588,25],[564,26,588,26,"key"],[564,29,588,29],[564,30,588,30],[565,2,589,0],[565,3,589,1],[565,4,589,2],[566,2,591,0,"module"],[566,8,591,6],[566,9,591,7,"exports"],[566,16,591,14],[566,19,591,17,"tokenize"],[566,27,591,25],[567,0,591,26]],"functionMap":{"names":["<global>","tokenize","getCharCode","consumeNumericToken","consumeIdentLikeToken","consumeStringToken","consumeUrlToken","Object.keys.forEach$argument_0"],"mappings":"AAA;AC2B;ICC;KDE;IEG;KFwB;IGG;KHqC;IIG;KJ8D;IKO;KL6E;CDyU;+BOG;CPE;yCOG;CPE;2BOC;CPE"}},"type":"js/module"}]}