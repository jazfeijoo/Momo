{"dependencies":[{"name":"./match-graph","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":17,"index":71},"end":{"line":2,"column":41,"index":95}}],"key":"lLr5GSLI2X6Ikwqa+ZyMCyRwsLw="}},{"name":"../tokenizer/const","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":11,"index":222},"end":{"line":6,"column":40,"index":251}}],"key":"kyBO83EWkJ1clRaNx3/HpTBziAg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var matchGraph = _$$_REQUIRE(_dependencyMap[0], \"./match-graph\");\n  var MATCH = matchGraph.MATCH;\n  var MISMATCH = matchGraph.MISMATCH;\n  var DISALLOW_EMPTY = matchGraph.DISALLOW_EMPTY;\n  var TYPE = _$$_REQUIRE(_dependencyMap[1], \"../tokenizer/const\").TYPE;\n  var STUB = 0;\n  var TOKEN = 1;\n  var OPEN_SYNTAX = 2;\n  var CLOSE_SYNTAX = 3;\n  var EXIT_REASON_MATCH = 'Match';\n  var EXIT_REASON_MISMATCH = 'Mismatch';\n  var EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';\n  var ITERATION_LIMIT = 15000;\n  var totalIterationCount = 0;\n  function reverseList(list) {\n    var prev = null;\n    var next = null;\n    var item = list;\n    while (item !== null) {\n      next = item.prev;\n      item.prev = prev;\n      prev = item;\n      item = next;\n    }\n    return prev;\n  }\n  function areStringsEqualCaseInsensitive(testStr, referenceStr) {\n    if (testStr.length !== referenceStr.length) {\n      return false;\n    }\n    for (var i = 0; i < testStr.length; i++) {\n      var testCode = testStr.charCodeAt(i);\n      var referenceCode = referenceStr.charCodeAt(i);\n\n      // testCode.toLowerCase() for U+0041 LATIN CAPITAL LETTER A (A) .. U+005A LATIN CAPITAL LETTER Z (Z).\n      if (testCode >= 0x0041 && testCode <= 0x005A) {\n        testCode = testCode | 32;\n      }\n      if (testCode !== referenceCode) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function isContextEdgeDelim(token) {\n    if (token.type !== TYPE.Delim) {\n      return false;\n    }\n\n    // Fix matching for unicode-range: U+30??, U+FF00-FF9F\n    // Probably we need to check out previous match instead\n    return token.value !== '?';\n  }\n  function isCommaContextStart(token) {\n    if (token === null) {\n      return true;\n    }\n    return token.type === TYPE.Comma || token.type === TYPE.Function || token.type === TYPE.LeftParenthesis || token.type === TYPE.LeftSquareBracket || token.type === TYPE.LeftCurlyBracket || isContextEdgeDelim(token);\n  }\n  function isCommaContextEnd(token) {\n    if (token === null) {\n      return true;\n    }\n    return token.type === TYPE.RightParenthesis || token.type === TYPE.RightSquareBracket || token.type === TYPE.RightCurlyBracket || token.type === TYPE.Delim;\n  }\n  function internalMatch(tokens, state, syntaxes) {\n    function moveToNextToken() {\n      do {\n        tokenIndex++;\n        token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n      } while (token !== null && (token.type === TYPE.WhiteSpace || token.type === TYPE.Comment));\n    }\n    function getNextToken(offset) {\n      var nextIndex = tokenIndex + offset;\n      return nextIndex < tokens.length ? tokens[nextIndex] : null;\n    }\n    function stateSnapshotFromSyntax(nextState, prev) {\n      return {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        thenStack: thenStack,\n        tokenIndex: tokenIndex,\n        prev: prev\n      };\n    }\n    function pushThenStack(nextState) {\n      thenStack = {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        prev: thenStack\n      };\n    }\n    function pushElseStack(nextState) {\n      elseStack = stateSnapshotFromSyntax(nextState, elseStack);\n    }\n    function addTokenToMatch() {\n      matchStack = {\n        type: TOKEN,\n        syntax: state.syntax,\n        token: token,\n        prev: matchStack\n      };\n      moveToNextToken();\n      syntaxStash = null;\n      if (tokenIndex > longestMatch) {\n        longestMatch = tokenIndex;\n      }\n    }\n    function openSyntax() {\n      syntaxStack = {\n        syntax: state.syntax,\n        opts: state.syntax.opts || syntaxStack !== null && syntaxStack.opts || null,\n        prev: syntaxStack\n      };\n      matchStack = {\n        type: OPEN_SYNTAX,\n        syntax: state.syntax,\n        token: matchStack.token,\n        prev: matchStack\n      };\n    }\n    function closeSyntax() {\n      if (matchStack.type === OPEN_SYNTAX) {\n        matchStack = matchStack.prev;\n      } else {\n        matchStack = {\n          type: CLOSE_SYNTAX,\n          syntax: syntaxStack.syntax,\n          token: matchStack.token,\n          prev: matchStack\n        };\n      }\n      syntaxStack = syntaxStack.prev;\n    }\n    var syntaxStack = null;\n    var thenStack = null;\n    var elseStack = null;\n\n    // null – stashing allowed, nothing stashed\n    // false – stashing disabled, nothing stashed\n    // anithing else – fail stashable syntaxes, some syntax stashed\n    var syntaxStash = null;\n    var iterationCount = 0; // count iterations and prevent infinite loop\n    var exitReason = null;\n    var token = null;\n    var tokenIndex = -1;\n    var longestMatch = 0;\n    var matchStack = {\n      type: STUB,\n      syntax: null,\n      token: null,\n      prev: null\n    };\n    moveToNextToken();\n    while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {\n      // function mapList(list, fn) {\n      //     var result = [];\n      //     while (list) {\n      //         result.unshift(fn(list));\n      //         list = list.prev;\n      //     }\n      //     return result;\n      // }\n      // console.log('--\\n',\n      //     '#' + iterationCount,\n      //     require('util').inspect({\n      //         match: mapList(matchStack, x => x.type === TOKEN ? x.token && x.token.value : x.syntax ? ({ [OPEN_SYNTAX]: '<', [CLOSE_SYNTAX]: '</' }[x.type] || x.type) + '!' + x.syntax.name : null),\n      //         token: token && token.value,\n      //         tokenIndex,\n      //         syntax: syntax.type + (syntax.id ? ' #' + syntax.id : '')\n      //     }, { depth: null })\n      // );\n      switch (state.type) {\n        case 'Match':\n          if (thenStack === null) {\n            // turn to MISMATCH when some tokens left unmatched\n            if (token !== null) {\n              // doesn't mismatch if just one token left and it's an IE hack\n              if (tokenIndex !== tokens.length - 1 || token.value !== '\\\\0' && token.value !== '\\\\9') {\n                state = MISMATCH;\n                break;\n              }\n            }\n\n            // break the main loop, return a result - MATCH\n            exitReason = EXIT_REASON_MATCH;\n            break;\n          }\n\n          // go to next syntax (`then` branch)\n          state = thenStack.nextState;\n\n          // check match is not empty\n          if (state === DISALLOW_EMPTY) {\n            if (thenStack.matchStack === matchStack) {\n              state = MISMATCH;\n              break;\n            } else {\n              state = MATCH;\n            }\n          }\n\n          // close syntax if needed\n          while (thenStack.syntaxStack !== syntaxStack) {\n            closeSyntax();\n          }\n\n          // pop stack\n          thenStack = thenStack.prev;\n          break;\n        case 'Mismatch':\n          // when some syntax is stashed\n          if (syntaxStash !== null && syntaxStash !== false) {\n            // there is no else branches or a branch reduce match stack\n            if (elseStack === null || tokenIndex > elseStack.tokenIndex) {\n              // restore state from the stash\n              elseStack = syntaxStash;\n              syntaxStash = false; // disable stashing\n            }\n          } else if (elseStack === null) {\n            // no else branches -> break the main loop\n            // return a result - MISMATCH\n            exitReason = EXIT_REASON_MISMATCH;\n            break;\n          }\n\n          // go to next syntax (`else` branch)\n          state = elseStack.nextState;\n\n          // restore all the rest stack states\n          thenStack = elseStack.thenStack;\n          syntaxStack = elseStack.syntaxStack;\n          matchStack = elseStack.matchStack;\n          tokenIndex = elseStack.tokenIndex;\n          token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n\n          // pop stack\n          elseStack = elseStack.prev;\n          break;\n        case 'MatchGraph':\n          state = state.match;\n          break;\n        case 'If':\n          // IMPORTANT: else stack push must go first,\n          // since it stores the state of thenStack before changes\n          if (state.else !== MISMATCH) {\n            pushElseStack(state.else);\n          }\n          if (state.then !== MATCH) {\n            pushThenStack(state.then);\n          }\n          state = state.match;\n          break;\n        case 'MatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state,\n            index: 0,\n            mask: 0\n          };\n          break;\n        case 'MatchOnceBuffer':\n          var terms = state.syntax.terms;\n          if (state.index === terms.length) {\n            // no matches at all or it's required all terms to be matched\n            if (state.mask === 0 || state.syntax.all) {\n              state = MISMATCH;\n              break;\n            }\n\n            // a partial match is ok\n            state = MATCH;\n            break;\n          }\n\n          // all terms are matched\n          if (state.mask === (1 << terms.length) - 1) {\n            state = MATCH;\n            break;\n          }\n          for (; state.index < terms.length; state.index++) {\n            var matchFlag = 1 << state.index;\n            if ((state.mask & matchFlag) === 0) {\n              // IMPORTANT: else stack push must go first,\n              // since it stores the state of thenStack before changes\n              pushElseStack(state);\n              pushThenStack({\n                type: 'AddMatchOnce',\n                syntax: state.syntax,\n                mask: state.mask | matchFlag\n              });\n\n              // match\n              state = terms[state.index++];\n              break;\n            }\n          }\n          break;\n        case 'AddMatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state.syntax,\n            index: 0,\n            mask: state.mask\n          };\n          break;\n        case 'Enum':\n          if (token !== null) {\n            var name = token.value.toLowerCase();\n\n            // drop \\0 and \\9 hack from keyword name\n            if (name.indexOf('\\\\') !== -1) {\n              name = name.replace(/\\\\[09].*$/, '');\n            }\n            if (hasOwnProperty.call(state.map, name)) {\n              state = state.map[name];\n              break;\n            }\n          }\n          state = MISMATCH;\n          break;\n        case 'Generic':\n          var opts = syntaxStack !== null ? syntaxStack.opts : null;\n          var lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));\n          if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n            state = MATCH;\n          } else {\n            state = MISMATCH;\n          }\n          break;\n        case 'Type':\n        case 'Property':\n          var syntaxDict = state.type === 'Type' ? 'types' : 'properties';\n          var dictSyntax = hasOwnProperty.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;\n          if (!dictSyntax || !dictSyntax.match) {\n            throw new Error('Bad syntax reference: ' + (state.type === 'Type' ? '<' + state.name + '>' : '<\\'' + state.name + '\\'>'));\n          }\n\n          // stash a syntax for types with low priority\n          if (syntaxStash !== false && token !== null && state.type === 'Type') {\n            var lowPriorityMatching =\n            // https://drafts.csswg.org/css-values-4/#custom-idents\n            // When parsing positionally-ambiguous keywords in a property value, a <custom-ident> production\n            // can only claim the keyword if no other unfulfilled production can claim it.\n            state.name === 'custom-ident' && token.type === TYPE.Ident ||\n            // https://drafts.csswg.org/css-values-4/#lengths\n            // ... if a `0` could be parsed as either a <number> or a <length> in a property (such as line-height),\n            // it must parse as a <number>\n            state.name === 'length' && token.value === '0';\n            if (lowPriorityMatching) {\n              if (syntaxStash === null) {\n                syntaxStash = stateSnapshotFromSyntax(state, elseStack);\n              }\n              state = MISMATCH;\n              break;\n            }\n          }\n          openSyntax();\n          state = dictSyntax.match;\n          break;\n        case 'Keyword':\n          var name = state.name;\n          if (token !== null) {\n            var keywordName = token.value;\n\n            // drop \\0 and \\9 hack from keyword name\n            if (keywordName.indexOf('\\\\') !== -1) {\n              keywordName = keywordName.replace(/\\\\[09].*$/, '');\n            }\n            if (areStringsEqualCaseInsensitive(keywordName, name)) {\n              addTokenToMatch();\n              state = MATCH;\n              break;\n            }\n          }\n          state = MISMATCH;\n          break;\n        case 'AtKeyword':\n        case 'Function':\n          if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {\n            addTokenToMatch();\n            state = MATCH;\n            break;\n          }\n          state = MISMATCH;\n          break;\n        case 'Token':\n          if (token !== null && token.value === state.value) {\n            addTokenToMatch();\n            state = MATCH;\n            break;\n          }\n          state = MISMATCH;\n          break;\n        case 'Comma':\n          if (token !== null && token.type === TYPE.Comma) {\n            if (isCommaContextStart(matchStack.token)) {\n              state = MISMATCH;\n            } else {\n              addTokenToMatch();\n              state = isCommaContextEnd(token) ? MISMATCH : MATCH;\n            }\n          } else {\n            state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? MATCH : MISMATCH;\n          }\n          break;\n        case 'String':\n          var string = '';\n          for (var lastTokenIndex = tokenIndex; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {\n            string += tokens[lastTokenIndex].value;\n          }\n          if (areStringsEqualCaseInsensitive(string, state.value)) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n            state = MATCH;\n          } else {\n            state = MISMATCH;\n          }\n          break;\n        default:\n          throw new Error('Unknown node type: ' + state.type);\n      }\n    }\n    totalIterationCount += iterationCount;\n    switch (exitReason) {\n      case null:\n        console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');\n        exitReason = EXIT_REASON_ITERATION_LIMIT;\n        matchStack = null;\n        break;\n      case EXIT_REASON_MATCH:\n        while (syntaxStack !== null) {\n          closeSyntax();\n        }\n        break;\n      default:\n        matchStack = null;\n    }\n    return {\n      tokens: tokens,\n      reason: exitReason,\n      iterations: iterationCount,\n      match: matchStack,\n      longestMatch: longestMatch\n    };\n  }\n  function matchAsList(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n    if (matchResult.match !== null) {\n      var item = reverseList(matchResult.match).prev;\n      matchResult.match = [];\n      while (item !== null) {\n        switch (item.type) {\n          case STUB:\n            break;\n          case OPEN_SYNTAX:\n          case CLOSE_SYNTAX:\n            matchResult.match.push({\n              type: item.type,\n              syntax: item.syntax\n            });\n            break;\n          default:\n            matchResult.match.push({\n              token: item.token.value,\n              node: item.token.node\n            });\n            break;\n        }\n        item = item.prev;\n      }\n    }\n    return matchResult;\n  }\n  function matchAsTree(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n    if (matchResult.match === null) {\n      return matchResult;\n    }\n    var item = matchResult.match;\n    var host = matchResult.match = {\n      syntax: matchGraph.syntax || null,\n      match: []\n    };\n    var hostStack = [host];\n\n    // revert a list and start with 2nd item since 1st is a stub item\n    item = reverseList(item).prev;\n\n    // build a tree\n    while (item !== null) {\n      switch (item.type) {\n        case OPEN_SYNTAX:\n          host.match.push(host = {\n            syntax: item.syntax,\n            match: []\n          });\n          hostStack.push(host);\n          break;\n        case CLOSE_SYNTAX:\n          hostStack.pop();\n          host = hostStack[hostStack.length - 1];\n          break;\n        default:\n          host.match.push({\n            syntax: item.syntax || null,\n            token: item.token.value,\n            node: item.token.node\n          });\n      }\n      item = item.prev;\n    }\n    return matchResult;\n  }\n  module.exports = {\n    matchAsList: matchAsList,\n    matchAsTree: matchAsTree,\n    getTotalIterationCount: function getTotalIterationCount() {\n      return totalIterationCount;\n    }\n  };\n});","lineCount":530,"map":[[2,2,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,37],[2,40,1,38,"hasOwnProperty"],[2,54,1,52],[3,2,2,0],[3,6,2,4,"matchGraph"],[3,16,2,14],[3,19,2,17,"require"],[3,30,2,24],[3,31,2,24,"_dependencyMap"],[3,45,2,24],[3,65,2,40],[3,66,2,41],[4,2,3,0],[4,6,3,4,"MATCH"],[4,11,3,9],[4,14,3,12,"matchGraph"],[4,24,3,22],[4,25,3,23,"MATCH"],[4,30,3,28],[5,2,4,0],[5,6,4,4,"MISMATCH"],[5,14,4,12],[5,17,4,15,"matchGraph"],[5,27,4,25],[5,28,4,26,"MISMATCH"],[5,36,4,34],[6,2,5,0],[6,6,5,4,"DISALLOW_EMPTY"],[6,20,5,18],[6,23,5,21,"matchGraph"],[6,33,5,31],[6,34,5,32,"DISALLOW_EMPTY"],[6,48,5,46],[7,2,6,0],[7,6,6,4,"TYPE"],[7,10,6,8],[7,13,6,11,"require"],[7,24,6,18],[7,25,6,18,"_dependencyMap"],[7,39,6,18],[7,64,6,39],[7,65,6,40],[7,66,6,41,"TYPE"],[7,70,6,45],[8,2,8,0],[8,6,8,4,"STUB"],[8,10,8,8],[8,13,8,11],[8,14,8,12],[9,2,9,0],[9,6,9,4,"TOKEN"],[9,11,9,9],[9,14,9,12],[9,15,9,13],[10,2,10,0],[10,6,10,4,"OPEN_SYNTAX"],[10,17,10,15],[10,20,10,18],[10,21,10,19],[11,2,11,0],[11,6,11,4,"CLOSE_SYNTAX"],[11,18,11,16],[11,21,11,19],[11,22,11,20],[12,2,13,0],[12,6,13,4,"EXIT_REASON_MATCH"],[12,23,13,21],[12,26,13,24],[12,33,13,31],[13,2,14,0],[13,6,14,4,"EXIT_REASON_MISMATCH"],[13,26,14,24],[13,29,14,27],[13,39,14,37],[14,2,15,0],[14,6,15,4,"EXIT_REASON_ITERATION_LIMIT"],[14,33,15,31],[14,36,15,34],[14,139,15,137],[15,2,17,0],[15,6,17,4,"ITERATION_LIMIT"],[15,21,17,19],[15,24,17,22],[15,29,17,27],[16,2,18,0],[16,6,18,4,"totalIterationCount"],[16,25,18,23],[16,28,18,26],[16,29,18,27],[17,2,20,0],[17,11,20,9,"reverseList"],[17,22,20,20,"reverseList"],[17,23,20,21,"list"],[17,27,20,25],[17,29,20,27],[18,4,21,4],[18,8,21,8,"prev"],[18,12,21,12],[18,15,21,15],[18,19,21,19],[19,4,22,4],[19,8,22,8,"next"],[19,12,22,12],[19,15,22,15],[19,19,22,19],[20,4,23,4],[20,8,23,8,"item"],[20,12,23,12],[20,15,23,15,"list"],[20,19,23,19],[21,4,25,4],[21,11,25,11,"item"],[21,15,25,15],[21,20,25,20],[21,24,25,24],[21,26,25,26],[22,6,26,8,"next"],[22,10,26,12],[22,13,26,15,"item"],[22,17,26,19],[22,18,26,20,"prev"],[22,22,26,24],[23,6,27,8,"item"],[23,10,27,12],[23,11,27,13,"prev"],[23,15,27,17],[23,18,27,20,"prev"],[23,22,27,24],[24,6,28,8,"prev"],[24,10,28,12],[24,13,28,15,"item"],[24,17,28,19],[25,6,29,8,"item"],[25,10,29,12],[25,13,29,15,"next"],[25,17,29,19],[26,4,30,4],[27,4,32,4],[27,11,32,11,"prev"],[27,15,32,15],[28,2,33,0],[29,2,35,0],[29,11,35,9,"areStringsEqualCaseInsensitive"],[29,41,35,39,"areStringsEqualCaseInsensitive"],[29,42,35,40,"testStr"],[29,49,35,47],[29,51,35,49,"referenceStr"],[29,63,35,61],[29,65,35,63],[30,4,36,4],[30,8,36,8,"testStr"],[30,15,36,15],[30,16,36,16,"length"],[30,22,36,22],[30,27,36,27,"referenceStr"],[30,39,36,39],[30,40,36,40,"length"],[30,46,36,46],[30,48,36,48],[31,6,37,8],[31,13,37,15],[31,18,37,20],[32,4,38,4],[33,4,40,4],[33,9,40,9],[33,13,40,13,"i"],[33,14,40,14],[33,17,40,17],[33,18,40,18],[33,20,40,20,"i"],[33,21,40,21],[33,24,40,24,"testStr"],[33,31,40,31],[33,32,40,32,"length"],[33,38,40,38],[33,40,40,40,"i"],[33,41,40,41],[33,43,40,43],[33,45,40,45],[34,6,41,8],[34,10,41,12,"testCode"],[34,18,41,20],[34,21,41,23,"testStr"],[34,28,41,30],[34,29,41,31,"charCodeAt"],[34,39,41,41],[34,40,41,42,"i"],[34,41,41,43],[34,42,41,44],[35,6,42,8],[35,10,42,12,"referenceCode"],[35,23,42,25],[35,26,42,28,"referenceStr"],[35,38,42,40],[35,39,42,41,"charCodeAt"],[35,49,42,51],[35,50,42,52,"i"],[35,51,42,53],[35,52,42,54],[37,6,44,8],[38,6,45,8],[38,10,45,12,"testCode"],[38,18,45,20],[38,22,45,24],[38,28,45,30],[38,32,45,34,"testCode"],[38,40,45,42],[38,44,45,46],[38,50,45,52],[38,52,45,54],[39,8,46,12,"testCode"],[39,16,46,20],[39,19,46,23,"testCode"],[39,27,46,31],[39,30,46,34],[39,32,46,36],[40,6,47,8],[41,6,49,8],[41,10,49,12,"testCode"],[41,18,49,20],[41,23,49,25,"referenceCode"],[41,36,49,38],[41,38,49,40],[42,8,50,12],[42,15,50,19],[42,20,50,24],[43,6,51,8],[44,4,52,4],[45,4,54,4],[45,11,54,11],[45,15,54,15],[46,2,55,0],[47,2,57,0],[47,11,57,9,"isContextEdgeDelim"],[47,29,57,27,"isContextEdgeDelim"],[47,30,57,28,"token"],[47,35,57,33],[47,37,57,35],[48,4,58,4],[48,8,58,8,"token"],[48,13,58,13],[48,14,58,14,"type"],[48,18,58,18],[48,23,58,23,"TYPE"],[48,27,58,27],[48,28,58,28,"Delim"],[48,33,58,33],[48,35,58,35],[49,6,59,8],[49,13,59,15],[49,18,59,20],[50,4,60,4],[52,4,62,4],[53,4,63,4],[54,4,64,4],[54,11,64,11,"token"],[54,16,64,16],[54,17,64,17,"value"],[54,22,64,22],[54,27,64,27],[54,30,64,30],[55,2,65,0],[56,2,67,0],[56,11,67,9,"isCommaContextStart"],[56,30,67,28,"isCommaContextStart"],[56,31,67,29,"token"],[56,36,67,34],[56,38,67,36],[57,4,68,4],[57,8,68,8,"token"],[57,13,68,13],[57,18,68,18],[57,22,68,22],[57,24,68,24],[58,6,69,8],[58,13,69,15],[58,17,69,19],[59,4,70,4],[60,4,72,4],[60,11,73,8,"token"],[60,16,73,13],[60,17,73,14,"type"],[60,21,73,18],[60,26,73,23,"TYPE"],[60,30,73,27],[60,31,73,28,"Comma"],[60,36,73,33],[60,40,74,8,"token"],[60,45,74,13],[60,46,74,14,"type"],[60,50,74,18],[60,55,74,23,"TYPE"],[60,59,74,27],[60,60,74,28,"Function"],[60,68,74,36],[60,72,75,8,"token"],[60,77,75,13],[60,78,75,14,"type"],[60,82,75,18],[60,87,75,23,"TYPE"],[60,91,75,27],[60,92,75,28,"LeftParenthesis"],[60,107,75,43],[60,111,76,8,"token"],[60,116,76,13],[60,117,76,14,"type"],[60,121,76,18],[60,126,76,23,"TYPE"],[60,130,76,27],[60,131,76,28,"LeftSquareBracket"],[60,148,76,45],[60,152,77,8,"token"],[60,157,77,13],[60,158,77,14,"type"],[60,162,77,18],[60,167,77,23,"TYPE"],[60,171,77,27],[60,172,77,28,"LeftCurlyBracket"],[60,188,77,44],[60,192,78,8,"isContextEdgeDelim"],[60,210,78,26],[60,211,78,27,"token"],[60,216,78,32],[60,217,78,33],[61,2,80,0],[62,2,82,0],[62,11,82,9,"isCommaContextEnd"],[62,28,82,26,"isCommaContextEnd"],[62,29,82,27,"token"],[62,34,82,32],[62,36,82,34],[63,4,83,4],[63,8,83,8,"token"],[63,13,83,13],[63,18,83,18],[63,22,83,22],[63,24,83,24],[64,6,84,8],[64,13,84,15],[64,17,84,19],[65,4,85,4],[66,4,87,4],[66,11,88,8,"token"],[66,16,88,13],[66,17,88,14,"type"],[66,21,88,18],[66,26,88,23,"TYPE"],[66,30,88,27],[66,31,88,28,"RightParenthesis"],[66,47,88,44],[66,51,89,8,"token"],[66,56,89,13],[66,57,89,14,"type"],[66,61,89,18],[66,66,89,23,"TYPE"],[66,70,89,27],[66,71,89,28,"RightSquareBracket"],[66,89,89,46],[66,93,90,8,"token"],[66,98,90,13],[66,99,90,14,"type"],[66,103,90,18],[66,108,90,23,"TYPE"],[66,112,90,27],[66,113,90,28,"RightCurlyBracket"],[66,130,90,45],[66,134,91,8,"token"],[66,139,91,13],[66,140,91,14,"type"],[66,144,91,18],[66,149,91,23,"TYPE"],[66,153,91,27],[66,154,91,28,"Delim"],[66,159,91,33],[67,2,93,0],[68,2,95,0],[68,11,95,9,"internalMatch"],[68,24,95,22,"internalMatch"],[68,25,95,23,"tokens"],[68,31,95,29],[68,33,95,31,"state"],[68,38,95,36],[68,40,95,38,"syntaxes"],[68,48,95,46],[68,50,95,48],[69,4,96,4],[69,13,96,13,"moveToNextToken"],[69,28,96,28,"moveToNextToken"],[69,29,96,28],[69,31,96,31],[70,6,97,8],[70,9,97,11],[71,8,98,12,"tokenIndex"],[71,18,98,22],[71,20,98,24],[72,8,99,12,"token"],[72,13,99,17],[72,16,99,20,"tokenIndex"],[72,26,99,30],[72,29,99,33,"tokens"],[72,35,99,39],[72,36,99,40,"length"],[72,42,99,46],[72,45,99,49,"tokens"],[72,51,99,55],[72,52,99,56,"tokenIndex"],[72,62,99,66],[72,63,99,67],[72,66,99,70],[72,70,99,74],[73,6,100,8],[73,7,100,9],[73,15,100,17,"token"],[73,20,100,22],[73,25,100,27],[73,29,100,31],[73,34,100,36,"token"],[73,39,100,41],[73,40,100,42,"type"],[73,44,100,46],[73,49,100,51,"TYPE"],[73,53,100,55],[73,54,100,56,"WhiteSpace"],[73,64,100,66],[73,68,100,70,"token"],[73,73,100,75],[73,74,100,76,"type"],[73,78,100,80],[73,83,100,85,"TYPE"],[73,87,100,89],[73,88,100,90,"Comment"],[73,95,100,97],[73,96,100,98],[74,4,101,4],[75,4,103,4],[75,13,103,13,"getNextToken"],[75,25,103,25,"getNextToken"],[75,26,103,26,"offset"],[75,32,103,32],[75,34,103,34],[76,6,104,8],[76,10,104,12,"nextIndex"],[76,19,104,21],[76,22,104,24,"tokenIndex"],[76,32,104,34],[76,35,104,37,"offset"],[76,41,104,43],[77,6,106,8],[77,13,106,15,"nextIndex"],[77,22,106,24],[77,25,106,27,"tokens"],[77,31,106,33],[77,32,106,34,"length"],[77,38,106,40],[77,41,106,43,"tokens"],[77,47,106,49],[77,48,106,50,"nextIndex"],[77,57,106,59],[77,58,106,60],[77,61,106,63],[77,65,106,67],[78,4,107,4],[79,4,109,4],[79,13,109,13,"stateSnapshotFromSyntax"],[79,36,109,36,"stateSnapshotFromSyntax"],[79,37,109,37,"nextState"],[79,46,109,46],[79,48,109,48,"prev"],[79,52,109,52],[79,54,109,54],[80,6,110,8],[80,13,110,15],[81,8,111,12,"nextState"],[81,17,111,21],[81,19,111,23,"nextState"],[81,28,111,32],[82,8,112,12,"matchStack"],[82,18,112,22],[82,20,112,24,"matchStack"],[82,30,112,34],[83,8,113,12,"syntaxStack"],[83,19,113,23],[83,21,113,25,"syntaxStack"],[83,32,113,36],[84,8,114,12,"thenStack"],[84,17,114,21],[84,19,114,23,"thenStack"],[84,28,114,32],[85,8,115,12,"tokenIndex"],[85,18,115,22],[85,20,115,24,"tokenIndex"],[85,30,115,34],[86,8,116,12,"prev"],[86,12,116,16],[86,14,116,18,"prev"],[87,6,117,8],[87,7,117,9],[88,4,118,4],[89,4,120,4],[89,13,120,13,"pushThenStack"],[89,26,120,26,"pushThenStack"],[89,27,120,27,"nextState"],[89,36,120,36],[89,38,120,38],[90,6,121,8,"thenStack"],[90,15,121,17],[90,18,121,20],[91,8,122,12,"nextState"],[91,17,122,21],[91,19,122,23,"nextState"],[91,28,122,32],[92,8,123,12,"matchStack"],[92,18,123,22],[92,20,123,24,"matchStack"],[92,30,123,34],[93,8,124,12,"syntaxStack"],[93,19,124,23],[93,21,124,25,"syntaxStack"],[93,32,124,36],[94,8,125,12,"prev"],[94,12,125,16],[94,14,125,18,"thenStack"],[95,6,126,8],[95,7,126,9],[96,4,127,4],[97,4,129,4],[97,13,129,13,"pushElseStack"],[97,26,129,26,"pushElseStack"],[97,27,129,27,"nextState"],[97,36,129,36],[97,38,129,38],[98,6,130,8,"elseStack"],[98,15,130,17],[98,18,130,20,"stateSnapshotFromSyntax"],[98,41,130,43],[98,42,130,44,"nextState"],[98,51,130,53],[98,53,130,55,"elseStack"],[98,62,130,64],[98,63,130,65],[99,4,131,4],[100,4,133,4],[100,13,133,13,"addTokenToMatch"],[100,28,133,28,"addTokenToMatch"],[100,29,133,28],[100,31,133,31],[101,6,134,8,"matchStack"],[101,16,134,18],[101,19,134,21],[102,8,135,12,"type"],[102,12,135,16],[102,14,135,18,"TOKEN"],[102,19,135,23],[103,8,136,12,"syntax"],[103,14,136,18],[103,16,136,20,"state"],[103,21,136,25],[103,22,136,26,"syntax"],[103,28,136,32],[104,8,137,12,"token"],[104,13,137,17],[104,15,137,19,"token"],[104,20,137,24],[105,8,138,12,"prev"],[105,12,138,16],[105,14,138,18,"matchStack"],[106,6,139,8],[106,7,139,9],[107,6,141,8,"moveToNextToken"],[107,21,141,23],[107,22,141,24],[107,23,141,25],[108,6,142,8,"syntaxStash"],[108,17,142,19],[108,20,142,22],[108,24,142,26],[109,6,144,8],[109,10,144,12,"tokenIndex"],[109,20,144,22],[109,23,144,25,"longestMatch"],[109,35,144,37],[109,37,144,39],[110,8,145,12,"longestMatch"],[110,20,145,24],[110,23,145,27,"tokenIndex"],[110,33,145,37],[111,6,146,8],[112,4,147,4],[113,4,149,4],[113,13,149,13,"openSyntax"],[113,23,149,23,"openSyntax"],[113,24,149,23],[113,26,149,26],[114,6,150,8,"syntaxStack"],[114,17,150,19],[114,20,150,22],[115,8,151,12,"syntax"],[115,14,151,18],[115,16,151,20,"state"],[115,21,151,25],[115,22,151,26,"syntax"],[115,28,151,32],[116,8,152,12,"opts"],[116,12,152,16],[116,14,152,18,"state"],[116,19,152,23],[116,20,152,24,"syntax"],[116,26,152,30],[116,27,152,31,"opts"],[116,31,152,35],[116,35,152,40,"syntaxStack"],[116,46,152,51],[116,51,152,56],[116,55,152,60],[116,59,152,64,"syntaxStack"],[116,70,152,75],[116,71,152,76,"opts"],[116,75,152,81],[116,79,152,85],[116,83,152,89],[117,8,153,12,"prev"],[117,12,153,16],[117,14,153,18,"syntaxStack"],[118,6,154,8],[118,7,154,9],[119,6,156,8,"matchStack"],[119,16,156,18],[119,19,156,21],[120,8,157,12,"type"],[120,12,157,16],[120,14,157,18,"OPEN_SYNTAX"],[120,25,157,29],[121,8,158,12,"syntax"],[121,14,158,18],[121,16,158,20,"state"],[121,21,158,25],[121,22,158,26,"syntax"],[121,28,158,32],[122,8,159,12,"token"],[122,13,159,17],[122,15,159,19,"matchStack"],[122,25,159,29],[122,26,159,30,"token"],[122,31,159,35],[123,8,160,12,"prev"],[123,12,160,16],[123,14,160,18,"matchStack"],[124,6,161,8],[124,7,161,9],[125,4,162,4],[126,4,164,4],[126,13,164,13,"closeSyntax"],[126,24,164,24,"closeSyntax"],[126,25,164,24],[126,27,164,27],[127,6,165,8],[127,10,165,12,"matchStack"],[127,20,165,22],[127,21,165,23,"type"],[127,25,165,27],[127,30,165,32,"OPEN_SYNTAX"],[127,41,165,43],[127,43,165,45],[128,8,166,12,"matchStack"],[128,18,166,22],[128,21,166,25,"matchStack"],[128,31,166,35],[128,32,166,36,"prev"],[128,36,166,40],[129,6,167,8],[129,7,167,9],[129,13,167,15],[130,8,168,12,"matchStack"],[130,18,168,22],[130,21,168,25],[131,10,169,16,"type"],[131,14,169,20],[131,16,169,22,"CLOSE_SYNTAX"],[131,28,169,34],[132,10,170,16,"syntax"],[132,16,170,22],[132,18,170,24,"syntaxStack"],[132,29,170,35],[132,30,170,36,"syntax"],[132,36,170,42],[133,10,171,16,"token"],[133,15,171,21],[133,17,171,23,"matchStack"],[133,27,171,33],[133,28,171,34,"token"],[133,33,171,39],[134,10,172,16,"prev"],[134,14,172,20],[134,16,172,22,"matchStack"],[135,8,173,12],[135,9,173,13],[136,6,174,8],[137,6,176,8,"syntaxStack"],[137,17,176,19],[137,20,176,22,"syntaxStack"],[137,31,176,33],[137,32,176,34,"prev"],[137,36,176,38],[138,4,177,4],[139,4,179,4],[139,8,179,8,"syntaxStack"],[139,19,179,19],[139,22,179,22],[139,26,179,26],[140,4,180,4],[140,8,180,8,"thenStack"],[140,17,180,17],[140,20,180,20],[140,24,180,24],[141,4,181,4],[141,8,181,8,"elseStack"],[141,17,181,17],[141,20,181,20],[141,24,181,24],[143,4,183,4],[144,4,184,4],[145,4,185,4],[146,4,186,4],[146,8,186,8,"syntaxStash"],[146,19,186,19],[146,22,186,22],[146,26,186,26],[147,4,188,4],[147,8,188,8,"iterationCount"],[147,22,188,22],[147,25,188,25],[147,26,188,26],[147,27,188,27],[147,28,188,28],[148,4,189,4],[148,8,189,8,"exitReason"],[148,18,189,18],[148,21,189,21],[148,25,189,25],[149,4,191,4],[149,8,191,8,"token"],[149,13,191,13],[149,16,191,16],[149,20,191,20],[150,4,192,4],[150,8,192,8,"tokenIndex"],[150,18,192,18],[150,21,192,21],[150,22,192,22],[150,23,192,23],[151,4,193,4],[151,8,193,8,"longestMatch"],[151,20,193,20],[151,23,193,23],[151,24,193,24],[152,4,194,4],[152,8,194,8,"matchStack"],[152,18,194,18],[152,21,194,21],[153,6,195,8,"type"],[153,10,195,12],[153,12,195,14,"STUB"],[153,16,195,18],[154,6,196,8,"syntax"],[154,12,196,14],[154,14,196,16],[154,18,196,20],[155,6,197,8,"token"],[155,11,197,13],[155,13,197,15],[155,17,197,19],[156,6,198,8,"prev"],[156,10,198,12],[156,12,198,14],[157,4,199,4],[157,5,199,5],[158,4,201,4,"moveToNextToken"],[158,19,201,19],[158,20,201,20],[158,21,201,21],[159,4,203,4],[159,11,203,11,"exitReason"],[159,21,203,21],[159,26,203,26],[159,30,203,30],[159,34,203,34],[159,36,203,36,"iterationCount"],[159,50,203,50],[159,53,203,53,"ITERATION_LIMIT"],[159,68,203,68],[159,70,203,70],[160,6,204,8],[161,6,205,8],[162,6,206,8],[163,6,207,8],[164,6,208,8],[165,6,209,8],[166,6,210,8],[167,6,211,8],[168,6,212,8],[169,6,213,8],[170,6,214,8],[171,6,215,8],[172,6,216,8],[173,6,217,8],[174,6,218,8],[175,6,219,8],[176,6,220,8],[177,6,221,8],[177,14,221,16,"state"],[177,19,221,21],[177,20,221,22,"type"],[177,24,221,26],[178,8,222,12],[178,13,222,17],[178,20,222,24],[179,10,223,16],[179,14,223,20,"thenStack"],[179,23,223,29],[179,28,223,34],[179,32,223,38],[179,34,223,40],[180,12,224,20],[181,12,225,20],[181,16,225,24,"token"],[181,21,225,29],[181,26,225,34],[181,30,225,38],[181,32,225,40],[182,14,226,24],[183,14,227,24],[183,18,227,28,"tokenIndex"],[183,28,227,38],[183,33,227,43,"tokens"],[183,39,227,49],[183,40,227,50,"length"],[183,46,227,56],[183,49,227,59],[183,50,227,60],[183,54,227,65,"token"],[183,59,227,70],[183,60,227,71,"value"],[183,65,227,76],[183,70,227,81],[183,75,227,86],[183,79,227,90,"token"],[183,84,227,95],[183,85,227,96,"value"],[183,90,227,101],[183,95,227,106],[183,100,227,112],[183,102,227,114],[184,16,228,28,"state"],[184,21,228,33],[184,24,228,36,"MISMATCH"],[184,32,228,44],[185,16,229,28],[186,14,230,24],[187,12,231,20],[189,12,233,20],[190,12,234,20,"exitReason"],[190,22,234,30],[190,25,234,33,"EXIT_REASON_MATCH"],[190,42,234,50],[191,12,235,20],[192,10,236,16],[194,10,238,16],[195,10,239,16,"state"],[195,15,239,21],[195,18,239,24,"thenStack"],[195,27,239,33],[195,28,239,34,"nextState"],[195,37,239,43],[197,10,241,16],[198,10,242,16],[198,14,242,20,"state"],[198,19,242,25],[198,24,242,30,"DISALLOW_EMPTY"],[198,38,242,44],[198,40,242,46],[199,12,243,20],[199,16,243,24,"thenStack"],[199,25,243,33],[199,26,243,34,"matchStack"],[199,36,243,44],[199,41,243,49,"matchStack"],[199,51,243,59],[199,53,243,61],[200,14,244,24,"state"],[200,19,244,29],[200,22,244,32,"MISMATCH"],[200,30,244,40],[201,14,245,24],[202,12,246,20],[202,13,246,21],[202,19,246,27],[203,14,247,24,"state"],[203,19,247,29],[203,22,247,32,"MATCH"],[203,27,247,37],[204,12,248,20],[205,10,249,16],[207,10,251,16],[208,10,252,16],[208,17,252,23,"thenStack"],[208,26,252,32],[208,27,252,33,"syntaxStack"],[208,38,252,44],[208,43,252,49,"syntaxStack"],[208,54,252,60],[208,56,252,62],[209,12,253,20,"closeSyntax"],[209,23,253,31],[209,24,253,32],[209,25,253,33],[210,10,254,16],[212,10,256,16],[213,10,257,16,"thenStack"],[213,19,257,25],[213,22,257,28,"thenStack"],[213,31,257,37],[213,32,257,38,"prev"],[213,36,257,42],[214,10,258,16],[215,8,260,12],[215,13,260,17],[215,23,260,27],[216,10,261,16],[217,10,262,16],[217,14,262,20,"syntaxStash"],[217,25,262,31],[217,30,262,36],[217,34,262,40],[217,38,262,44,"syntaxStash"],[217,49,262,55],[217,54,262,60],[217,59,262,65],[217,61,262,67],[218,12,263,20],[219,12,264,20],[219,16,264,24,"elseStack"],[219,25,264,33],[219,30,264,38],[219,34,264,42],[219,38,264,46,"tokenIndex"],[219,48,264,56],[219,51,264,59,"elseStack"],[219,60,264,68],[219,61,264,69,"tokenIndex"],[219,71,264,79],[219,73,264,81],[220,14,265,24],[221,14,266,24,"elseStack"],[221,23,266,33],[221,26,266,36,"syntaxStash"],[221,37,266,47],[222,14,267,24,"syntaxStash"],[222,25,267,35],[222,28,267,38],[222,33,267,43],[222,34,267,44],[222,35,267,45],[223,12,268,20],[224,10,269,16],[224,11,269,17],[224,17,269,23],[224,21,269,27,"elseStack"],[224,30,269,36],[224,35,269,41],[224,39,269,45],[224,41,269,47],[225,12,270,20],[226,12,271,20],[227,12,272,20,"exitReason"],[227,22,272,30],[227,25,272,33,"EXIT_REASON_MISMATCH"],[227,45,272,53],[228,12,273,20],[229,10,274,16],[231,10,276,16],[232,10,277,16,"state"],[232,15,277,21],[232,18,277,24,"elseStack"],[232,27,277,33],[232,28,277,34,"nextState"],[232,37,277,43],[234,10,279,16],[235,10,280,16,"thenStack"],[235,19,280,25],[235,22,280,28,"elseStack"],[235,31,280,37],[235,32,280,38,"thenStack"],[235,41,280,47],[236,10,281,16,"syntaxStack"],[236,21,281,27],[236,24,281,30,"elseStack"],[236,33,281,39],[236,34,281,40,"syntaxStack"],[236,45,281,51],[237,10,282,16,"matchStack"],[237,20,282,26],[237,23,282,29,"elseStack"],[237,32,282,38],[237,33,282,39,"matchStack"],[237,43,282,49],[238,10,283,16,"tokenIndex"],[238,20,283,26],[238,23,283,29,"elseStack"],[238,32,283,38],[238,33,283,39,"tokenIndex"],[238,43,283,49],[239,10,284,16,"token"],[239,15,284,21],[239,18,284,24,"tokenIndex"],[239,28,284,34],[239,31,284,37,"tokens"],[239,37,284,43],[239,38,284,44,"length"],[239,44,284,50],[239,47,284,53,"tokens"],[239,53,284,59],[239,54,284,60,"tokenIndex"],[239,64,284,70],[239,65,284,71],[239,68,284,74],[239,72,284,78],[241,10,286,16],[242,10,287,16,"elseStack"],[242,19,287,25],[242,22,287,28,"elseStack"],[242,31,287,37],[242,32,287,38,"prev"],[242,36,287,42],[243,10,288,16],[244,8,290,12],[244,13,290,17],[244,25,290,29],[245,10,291,16,"state"],[245,15,291,21],[245,18,291,24,"state"],[245,23,291,29],[245,24,291,30,"match"],[245,29,291,35],[246,10,292,16],[247,8,294,12],[247,13,294,17],[247,17,294,21],[248,10,295,16],[249,10,296,16],[250,10,297,16],[250,14,297,20,"state"],[250,19,297,25],[250,20,297,26,"else"],[250,24,297,30],[250,29,297,35,"MISMATCH"],[250,37,297,43],[250,39,297,45],[251,12,298,20,"pushElseStack"],[251,25,298,33],[251,26,298,34,"state"],[251,31,298,39],[251,32,298,40,"else"],[251,36,298,44],[251,37,298,45],[252,10,299,16],[253,10,301,16],[253,14,301,20,"state"],[253,19,301,25],[253,20,301,26,"then"],[253,24,301,30],[253,29,301,35,"MATCH"],[253,34,301,40],[253,36,301,42],[254,12,302,20,"pushThenStack"],[254,25,302,33],[254,26,302,34,"state"],[254,31,302,39],[254,32,302,40,"then"],[254,36,302,44],[254,37,302,45],[255,10,303,16],[256,10,305,16,"state"],[256,15,305,21],[256,18,305,24,"state"],[256,23,305,29],[256,24,305,30,"match"],[256,29,305,35],[257,10,306,16],[258,8,308,12],[258,13,308,17],[258,24,308,28],[259,10,309,16,"state"],[259,15,309,21],[259,18,309,24],[260,12,310,20,"type"],[260,16,310,24],[260,18,310,26],[260,35,310,43],[261,12,311,20,"syntax"],[261,18,311,26],[261,20,311,28,"state"],[261,25,311,33],[262,12,312,20,"index"],[262,17,312,25],[262,19,312,27],[262,20,312,28],[263,12,313,20,"mask"],[263,16,313,24],[263,18,313,26],[264,10,314,16],[264,11,314,17],[265,10,315,16],[266,8,317,12],[266,13,317,17],[266,30,317,34],[267,10,318,16],[267,14,318,20,"terms"],[267,19,318,25],[267,22,318,28,"state"],[267,27,318,33],[267,28,318,34,"syntax"],[267,34,318,40],[267,35,318,41,"terms"],[267,40,318,46],[268,10,320,16],[268,14,320,20,"state"],[268,19,320,25],[268,20,320,26,"index"],[268,25,320,31],[268,30,320,36,"terms"],[268,35,320,41],[268,36,320,42,"length"],[268,42,320,48],[268,44,320,50],[269,12,321,20],[270,12,322,20],[270,16,322,24,"state"],[270,21,322,29],[270,22,322,30,"mask"],[270,26,322,34],[270,31,322,39],[270,32,322,40],[270,36,322,44,"state"],[270,41,322,49],[270,42,322,50,"syntax"],[270,48,322,56],[270,49,322,57,"all"],[270,52,322,60],[270,54,322,62],[271,14,323,24,"state"],[271,19,323,29],[271,22,323,32,"MISMATCH"],[271,30,323,40],[272,14,324,24],[273,12,325,20],[275,12,327,20],[276,12,328,20,"state"],[276,17,328,25],[276,20,328,28,"MATCH"],[276,25,328,33],[277,12,329,20],[278,10,330,16],[280,10,332,16],[281,10,333,16],[281,14,333,20,"state"],[281,19,333,25],[281,20,333,26,"mask"],[281,24,333,30],[281,29,333,35],[281,30,333,36],[281,31,333,37],[281,35,333,41,"terms"],[281,40,333,46],[281,41,333,47,"length"],[281,47,333,53],[281,51,333,57],[281,52,333,58],[281,54,333,60],[282,12,334,20,"state"],[282,17,334,25],[282,20,334,28,"MATCH"],[282,25,334,33],[283,12,335,20],[284,10,336,16],[285,10,338,16],[285,17,338,23,"state"],[285,22,338,28],[285,23,338,29,"index"],[285,28,338,34],[285,31,338,37,"terms"],[285,36,338,42],[285,37,338,43,"length"],[285,43,338,49],[285,45,338,51,"state"],[285,50,338,56],[285,51,338,57,"index"],[285,56,338,62],[285,58,338,64],[285,60,338,66],[286,12,339,20],[286,16,339,24,"matchFlag"],[286,25,339,33],[286,28,339,36],[286,29,339,37],[286,33,339,41,"state"],[286,38,339,46],[286,39,339,47,"index"],[286,44,339,52],[287,12,341,20],[287,16,341,24],[287,17,341,25,"state"],[287,22,341,30],[287,23,341,31,"mask"],[287,27,341,35],[287,30,341,38,"matchFlag"],[287,39,341,47],[287,45,341,53],[287,46,341,54],[287,48,341,56],[288,14,342,24],[289,14,343,24],[290,14,344,24,"pushElseStack"],[290,27,344,37],[290,28,344,38,"state"],[290,33,344,43],[290,34,344,44],[291,14,345,24,"pushThenStack"],[291,27,345,37],[291,28,345,38],[292,16,346,28,"type"],[292,20,346,32],[292,22,346,34],[292,36,346,48],[293,16,347,28,"syntax"],[293,22,347,34],[293,24,347,36,"state"],[293,29,347,41],[293,30,347,42,"syntax"],[293,36,347,48],[294,16,348,28,"mask"],[294,20,348,32],[294,22,348,34,"state"],[294,27,348,39],[294,28,348,40,"mask"],[294,32,348,44],[294,35,348,47,"matchFlag"],[295,14,349,24],[295,15,349,25],[295,16,349,26],[297,14,351,24],[298,14,352,24,"state"],[298,19,352,29],[298,22,352,32,"terms"],[298,27,352,37],[298,28,352,38,"state"],[298,33,352,43],[298,34,352,44,"index"],[298,39,352,49],[298,41,352,51],[298,42,352,52],[299,14,353,24],[300,12,354,20],[301,10,355,16],[302,10,356,16],[303,8,358,12],[303,13,358,17],[303,27,358,31],[304,10,359,16,"state"],[304,15,359,21],[304,18,359,24],[305,12,360,20,"type"],[305,16,360,24],[305,18,360,26],[305,35,360,43],[306,12,361,20,"syntax"],[306,18,361,26],[306,20,361,28,"state"],[306,25,361,33],[306,26,361,34,"syntax"],[306,32,361,40],[307,12,362,20,"index"],[307,17,362,25],[307,19,362,27],[307,20,362,28],[308,12,363,20,"mask"],[308,16,363,24],[308,18,363,26,"state"],[308,23,363,31],[308,24,363,32,"mask"],[309,10,364,16],[309,11,364,17],[310,10,365,16],[311,8,367,12],[311,13,367,17],[311,19,367,23],[312,10,368,16],[312,14,368,20,"token"],[312,19,368,25],[312,24,368,30],[312,28,368,34],[312,30,368,36],[313,12,369,20],[313,16,369,24,"name"],[313,20,369,28],[313,23,369,31,"token"],[313,28,369,36],[313,29,369,37,"value"],[313,34,369,42],[313,35,369,43,"toLowerCase"],[313,46,369,54],[313,47,369,55],[313,48,369,56],[315,12,371,20],[316,12,372,20],[316,16,372,24,"name"],[316,20,372,28],[316,21,372,29,"indexOf"],[316,28,372,36],[316,29,372,37],[316,33,372,41],[316,34,372,42],[316,39,372,47],[316,40,372,48],[316,41,372,49],[316,43,372,51],[317,14,373,24,"name"],[317,18,373,28],[317,21,373,31,"name"],[317,25,373,35],[317,26,373,36,"replace"],[317,33,373,43],[317,34,373,44],[317,45,373,55],[317,47,373,57],[317,49,373,59],[317,50,373,60],[318,12,374,20],[319,12,376,20],[319,16,376,24,"hasOwnProperty"],[319,30,376,38],[319,31,376,39,"call"],[319,35,376,43],[319,36,376,44,"state"],[319,41,376,49],[319,42,376,50,"map"],[319,45,376,53],[319,47,376,55,"name"],[319,51,376,59],[319,52,376,60],[319,54,376,62],[320,14,377,24,"state"],[320,19,377,29],[320,22,377,32,"state"],[320,27,377,37],[320,28,377,38,"map"],[320,31,377,41],[320,32,377,42,"name"],[320,36,377,46],[320,37,377,47],[321,14,378,24],[322,12,379,20],[323,10,380,16],[324,10,382,16,"state"],[324,15,382,21],[324,18,382,24,"MISMATCH"],[324,26,382,32],[325,10,383,16],[326,8,385,12],[326,13,385,17],[326,22,385,26],[327,10,386,16],[327,14,386,20,"opts"],[327,18,386,24],[327,21,386,27,"syntaxStack"],[327,32,386,38],[327,37,386,43],[327,41,386,47],[327,44,386,50,"syntaxStack"],[327,55,386,61],[327,56,386,62,"opts"],[327,60,386,66],[327,63,386,69],[327,67,386,73],[328,10,387,16],[328,14,387,20,"lastTokenIndex"],[328,28,387,34],[328,31,387,37,"tokenIndex"],[328,41,387,47],[328,44,387,50,"Math"],[328,48,387,54],[328,49,387,55,"floor"],[328,54,387,60],[328,55,387,61,"state"],[328,60,387,66],[328,61,387,67,"fn"],[328,63,387,69],[328,64,387,70,"token"],[328,69,387,75],[328,71,387,77,"getNextToken"],[328,83,387,89],[328,85,387,91,"opts"],[328,89,387,95],[328,90,387,96],[328,91,387,97],[329,10,389,16],[329,14,389,20],[329,15,389,21,"isNaN"],[329,20,389,26],[329,21,389,27,"lastTokenIndex"],[329,35,389,41],[329,36,389,42],[329,40,389,46,"lastTokenIndex"],[329,54,389,60],[329,57,389,63,"tokenIndex"],[329,67,389,73],[329,69,389,75],[330,12,390,20],[330,19,390,27,"tokenIndex"],[330,29,390,37],[330,32,390,40,"lastTokenIndex"],[330,46,390,54],[330,48,390,56],[331,14,391,24,"addTokenToMatch"],[331,29,391,39],[331,30,391,40],[331,31,391,41],[332,12,392,20],[333,12,394,20,"state"],[333,17,394,25],[333,20,394,28,"MATCH"],[333,25,394,33],[334,10,395,16],[334,11,395,17],[334,17,395,23],[335,12,396,20,"state"],[335,17,396,25],[335,20,396,28,"MISMATCH"],[335,28,396,36],[336,10,397,16],[337,10,399,16],[338,8,401,12],[338,13,401,17],[338,19,401,23],[339,8,402,12],[339,13,402,17],[339,23,402,27],[340,10,403,16],[340,14,403,20,"syntaxDict"],[340,24,403,30],[340,27,403,33,"state"],[340,32,403,38],[340,33,403,39,"type"],[340,37,403,43],[340,42,403,48],[340,48,403,54],[340,51,403,57],[340,58,403,64],[340,61,403,67],[340,73,403,79],[341,10,404,16],[341,14,404,20,"dictSyntax"],[341,24,404,30],[341,27,404,33,"hasOwnProperty"],[341,41,404,47],[341,42,404,48,"call"],[341,46,404,52],[341,47,404,53,"syntaxes"],[341,55,404,61],[341,57,404,63,"syntaxDict"],[341,67,404,73],[341,68,404,74],[341,71,404,77,"syntaxes"],[341,79,404,85],[341,80,404,86,"syntaxDict"],[341,90,404,96],[341,91,404,97],[341,92,404,98,"state"],[341,97,404,103],[341,98,404,104,"name"],[341,102,404,108],[341,103,404,109],[341,106,404,112],[341,110,404,116],[342,10,406,16],[342,14,406,20],[342,15,406,21,"dictSyntax"],[342,25,406,31],[342,29,406,35],[342,30,406,36,"dictSyntax"],[342,40,406,46],[342,41,406,47,"match"],[342,46,406,52],[342,48,406,54],[343,12,407,20],[343,18,407,26],[343,22,407,30,"Error"],[343,27,407,35],[343,28,408,24],[343,52,408,48],[343,56,409,25,"state"],[343,61,409,30],[343,62,409,31,"type"],[343,66,409,35],[343,71,409,40],[343,77,409,46],[343,80,410,30],[343,83,410,33],[343,86,410,36,"state"],[343,91,410,41],[343,92,410,42,"name"],[343,96,410,46],[343,99,410,49],[343,102,410,52],[343,105,411,30],[343,110,411,35],[343,113,411,38,"state"],[343,118,411,43],[343,119,411,44,"name"],[343,123,411,48],[343,126,411,51],[343,131,411,56],[343,132,412,20],[343,133,412,21],[344,10,413,16],[346,10,415,16],[347,10,416,16],[347,14,416,20,"syntaxStash"],[347,25,416,31],[347,30,416,36],[347,35,416,41],[347,39,416,45,"token"],[347,44,416,50],[347,49,416,55],[347,53,416,59],[347,57,416,63,"state"],[347,62,416,68],[347,63,416,69,"type"],[347,67,416,73],[347,72,416,78],[347,78,416,84],[347,80,416,86],[348,12,417,20],[348,16,417,24,"lowPriorityMatching"],[348,35,417,43],[349,12,418,24],[350,12,419,24],[351,12,420,24],[352,12,421,25,"state"],[352,17,421,30],[352,18,421,31,"name"],[352,22,421,35],[352,27,421,40],[352,41,421,54],[352,45,421,58,"token"],[352,50,421,63],[352,51,421,64,"type"],[352,55,421,68],[352,60,421,73,"TYPE"],[352,64,421,77],[352,65,421,78,"Ident"],[352,70,421,83],[353,12,423,24],[354,12,424,24],[355,12,425,24],[356,12,426,25,"state"],[356,17,426,30],[356,18,426,31,"name"],[356,22,426,35],[356,27,426,40],[356,35,426,48],[356,39,426,52,"token"],[356,44,426,57],[356,45,426,58,"value"],[356,50,426,63],[356,55,426,68],[356,58,426,72],[357,12,428,20],[357,16,428,24,"lowPriorityMatching"],[357,35,428,43],[357,37,428,45],[358,14,429,24],[358,18,429,28,"syntaxStash"],[358,29,429,39],[358,34,429,44],[358,38,429,48],[358,40,429,50],[359,16,430,28,"syntaxStash"],[359,27,430,39],[359,30,430,42,"stateSnapshotFromSyntax"],[359,53,430,65],[359,54,430,66,"state"],[359,59,430,71],[359,61,430,73,"elseStack"],[359,70,430,82],[359,71,430,83],[360,14,431,24],[361,14,433,24,"state"],[361,19,433,29],[361,22,433,32,"MISMATCH"],[361,30,433,40],[362,14,434,24],[363,12,435,20],[364,10,436,16],[365,10,438,16,"openSyntax"],[365,20,438,26],[365,21,438,27],[365,22,438,28],[366,10,439,16,"state"],[366,15,439,21],[366,18,439,24,"dictSyntax"],[366,28,439,34],[366,29,439,35,"match"],[366,34,439,40],[367,10,440,16],[368,8,442,12],[368,13,442,17],[368,22,442,26],[369,10,443,16],[369,14,443,20,"name"],[369,18,443,24],[369,21,443,27,"state"],[369,26,443,32],[369,27,443,33,"name"],[369,31,443,37],[370,10,445,16],[370,14,445,20,"token"],[370,19,445,25],[370,24,445,30],[370,28,445,34],[370,30,445,36],[371,12,446,20],[371,16,446,24,"keywordName"],[371,27,446,35],[371,30,446,38,"token"],[371,35,446,43],[371,36,446,44,"value"],[371,41,446,49],[373,12,448,20],[374,12,449,20],[374,16,449,24,"keywordName"],[374,27,449,35],[374,28,449,36,"indexOf"],[374,35,449,43],[374,36,449,44],[374,40,449,48],[374,41,449,49],[374,46,449,54],[374,47,449,55],[374,48,449,56],[374,50,449,58],[375,14,450,24,"keywordName"],[375,25,450,35],[375,28,450,38,"keywordName"],[375,39,450,49],[375,40,450,50,"replace"],[375,47,450,57],[375,48,450,58],[375,59,450,69],[375,61,450,71],[375,63,450,73],[375,64,450,74],[376,12,451,20],[377,12,453,20],[377,16,453,24,"areStringsEqualCaseInsensitive"],[377,46,453,54],[377,47,453,55,"keywordName"],[377,58,453,66],[377,60,453,68,"name"],[377,64,453,72],[377,65,453,73],[377,67,453,75],[378,14,454,24,"addTokenToMatch"],[378,29,454,39],[378,30,454,40],[378,31,454,41],[379,14,455,24,"state"],[379,19,455,29],[379,22,455,32,"MATCH"],[379,27,455,37],[380,14,456,24],[381,12,457,20],[382,10,458,16],[383,10,460,16,"state"],[383,15,460,21],[383,18,460,24,"MISMATCH"],[383,26,460,32],[384,10,461,16],[385,8,463,12],[385,13,463,17],[385,24,463,28],[386,8,464,12],[386,13,464,17],[386,23,464,27],[387,10,465,16],[387,14,465,20,"token"],[387,19,465,25],[387,24,465,30],[387,28,465,34],[387,32,465,38,"areStringsEqualCaseInsensitive"],[387,62,465,68],[387,63,465,69,"token"],[387,68,465,74],[387,69,465,75,"value"],[387,74,465,80],[387,76,465,82,"state"],[387,81,465,87],[387,82,465,88,"name"],[387,86,465,92],[387,87,465,93],[387,89,465,95],[388,12,466,20,"addTokenToMatch"],[388,27,466,35],[388,28,466,36],[388,29,466,37],[389,12,467,20,"state"],[389,17,467,25],[389,20,467,28,"MATCH"],[389,25,467,33],[390,12,468,20],[391,10,469,16],[392,10,471,16,"state"],[392,15,471,21],[392,18,471,24,"MISMATCH"],[392,26,471,32],[393,10,472,16],[394,8,474,12],[394,13,474,17],[394,20,474,24],[395,10,475,16],[395,14,475,20,"token"],[395,19,475,25],[395,24,475,30],[395,28,475,34],[395,32,475,38,"token"],[395,37,475,43],[395,38,475,44,"value"],[395,43,475,49],[395,48,475,54,"state"],[395,53,475,59],[395,54,475,60,"value"],[395,59,475,65],[395,61,475,67],[396,12,476,20,"addTokenToMatch"],[396,27,476,35],[396,28,476,36],[396,29,476,37],[397,12,477,20,"state"],[397,17,477,25],[397,20,477,28,"MATCH"],[397,25,477,33],[398,12,478,20],[399,10,479,16],[400,10,481,16,"state"],[400,15,481,21],[400,18,481,24,"MISMATCH"],[400,26,481,32],[401,10,482,16],[402,8,484,12],[402,13,484,17],[402,20,484,24],[403,10,485,16],[403,14,485,20,"token"],[403,19,485,25],[403,24,485,30],[403,28,485,34],[403,32,485,38,"token"],[403,37,485,43],[403,38,485,44,"type"],[403,42,485,48],[403,47,485,53,"TYPE"],[403,51,485,57],[403,52,485,58,"Comma"],[403,57,485,63],[403,59,485,65],[404,12,486,20],[404,16,486,24,"isCommaContextStart"],[404,35,486,43],[404,36,486,44,"matchStack"],[404,46,486,54],[404,47,486,55,"token"],[404,52,486,60],[404,53,486,61],[404,55,486,63],[405,14,487,24,"state"],[405,19,487,29],[405,22,487,32,"MISMATCH"],[405,30,487,40],[406,12,488,20],[406,13,488,21],[406,19,488,27],[407,14,489,24,"addTokenToMatch"],[407,29,489,39],[407,30,489,40],[407,31,489,41],[408,14,490,24,"state"],[408,19,490,29],[408,22,490,32,"isCommaContextEnd"],[408,39,490,49],[408,40,490,50,"token"],[408,45,490,55],[408,46,490,56],[408,49,490,59,"MISMATCH"],[408,57,490,67],[408,60,490,70,"MATCH"],[408,65,490,75],[409,12,491,20],[410,10,492,16],[410,11,492,17],[410,17,492,23],[411,12,493,20,"state"],[411,17,493,25],[411,20,493,28,"isCommaContextStart"],[411,39,493,47],[411,40,493,48,"matchStack"],[411,50,493,58],[411,51,493,59,"token"],[411,56,493,64],[411,57,493,65],[411,61,493,69,"isCommaContextEnd"],[411,78,493,86],[411,79,493,87,"token"],[411,84,493,92],[411,85,493,93],[411,88,493,96,"MATCH"],[411,93,493,101],[411,96,493,104,"MISMATCH"],[411,104,493,112],[412,10,494,16],[413,10,496,16],[414,8,498,12],[414,13,498,17],[414,21,498,25],[415,10,499,16],[415,14,499,20,"string"],[415,20,499,26],[415,23,499,29],[415,25,499,31],[416,10,501,16],[416,15,501,21],[416,19,501,25,"lastTokenIndex"],[416,33,501,39],[416,36,501,42,"tokenIndex"],[416,46,501,52],[416,48,501,54,"lastTokenIndex"],[416,62,501,68],[416,65,501,71,"tokens"],[416,71,501,77],[416,72,501,78,"length"],[416,78,501,84],[416,82,501,88,"string"],[416,88,501,94],[416,89,501,95,"length"],[416,95,501,101],[416,98,501,104,"state"],[416,103,501,109],[416,104,501,110,"value"],[416,109,501,115],[416,110,501,116,"length"],[416,116,501,122],[416,118,501,124,"lastTokenIndex"],[416,132,501,138],[416,134,501,140],[416,136,501,142],[417,12,502,20,"string"],[417,18,502,26],[417,22,502,30,"tokens"],[417,28,502,36],[417,29,502,37,"lastTokenIndex"],[417,43,502,51],[417,44,502,52],[417,45,502,53,"value"],[417,50,502,58],[418,10,503,16],[419,10,505,16],[419,14,505,20,"areStringsEqualCaseInsensitive"],[419,44,505,50],[419,45,505,51,"string"],[419,51,505,57],[419,53,505,59,"state"],[419,58,505,64],[419,59,505,65,"value"],[419,64,505,70],[419,65,505,71],[419,67,505,73],[420,12,506,20],[420,19,506,27,"tokenIndex"],[420,29,506,37],[420,32,506,40,"lastTokenIndex"],[420,46,506,54],[420,48,506,56],[421,14,507,24,"addTokenToMatch"],[421,29,507,39],[421,30,507,40],[421,31,507,41],[422,12,508,20],[423,12,510,20,"state"],[423,17,510,25],[423,20,510,28,"MATCH"],[423,25,510,33],[424,10,511,16],[424,11,511,17],[424,17,511,23],[425,12,512,20,"state"],[425,17,512,25],[425,20,512,28,"MISMATCH"],[425,28,512,36],[426,10,513,16],[427,10,515,16],[428,8,517,12],[429,10,518,16],[429,16,518,22],[429,20,518,26,"Error"],[429,25,518,31],[429,26,518,32],[429,47,518,53],[429,50,518,56,"state"],[429,55,518,61],[429,56,518,62,"type"],[429,60,518,66],[429,61,518,67],[430,6,519,8],[431,4,520,4],[432,4,522,4,"totalIterationCount"],[432,23,522,23],[432,27,522,27,"iterationCount"],[432,41,522,41],[433,4,524,4],[433,12,524,12,"exitReason"],[433,22,524,22],[434,6,525,8],[434,11,525,13],[434,15,525,17],[435,8,526,12,"console"],[435,15,526,19],[435,16,526,20,"warn"],[435,20,526,24],[435,21,526,25],[435,51,526,55],[435,54,526,58,"ITERATION_LIMIT"],[435,69,526,73],[435,72,526,76],[435,85,526,89],[435,86,526,90],[436,8,527,12,"exitReason"],[436,18,527,22],[436,21,527,25,"EXIT_REASON_ITERATION_LIMIT"],[436,48,527,52],[437,8,528,12,"matchStack"],[437,18,528,22],[437,21,528,25],[437,25,528,29],[438,8,529,12],[439,6,531,8],[439,11,531,13,"EXIT_REASON_MATCH"],[439,28,531,30],[440,8,532,12],[440,15,532,19,"syntaxStack"],[440,26,532,30],[440,31,532,35],[440,35,532,39],[440,37,532,41],[441,10,533,16,"closeSyntax"],[441,21,533,27],[441,22,533,28],[441,23,533,29],[442,8,534,12],[443,8,535,12],[444,6,537,8],[445,8,538,12,"matchStack"],[445,18,538,22],[445,21,538,25],[445,25,538,29],[446,4,539,4],[447,4,541,4],[447,11,541,11],[448,6,542,8,"tokens"],[448,12,542,14],[448,14,542,16,"tokens"],[448,20,542,22],[449,6,543,8,"reason"],[449,12,543,14],[449,14,543,16,"exitReason"],[449,24,543,26],[450,6,544,8,"iterations"],[450,16,544,18],[450,18,544,20,"iterationCount"],[450,32,544,34],[451,6,545,8,"match"],[451,11,545,13],[451,13,545,15,"matchStack"],[451,23,545,25],[452,6,546,8,"longestMatch"],[452,18,546,20],[452,20,546,22,"longestMatch"],[453,4,547,4],[453,5,547,5],[454,2,548,0],[455,2,550,0],[455,11,550,9,"matchAsList"],[455,22,550,20,"matchAsList"],[455,23,550,21,"tokens"],[455,29,550,27],[455,31,550,29,"matchGraph"],[455,41,550,39],[455,43,550,41,"syntaxes"],[455,51,550,49],[455,53,550,51],[456,4,551,4],[456,8,551,8,"matchResult"],[456,19,551,19],[456,22,551,22,"internalMatch"],[456,35,551,35],[456,36,551,36,"tokens"],[456,42,551,42],[456,44,551,44,"matchGraph"],[456,54,551,54],[456,56,551,56,"syntaxes"],[456,64,551,64],[456,68,551,68],[456,69,551,69],[456,70,551,70],[456,71,551,71],[457,4,553,4],[457,8,553,8,"matchResult"],[457,19,553,19],[457,20,553,20,"match"],[457,25,553,25],[457,30,553,30],[457,34,553,34],[457,36,553,36],[458,6,554,8],[458,10,554,12,"item"],[458,14,554,16],[458,17,554,19,"reverseList"],[458,28,554,30],[458,29,554,31,"matchResult"],[458,40,554,42],[458,41,554,43,"match"],[458,46,554,48],[458,47,554,49],[458,48,554,50,"prev"],[458,52,554,54],[459,6,556,8,"matchResult"],[459,17,556,19],[459,18,556,20,"match"],[459,23,556,25],[459,26,556,28],[459,28,556,30],[460,6,558,8],[460,13,558,15,"item"],[460,17,558,19],[460,22,558,24],[460,26,558,28],[460,28,558,30],[461,8,559,12],[461,16,559,20,"item"],[461,20,559,24],[461,21,559,25,"type"],[461,25,559,29],[462,10,560,16],[462,15,560,21,"STUB"],[462,19,560,25],[463,12,561,20],[464,10,563,16],[464,15,563,21,"OPEN_SYNTAX"],[464,26,563,32],[465,10,564,16],[465,15,564,21,"CLOSE_SYNTAX"],[465,27,564,33],[466,12,565,20,"matchResult"],[466,23,565,31],[466,24,565,32,"match"],[466,29,565,37],[466,30,565,38,"push"],[466,34,565,42],[466,35,565,43],[467,14,566,24,"type"],[467,18,566,28],[467,20,566,30,"item"],[467,24,566,34],[467,25,566,35,"type"],[467,29,566,39],[468,14,567,24,"syntax"],[468,20,567,30],[468,22,567,32,"item"],[468,26,567,36],[468,27,567,37,"syntax"],[469,12,568,20],[469,13,568,21],[469,14,568,22],[470,12,569,20],[471,10,571,16],[472,12,572,20,"matchResult"],[472,23,572,31],[472,24,572,32,"match"],[472,29,572,37],[472,30,572,38,"push"],[472,34,572,42],[472,35,572,43],[473,14,573,24,"token"],[473,19,573,29],[473,21,573,31,"item"],[473,25,573,35],[473,26,573,36,"token"],[473,31,573,41],[473,32,573,42,"value"],[473,37,573,47],[474,14,574,24,"node"],[474,18,574,28],[474,20,574,30,"item"],[474,24,574,34],[474,25,574,35,"token"],[474,30,574,40],[474,31,574,41,"node"],[475,12,575,20],[475,13,575,21],[475,14,575,22],[476,12,576,20],[477,8,577,12],[478,8,579,12,"item"],[478,12,579,16],[478,15,579,19,"item"],[478,19,579,23],[478,20,579,24,"prev"],[478,24,579,28],[479,6,580,8],[480,4,581,4],[481,4,583,4],[481,11,583,11,"matchResult"],[481,22,583,22],[482,2,584,0],[483,2,586,0],[483,11,586,9,"matchAsTree"],[483,22,586,20,"matchAsTree"],[483,23,586,21,"tokens"],[483,29,586,27],[483,31,586,29,"matchGraph"],[483,41,586,39],[483,43,586,41,"syntaxes"],[483,51,586,49],[483,53,586,51],[484,4,587,4],[484,8,587,8,"matchResult"],[484,19,587,19],[484,22,587,22,"internalMatch"],[484,35,587,35],[484,36,587,36,"tokens"],[484,42,587,42],[484,44,587,44,"matchGraph"],[484,54,587,54],[484,56,587,56,"syntaxes"],[484,64,587,64],[484,68,587,68],[484,69,587,69],[484,70,587,70],[484,71,587,71],[485,4,589,4],[485,8,589,8,"matchResult"],[485,19,589,19],[485,20,589,20,"match"],[485,25,589,25],[485,30,589,30],[485,34,589,34],[485,36,589,36],[486,6,590,8],[486,13,590,15,"matchResult"],[486,24,590,26],[487,4,591,4],[488,4,593,4],[488,8,593,8,"item"],[488,12,593,12],[488,15,593,15,"matchResult"],[488,26,593,26],[488,27,593,27,"match"],[488,32,593,32],[489,4,594,4],[489,8,594,8,"host"],[489,12,594,12],[489,15,594,15,"matchResult"],[489,26,594,26],[489,27,594,27,"match"],[489,32,594,32],[489,35,594,35],[490,6,595,8,"syntax"],[490,12,595,14],[490,14,595,16,"matchGraph"],[490,24,595,26],[490,25,595,27,"syntax"],[490,31,595,33],[490,35,595,37],[490,39,595,41],[491,6,596,8,"match"],[491,11,596,13],[491,13,596,15],[492,4,597,4],[492,5,597,5],[493,4,598,4],[493,8,598,8,"hostStack"],[493,17,598,17],[493,20,598,20],[493,21,598,21,"host"],[493,25,598,25],[493,26,598,26],[495,4,600,4],[496,4,601,4,"item"],[496,8,601,8],[496,11,601,11,"reverseList"],[496,22,601,22],[496,23,601,23,"item"],[496,27,601,27],[496,28,601,28],[496,29,601,29,"prev"],[496,33,601,33],[498,4,603,4],[499,4,604,4],[499,11,604,11,"item"],[499,15,604,15],[499,20,604,20],[499,24,604,24],[499,26,604,26],[500,6,605,8],[500,14,605,16,"item"],[500,18,605,20],[500,19,605,21,"type"],[500,23,605,25],[501,8,606,12],[501,13,606,17,"OPEN_SYNTAX"],[501,24,606,28],[502,10,607,16,"host"],[502,14,607,20],[502,15,607,21,"match"],[502,20,607,26],[502,21,607,27,"push"],[502,25,607,31],[502,26,607,32,"host"],[502,30,607,36],[502,33,607,39],[503,12,608,20,"syntax"],[503,18,608,26],[503,20,608,28,"item"],[503,24,608,32],[503,25,608,33,"syntax"],[503,31,608,39],[504,12,609,20,"match"],[504,17,609,25],[504,19,609,27],[505,10,610,16],[505,11,610,17],[505,12,610,18],[506,10,611,16,"hostStack"],[506,19,611,25],[506,20,611,26,"push"],[506,24,611,30],[506,25,611,31,"host"],[506,29,611,35],[506,30,611,36],[507,10,612,16],[508,8,614,12],[508,13,614,17,"CLOSE_SYNTAX"],[508,25,614,29],[509,10,615,16,"hostStack"],[509,19,615,25],[509,20,615,26,"pop"],[509,23,615,29],[509,24,615,30],[509,25,615,31],[510,10,616,16,"host"],[510,14,616,20],[510,17,616,23,"hostStack"],[510,26,616,32],[510,27,616,33,"hostStack"],[510,36,616,42],[510,37,616,43,"length"],[510,43,616,49],[510,46,616,52],[510,47,616,53],[510,48,616,54],[511,10,617,16],[512,8,619,12],[513,10,620,16,"host"],[513,14,620,20],[513,15,620,21,"match"],[513,20,620,26],[513,21,620,27,"push"],[513,25,620,31],[513,26,620,32],[514,12,621,20,"syntax"],[514,18,621,26],[514,20,621,28,"item"],[514,24,621,32],[514,25,621,33,"syntax"],[514,31,621,39],[514,35,621,43],[514,39,621,47],[515,12,622,20,"token"],[515,17,622,25],[515,19,622,27,"item"],[515,23,622,31],[515,24,622,32,"token"],[515,29,622,37],[515,30,622,38,"value"],[515,35,622,43],[516,12,623,20,"node"],[516,16,623,24],[516,18,623,26,"item"],[516,22,623,30],[516,23,623,31,"token"],[516,28,623,36],[516,29,623,37,"node"],[517,10,624,16],[517,11,624,17],[517,12,624,18],[518,6,625,8],[519,6,627,8,"item"],[519,10,627,12],[519,13,627,15,"item"],[519,17,627,19],[519,18,627,20,"prev"],[519,22,627,24],[520,4,628,4],[521,4,630,4],[521,11,630,11,"matchResult"],[521,22,630,22],[522,2,631,0],[523,2,633,0,"module"],[523,8,633,6],[523,9,633,7,"exports"],[523,16,633,14],[523,19,633,17],[524,4,634,4,"matchAsList"],[524,15,634,15],[524,17,634,17,"matchAsList"],[524,28,634,28],[525,4,635,4,"matchAsTree"],[525,15,635,15],[525,17,635,17,"matchAsTree"],[525,28,635,28],[526,4,636,4,"getTotalIterationCount"],[526,26,636,26],[526,28,636,28],[526,37,636,28,"getTotalIterationCount"],[526,60,636,28],[526,62,636,39],[527,6,637,8],[527,13,637,15,"totalIterationCount"],[527,32,637,34],[528,4,638,4],[529,2,639,0],[529,3,639,1],[530,0,639,2]],"functionMap":{"names":["<global>","reverseList","areStringsEqualCaseInsensitive","isContextEdgeDelim","isCommaContextStart","isCommaContextEnd","internalMatch","moveToNextToken","getNextToken","stateSnapshotFromSyntax","pushThenStack","pushElseStack","addTokenToMatch","openSyntax","closeSyntax","matchAsList","matchAsTree","module.exports.getTotalIterationCount"],"mappings":"AAA;ACmB;CDa;AEE;CFoB;AGE;CHQ;AIE;CJa;AKE;CLW;AME;ICC;KDK;IEE;KFI;IGE;KHS;IIE;KJO;IKE;KLE;IME;KNc;IOE;KPa;IQE;KRa;CNmX;AeE;CfkC;AgBE;ChB6C;4BiBK;KjBE"}},"type":"js/module"}]}