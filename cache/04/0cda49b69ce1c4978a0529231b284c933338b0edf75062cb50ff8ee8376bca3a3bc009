{"dependencies":[{"name":"../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":17,"index":17},"end":{"line":1,"column":40,"index":40}},{"start":{"line":2,"column":14,"index":67},"end":{"line":2,"column":37,"index":90}},{"start":{"line":3,"column":11,"index":111},"end":{"line":3,"column":34,"index":134}}],"key":"jdHcfLp+ZWoVoG/X76x8Q2Emsc0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var isHexDigit = _$$_REQUIRE(_dependencyMap[0], \"../tokenizer\").isHexDigit;\n  var cmpChar = _$$_REQUIRE(_dependencyMap[0], \"../tokenizer\").cmpChar;\n  var TYPE = _$$_REQUIRE(_dependencyMap[0], \"../tokenizer\").TYPE;\n  var IDENT = TYPE.Ident;\n  var DELIM = TYPE.Delim;\n  var NUMBER = TYPE.Number;\n  var DIMENSION = TYPE.Dimension;\n  var PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\n  var HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\n  var QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\n  var U = 0x0075; // U+0075 LATIN SMALL LETTER U (u)\n\n  function isDelim(token, code) {\n    return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n  }\n  function startsWith(token, code) {\n    return token.value.charCodeAt(0) === code;\n  }\n  function hexSequence(token, offset, allowDash) {\n    for (var pos = offset, hexlen = 0; pos < token.value.length; pos++) {\n      var code = token.value.charCodeAt(pos);\n      if (code === HYPHENMINUS && allowDash && hexlen !== 0) {\n        if (hexSequence(token, offset + hexlen + 1, false) > 0) {\n          return 6; // dissallow following question marks\n        }\n\n        return 0; // dash at the ending of a hex sequence is not allowed\n      }\n\n      if (!isHexDigit(code)) {\n        return 0; // not a hex digit\n      }\n\n      if (++hexlen > 6) {\n        return 0; // too many hex digits\n      }\n      ;\n    }\n    return hexlen;\n  }\n  function withQuestionMarkSequence(consumed, length, getNextToken) {\n    if (!consumed) {\n      return 0; // nothing consumed\n    }\n\n    while (isDelim(getNextToken(length), QUESTIONMARK)) {\n      if (++consumed > 6) {\n        return 0; // too many question marks\n      }\n\n      length++;\n    }\n    return length;\n  }\n\n  // https://drafts.csswg.org/css-syntax/#urange\n  // Informally, the <urange> production has three forms:\n  // U+0001\n  //      Defines a range consisting of a single code point, in this case the code point \"1\".\n  // U+0001-00ff\n  //      Defines a range of codepoints between the first and the second value, in this case\n  //      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n  // U+00??\n  //      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n  //      in this case defining the same as the value U+0000-00ff.\n  // In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n  //\n  // <urange> =\n  //   u '+' <ident-token> '?'* |\n  //   u <dimension-token> '?'* |\n  //   u <number-token> '?'* |\n  //   u <number-token> <dimension-token> |\n  //   u <number-token> <number-token> |\n  //   u '+' '?'+\n  module.exports = function urange(token, getNextToken) {\n    var length = 0;\n\n    // should start with `u` or `U`\n    if (token === null || token.type !== IDENT || !cmpChar(token.value, 0, U)) {\n      return 0;\n    }\n    token = getNextToken(++length);\n    if (token === null) {\n      return 0;\n    }\n\n    // u '+' <ident-token> '?'*\n    // u '+' '?'+\n    if (isDelim(token, PLUSSIGN)) {\n      token = getNextToken(++length);\n      if (token === null) {\n        return 0;\n      }\n      if (token.type === IDENT) {\n        // u '+' <ident-token> '?'*\n        return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);\n      }\n      if (isDelim(token, QUESTIONMARK)) {\n        // u '+' '?'+\n        return withQuestionMarkSequence(1, ++length, getNextToken);\n      }\n\n      // Hex digit or question mark is expected\n      return 0;\n    }\n\n    // u <number-token> '?'*\n    // u <number-token> <dimension-token>\n    // u <number-token> <number-token>\n    if (token.type === NUMBER) {\n      if (!startsWith(token, PLUSSIGN)) {\n        return 0;\n      }\n      var consumedHexLength = hexSequence(token, 1, true);\n      if (consumedHexLength === 0) {\n        return 0;\n      }\n      token = getNextToken(++length);\n      if (token === null) {\n        // u <number-token> <eof>\n        return length;\n      }\n      if (token.type === DIMENSION || token.type === NUMBER) {\n        // u <number-token> <dimension-token>\n        // u <number-token> <number-token>\n        if (!startsWith(token, HYPHENMINUS) || !hexSequence(token, 1, false)) {\n          return 0;\n        }\n        return length + 1;\n      }\n\n      // u <number-token> '?'*\n      return withQuestionMarkSequence(consumedHexLength, length, getNextToken);\n    }\n\n    // u <dimension-token> '?'*\n    if (token.type === DIMENSION) {\n      if (!startsWith(token, PLUSSIGN)) {\n        return 0;\n      }\n      return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);\n    }\n    return 0;\n  };\n});","lineCount":146,"map":[[2,2,1,0],[2,6,1,4,"isHexDigit"],[2,16,1,14],[2,19,1,17,"require"],[2,30,1,24],[2,31,1,24,"_dependencyMap"],[2,45,1,24],[2,64,1,39],[2,65,1,40],[2,66,1,41,"isHexDigit"],[2,76,1,51],[3,2,2,0],[3,6,2,4,"cmpChar"],[3,13,2,11],[3,16,2,14,"require"],[3,27,2,21],[3,28,2,21,"_dependencyMap"],[3,42,2,21],[3,61,2,36],[3,62,2,37],[3,63,2,38,"cmpChar"],[3,70,2,45],[4,2,3,0],[4,6,3,4,"TYPE"],[4,10,3,8],[4,13,3,11,"require"],[4,24,3,18],[4,25,3,18,"_dependencyMap"],[4,39,3,18],[4,58,3,33],[4,59,3,34],[4,60,3,35,"TYPE"],[4,64,3,39],[5,2,5,0],[5,6,5,4,"IDENT"],[5,11,5,9],[5,14,5,12,"TYPE"],[5,18,5,16],[5,19,5,17,"Ident"],[5,24,5,22],[6,2,6,0],[6,6,6,4,"DELIM"],[6,11,6,9],[6,14,6,12,"TYPE"],[6,18,6,16],[6,19,6,17,"Delim"],[6,24,6,22],[7,2,7,0],[7,6,7,4,"NUMBER"],[7,12,7,10],[7,15,7,13,"TYPE"],[7,19,7,17],[7,20,7,18,"Number"],[7,26,7,24],[8,2,8,0],[8,6,8,4,"DIMENSION"],[8,15,8,13],[8,18,8,16,"TYPE"],[8,22,8,20],[8,23,8,21,"Dimension"],[8,32,8,30],[9,2,9,0],[9,6,9,4,"PLUSSIGN"],[9,14,9,12],[9,17,9,15],[9,23,9,21],[9,24,9,22],[9,25,9,27],[10,2,10,0],[10,6,10,4,"HYPHENMINUS"],[10,17,10,15],[10,20,10,18],[10,26,10,24],[10,27,10,25],[10,28,10,27],[11,2,11,0],[11,6,11,4,"QUESTIONMARK"],[11,18,11,16],[11,21,11,19],[11,27,11,25],[11,28,11,26],[11,29,11,27],[12,2,12,0],[12,6,12,4,"U"],[12,7,12,5],[12,10,12,8],[12,16,12,14],[12,17,12,15],[12,18,12,27],[14,2,14,0],[14,11,14,9,"isDelim"],[14,18,14,16,"isDelim"],[14,19,14,17,"token"],[14,24,14,22],[14,26,14,24,"code"],[14,30,14,28],[14,32,14,30],[15,4,15,4],[15,11,15,11,"token"],[15,16,15,16],[15,21,15,21],[15,25,15,25],[15,29,15,29,"token"],[15,34,15,34],[15,35,15,35,"type"],[15,39,15,39],[15,44,15,44,"DELIM"],[15,49,15,49],[15,53,15,53,"token"],[15,58,15,58],[15,59,15,59,"value"],[15,64,15,64],[15,65,15,65,"charCodeAt"],[15,75,15,75],[15,76,15,76],[15,77,15,77],[15,78,15,78],[15,83,15,83,"code"],[15,87,15,87],[16,2,16,0],[17,2,18,0],[17,11,18,9,"startsWith"],[17,21,18,19,"startsWith"],[17,22,18,20,"token"],[17,27,18,25],[17,29,18,27,"code"],[17,33,18,31],[17,35,18,33],[18,4,19,4],[18,11,19,11,"token"],[18,16,19,16],[18,17,19,17,"value"],[18,22,19,22],[18,23,19,23,"charCodeAt"],[18,33,19,33],[18,34,19,34],[18,35,19,35],[18,36,19,36],[18,41,19,41,"code"],[18,45,19,45],[19,2,20,0],[20,2,22,0],[20,11,22,9,"hexSequence"],[20,22,22,20,"hexSequence"],[20,23,22,21,"token"],[20,28,22,26],[20,30,22,28,"offset"],[20,36,22,34],[20,38,22,36,"allowDash"],[20,47,22,45],[20,49,22,47],[21,4,23,4],[21,9,23,9],[21,13,23,13,"pos"],[21,16,23,16],[21,19,23,19,"offset"],[21,25,23,25],[21,27,23,27,"hexlen"],[21,33,23,33],[21,36,23,36],[21,37,23,37],[21,39,23,39,"pos"],[21,42,23,42],[21,45,23,45,"token"],[21,50,23,50],[21,51,23,51,"value"],[21,56,23,56],[21,57,23,57,"length"],[21,63,23,63],[21,65,23,65,"pos"],[21,68,23,68],[21,70,23,70],[21,72,23,72],[22,6,24,8],[22,10,24,12,"code"],[22,14,24,16],[22,17,24,19,"token"],[22,22,24,24],[22,23,24,25,"value"],[22,28,24,30],[22,29,24,31,"charCodeAt"],[22,39,24,41],[22,40,24,42,"pos"],[22,43,24,45],[22,44,24,46],[23,6,26,8],[23,10,26,12,"code"],[23,14,26,16],[23,19,26,21,"HYPHENMINUS"],[23,30,26,32],[23,34,26,36,"allowDash"],[23,43,26,45],[23,47,26,49,"hexlen"],[23,53,26,55],[23,58,26,60],[23,59,26,61],[23,61,26,63],[24,8,27,12],[24,12,27,16,"hexSequence"],[24,23,27,27],[24,24,27,28,"token"],[24,29,27,33],[24,31,27,35,"offset"],[24,37,27,41],[24,40,27,44,"hexlen"],[24,46,27,50],[24,49,27,53],[24,50,27,54],[24,52,27,56],[24,57,27,61],[24,58,27,62],[24,61,27,65],[24,62,27,66],[24,64,27,68],[25,10,28,16],[25,17,28,23],[25,18,28,24],[25,19,28,25],[25,20,28,26],[26,8,29,12],[28,8,31,12],[28,15,31,19],[28,16,31,20],[28,17,31,21],[28,18,31,22],[29,6,32,8],[31,6,34,8],[31,10,34,12],[31,11,34,13,"isHexDigit"],[31,21,34,23],[31,22,34,24,"code"],[31,26,34,28],[31,27,34,29],[31,29,34,31],[32,8,35,12],[32,15,35,19],[32,16,35,20],[32,17,35,21],[32,18,35,22],[33,6,36,8],[35,6,38,8],[35,10,38,12],[35,12,38,14,"hexlen"],[35,18,38,20],[35,21,38,23],[35,22,38,24],[35,24,38,26],[36,8,39,12],[36,15,39,19],[36,16,39,20],[36,17,39,21],[36,18,39,22],[37,6,40,8],[38,6,40,9],[39,4,41,4],[40,4,43,4],[40,11,43,11,"hexlen"],[40,17,43,17],[41,2,44,0],[42,2,46,0],[42,11,46,9,"withQuestionMarkSequence"],[42,35,46,33,"withQuestionMarkSequence"],[42,36,46,34,"consumed"],[42,44,46,42],[42,46,46,44,"length"],[42,52,46,50],[42,54,46,52,"getNextToken"],[42,66,46,64],[42,68,46,66],[43,4,47,4],[43,8,47,8],[43,9,47,9,"consumed"],[43,17,47,17],[43,19,47,19],[44,6,48,8],[44,13,48,15],[44,14,48,16],[44,15,48,17],[44,16,48,18],[45,4,49,4],[47,4,51,4],[47,11,51,11,"isDelim"],[47,18,51,18],[47,19,51,19,"getNextToken"],[47,31,51,31],[47,32,51,32,"length"],[47,38,51,38],[47,39,51,39],[47,41,51,41,"QUESTIONMARK"],[47,53,51,53],[47,54,51,54],[47,56,51,56],[48,6,52,8],[48,10,52,12],[48,12,52,14,"consumed"],[48,20,52,22],[48,23,52,25],[48,24,52,26],[48,26,52,28],[49,8,53,12],[49,15,53,19],[49,16,53,20],[49,17,53,21],[49,18,53,22],[50,6,54,8],[52,6,56,8,"length"],[52,12,56,14],[52,14,56,16],[53,4,57,4],[54,4,59,4],[54,11,59,11,"length"],[54,17,59,17],[55,2,60,0],[57,2,62,0],[58,2,63,0],[59,2,64,0],[60,2,65,0],[61,2,66,0],[62,2,67,0],[63,2,68,0],[64,2,69,0],[65,2,70,0],[66,2,71,0],[67,2,72,0],[68,2,73,0],[69,2,74,0],[70,2,75,0],[71,2,76,0],[72,2,77,0],[73,2,78,0],[74,2,79,0],[75,2,80,0],[76,2,81,0,"module"],[76,8,81,6],[76,9,81,7,"exports"],[76,16,81,14],[76,19,81,17],[76,28,81,26,"urange"],[76,34,81,32,"urange"],[76,35,81,33,"token"],[76,40,81,38],[76,42,81,40,"getNextToken"],[76,54,81,52],[76,56,81,54],[77,4,82,4],[77,8,82,8,"length"],[77,14,82,14],[77,17,82,17],[77,18,82,18],[79,4,84,4],[80,4,85,4],[80,8,85,8,"token"],[80,13,85,13],[80,18,85,18],[80,22,85,22],[80,26,85,26,"token"],[80,31,85,31],[80,32,85,32,"type"],[80,36,85,36],[80,41,85,41,"IDENT"],[80,46,85,46],[80,50,85,50],[80,51,85,51,"cmpChar"],[80,58,85,58],[80,59,85,59,"token"],[80,64,85,64],[80,65,85,65,"value"],[80,70,85,70],[80,72,85,72],[80,73,85,73],[80,75,85,75,"U"],[80,76,85,76],[80,77,85,77],[80,79,85,79],[81,6,86,8],[81,13,86,15],[81,14,86,16],[82,4,87,4],[83,4,89,4,"token"],[83,9,89,9],[83,12,89,12,"getNextToken"],[83,24,89,24],[83,25,89,25],[83,27,89,27,"length"],[83,33,89,33],[83,34,89,34],[84,4,90,4],[84,8,90,8,"token"],[84,13,90,13],[84,18,90,18],[84,22,90,22],[84,24,90,24],[85,6,91,8],[85,13,91,15],[85,14,91,16],[86,4,92,4],[88,4,94,4],[89,4,95,4],[90,4,96,4],[90,8,96,8,"isDelim"],[90,15,96,15],[90,16,96,16,"token"],[90,21,96,21],[90,23,96,23,"PLUSSIGN"],[90,31,96,31],[90,32,96,32],[90,34,96,34],[91,6,97,8,"token"],[91,11,97,13],[91,14,97,16,"getNextToken"],[91,26,97,28],[91,27,97,29],[91,29,97,31,"length"],[91,35,97,37],[91,36,97,38],[92,6,98,8],[92,10,98,12,"token"],[92,15,98,17],[92,20,98,22],[92,24,98,26],[92,26,98,28],[93,8,99,12],[93,15,99,19],[93,16,99,20],[94,6,100,8],[95,6,102,8],[95,10,102,12,"token"],[95,15,102,17],[95,16,102,18,"type"],[95,20,102,22],[95,25,102,27,"IDENT"],[95,30,102,32],[95,32,102,34],[96,8,103,12],[97,8,104,12],[97,15,104,19,"withQuestionMarkSequence"],[97,39,104,43],[97,40,104,44,"hexSequence"],[97,51,104,55],[97,52,104,56,"token"],[97,57,104,61],[97,59,104,63],[97,60,104,64],[97,62,104,66],[97,66,104,70],[97,67,104,71],[97,69,104,73],[97,71,104,75,"length"],[97,77,104,81],[97,79,104,83,"getNextToken"],[97,91,104,95],[97,92,104,96],[98,6,105,8],[99,6,107,8],[99,10,107,12,"isDelim"],[99,17,107,19],[99,18,107,20,"token"],[99,23,107,25],[99,25,107,27,"QUESTIONMARK"],[99,37,107,39],[99,38,107,40],[99,40,107,42],[100,8,108,12],[101,8,109,12],[101,15,109,19,"withQuestionMarkSequence"],[101,39,109,43],[101,40,109,44],[101,41,109,45],[101,43,109,47],[101,45,109,49,"length"],[101,51,109,55],[101,53,109,57,"getNextToken"],[101,65,109,69],[101,66,109,70],[102,6,110,8],[104,6,112,8],[105,6,113,8],[105,13,113,15],[105,14,113,16],[106,4,114,4],[108,4,116,4],[109,4,117,4],[110,4,118,4],[111,4,119,4],[111,8,119,8,"token"],[111,13,119,13],[111,14,119,14,"type"],[111,18,119,18],[111,23,119,23,"NUMBER"],[111,29,119,29],[111,31,119,31],[112,6,120,8],[112,10,120,12],[112,11,120,13,"startsWith"],[112,21,120,23],[112,22,120,24,"token"],[112,27,120,29],[112,29,120,31,"PLUSSIGN"],[112,37,120,39],[112,38,120,40],[112,40,120,42],[113,8,121,12],[113,15,121,19],[113,16,121,20],[114,6,122,8],[115,6,124,8],[115,10,124,12,"consumedHexLength"],[115,27,124,29],[115,30,124,32,"hexSequence"],[115,41,124,43],[115,42,124,44,"token"],[115,47,124,49],[115,49,124,51],[115,50,124,52],[115,52,124,54],[115,56,124,58],[115,57,124,59],[116,6,125,8],[116,10,125,12,"consumedHexLength"],[116,27,125,29],[116,32,125,34],[116,33,125,35],[116,35,125,37],[117,8,126,12],[117,15,126,19],[117,16,126,20],[118,6,127,8],[119,6,129,8,"token"],[119,11,129,13],[119,14,129,16,"getNextToken"],[119,26,129,28],[119,27,129,29],[119,29,129,31,"length"],[119,35,129,37],[119,36,129,38],[120,6,130,8],[120,10,130,12,"token"],[120,15,130,17],[120,20,130,22],[120,24,130,26],[120,26,130,28],[121,8,131,12],[122,8,132,12],[122,15,132,19,"length"],[122,21,132,25],[123,6,133,8],[124,6,135,8],[124,10,135,12,"token"],[124,15,135,17],[124,16,135,18,"type"],[124,20,135,22],[124,25,135,27,"DIMENSION"],[124,34,135,36],[124,38,135,40,"token"],[124,43,135,45],[124,44,135,46,"type"],[124,48,135,50],[124,53,135,55,"NUMBER"],[124,59,135,61],[124,61,135,63],[125,8,136,12],[126,8,137,12],[127,8,138,12],[127,12,138,16],[127,13,138,17,"startsWith"],[127,23,138,27],[127,24,138,28,"token"],[127,29,138,33],[127,31,138,35,"HYPHENMINUS"],[127,42,138,46],[127,43,138,47],[127,47,138,51],[127,48,138,52,"hexSequence"],[127,59,138,63],[127,60,138,64,"token"],[127,65,138,69],[127,67,138,71],[127,68,138,72],[127,70,138,74],[127,75,138,79],[127,76,138,80],[127,78,138,82],[128,10,139,16],[128,17,139,23],[128,18,139,24],[129,8,140,12],[130,8,142,12],[130,15,142,19,"length"],[130,21,142,25],[130,24,142,28],[130,25,142,29],[131,6,143,8],[133,6,145,8],[134,6,146,8],[134,13,146,15,"withQuestionMarkSequence"],[134,37,146,39],[134,38,146,40,"consumedHexLength"],[134,55,146,57],[134,57,146,59,"length"],[134,63,146,65],[134,65,146,67,"getNextToken"],[134,77,146,79],[134,78,146,80],[135,4,147,4],[137,4,149,4],[138,4,150,4],[138,8,150,8,"token"],[138,13,150,13],[138,14,150,14,"type"],[138,18,150,18],[138,23,150,23,"DIMENSION"],[138,32,150,32],[138,34,150,34],[139,6,151,8],[139,10,151,12],[139,11,151,13,"startsWith"],[139,21,151,23],[139,22,151,24,"token"],[139,27,151,29],[139,29,151,31,"PLUSSIGN"],[139,37,151,39],[139,38,151,40],[139,40,151,42],[140,8,152,12],[140,15,152,19],[140,16,152,20],[141,6,153,8],[142,6,155,8],[142,13,155,15,"withQuestionMarkSequence"],[142,37,155,39],[142,38,155,40,"hexSequence"],[142,49,155,51],[142,50,155,52,"token"],[142,55,155,57],[142,57,155,59],[142,58,155,60],[142,60,155,62],[142,64,155,66],[142,65,155,67],[142,67,155,69],[142,69,155,71,"length"],[142,75,155,77],[142,77,155,79,"getNextToken"],[142,89,155,91],[142,90,155,92],[143,4,156,4],[144,4,158,4],[144,11,158,11],[144,12,158,12],[145,2,159,0],[145,3,159,1],[146,0,159,2]],"functionMap":{"names":["<global>","isDelim","startsWith","hexSequence","withQuestionMarkSequence","urange"],"mappings":"AAA;ACa;CDE;AEE;CFE;AGE;CHsB;AIE;CJc;iBKqB;CL8E"}},"type":"js/module"}]}